{"path":".obsidian/plugins/text-extractor/cache/83d41638661162d0f0438f11e3e0d371.json","text":"1 Edit distance Let X = z1x2...x, and Y = y1¥2...ym be strings over some fixed alphabet X. e An insertion of “a” in X at position ¢ yields the string z122...z;azit1...z, (of length n+1). e A deletion at position i of X yields z1...%;_1Z;41...2, (of length n —1). For example, if X = “tree” then an insertion of “h” at positions 0 or 1 yield “htree” or “three” respectively, and a deletion at position 2 of X yields “tee”. The edit distance between X and Y is the minimum number of insertions and deletions to get string Y’ from string X (or vice versa). 1. What is the edit distance between X = “fence” and Y = “wicked”? 2. Let ED(n,m) be the edit distance between strings X[1..n] and Y[1..m]. Express ED(n,m) as a recurrence. Make sure to include appropriate base cases. Hint: think about the longest common subsequence problem discussed in class. 3. We already have efficient algorithms to find the LLCS of two strings. Can we use that algorithm to find the edit distance between X and Y? That is, can you find a reduction from the Edit Distance problem to the LLCS problem?","libVersion":"0.2.1","langs":"eng"}