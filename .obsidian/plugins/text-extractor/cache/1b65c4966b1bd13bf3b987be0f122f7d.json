{"path":".obsidian/plugins/text-extractor/cache/1b65c4966b1bd13bf3b987be0f122f7d.json","text":"Micros er v ices and A P I Des ign Topics CP S C 310: Introduction to S oftware E ngineer ing E xaminab le S kills - K now what an A P I is and why they are us ed. - Des cr ibe cons iderations for des igning high-quality A P Is . - Des ign and jus tify an A P I for a giv en s et of requirements . - Under s tand the role A P Is play in micros er v ice-bas ed architectures . - Des cr ibe the s trengths and weaknes s es of v er s ioning A P Is in micros er v ice and non-micros er v ice A P I env ironments . A P Is & Microser vices Mi r os r v i Ar hi t tur at M i um [https ://m ed ium .eng ineer ing /m ic ro s er v ic e-a rc hitec tur e-a t-m ed ium -9c 33805eb74f] CP S C 310: Introduction to S oftware E ngineer ing Monolit h to Microser vice CP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ing Microser vice P rop er t ies CP S C 310: Introduction to S oftware E ngineer ing Design Discip line CP S C 310: Introduction to S oftware E ngineer ing Microser vice “ S ynd romes” • P oorly mod elled micros er v ices caus e more har m than good, es pecially when y ou hav e more t han a coup le of them. • Lack of ob ser vab ilit y , which mak es it diﬃcult to t riage per for mance is s ues or failures . • When facing a problem, teams tend to create a new s er v ice ins tead of ﬁxing t he e xist ing one ev en though the latter may be a better option. • E v en though the s er v ices are loosely coup led, lack of a holist ic p ict ure of the whole s y s tem could be problematic. High-lev el L ow-lev el A P Is Ap p licat ion Programming Inter face W hat is an A P I? Ap p licat ion Programming Inter face W hat is an A P I? Ap p licat ion Programming Inter face Us er Inter face Computer s are communicating vs. curl -i http://cs310.students.cs.ubc.ca:11316 /api/v1/project_team000/<address> W hat is an A P I? CP S C 310: Introduction to S oftware E ngineer ing W hat is an A P I? “ a way for two or more computer programs to communicat e with each other ”- W ikipedia Client S er vice Ap p licat ion Programming Inter face API CP S C 310: Introduction to S oftware E ngineer ing E xamp les of A P Is CP S C 310: Introduction to S oftware E ngineer ing ● Only e x pos e neces s ar y functions . ● A bs traction hides comple x ity by emphas iz ing es s ential character is tics and s uppres s ing detail. ● C aller s hould not as s ume any thing about how an inter face is implemented. ● E ﬀ ects of inter nal changes are localiz ed. [http: //w w w .fatagnus .com/program-to-an-inter face-not-an-implementation/] Informat ion Hid ing CP S C 310: Introduction to S oftware E ngineer ing class ElevationController implements BarometricElevation { private correction: number; // geoid correction, set elsewhere // for a pressure in millibars, return elevation in meters. // assumes the correction field has been set for the geoid, or is 0 public getElevationInMeters(pressure: number): number { let altpress = (1 - Math.pow((pressure / 1013), 0.19)) * 145366; altpress = (0.305 * altpress) + this.correction; return altpress; } } Informat ion Hid ing E xamp le interface BarometricElevation { getElevationInMeters(pressureInMB: number): number; } CP S C 310: Introduction to S oftware E ngineer ing API CP S C 310: Introduction to S oftware E ngineer ing API Mobile P hone W eb Independent S oftware V endor s (IS V ) Inter nal Team P ar tner Tablet Laptop/P C E x ter nal S y s tem CP S C 310: Introduction to S oftware E ngineer ing A P I Design P rincip les 1. Do one thing and do it well. 2. A P Is s hould be as s mall as pos s ible but no s maller. • When in doubt, leav e it out. A P Is are forev er. 3. Implementation s hould not impact A P I. • L eaking A P I details is a fundamental mis tak e. 4. Minimiz e acces s . Increas es independence. 5. Names matter. 6. Documentation matter s . CP S C 310: Introduction to S oftware E ngineer ing 1. Do one thing and do it well. g etP a id User sAnd S or tByNa m e() –> g etUser s(p a id : b oolea n, sor tI nd ex: num b er ) A P I Design A d vice ( Josh Bloch @ G O O G ) CP S C 310: Introduction to S oftware E ngineer ing 2. A P Is s hould be as s mall as pos s ible but no s maller. ‘When in doubt, leav e it out’; hard to remov e A P I. ○ B ad: g etUser s(p a id O nly: b oolea n, sor tK e y: User s. K e ys) ○ B es t: g etP a id User s() ← s or tK ey not needed, client s or ts . A P I Design A d vice ( Josh Bloch @ G O O G ) CP S C 310: Introduction to S oftware E ngineer ing 3. Implementation s hould not impact A P I. 4. Minimiz e acces s . Increas es independence. A P I Design A d vice ( Josh Bloch @ G O O G ) A P Is s hould never e x pos e inter nal implementation details . ○ Thes e mak e it diﬃcult for the cons umer to us e and for the maintainer when they want to change in inter nal implementation detail. ○ g etUser s(p a id O nly: b oolea n, sor tK e y: User s. K e ys) (inde x e x pos es imp’l) CP S C 310: Introduction to S oftware E ngineer ing 5. Names matter. 6. Documentation matter s . A P I Design A d vice ( Josh Bloch @ G O O G ) The dev eloper ‘usab ilit y ’ of a s y s tem dictated by A P I quality. CP S C 310: Introduction to S oftware E ngineer ing A P I Design ● Two main ques tions will dr iv e many des ign decis ions : ○ What is the goal of this A P I? ○ Who will be us ing this A P I? ● A nd technical cons iderations : ○ Data for mats , protocols . ○ A uthentication, s ecur ity. ○ V er s ioning, licens ing. E as y to us e, hard to mis us e. CP S C 310: Introduction to S oftware E ngineer ing How To W rite an A P I ● S tar t with one-page s pec to create us e cas es . ● Talk to as many s tak eholder s as pos s ible. ● Code tes ts agains t A P I to s imulate client code. ● W r ite mult ip le clients before releas e. ○ If y ou only wr ite one, y ou’ll only ev er hav e one. ○ If y ou wr ite two, y ou can s uppor t more with diﬃculty. ○ If y ou wr ite three, it will wor k ﬁ ne. ● Mos t A P Is hav e fundamental limitations that are non-optimal. CP S C 310: Introduction to S oftware E ngineer ing Designing A P I Met hod s ● Don’t mak e a client do any thing that could be inter nal. ○ L ook for clones in y our s ample client s y s tems . ○ P rov ide bas ic ty pe acces s (e.g., conv er t data to s tr ings ). ● Us er s s hould not be s ur pr is ed by A P I behav iour. ○ Us e cons is tent params and ty pes (e.g., time alway s number millis econds ). ○ A v oid retur ns that demand e x ceptional handling (e.g., checking er ror codes ). ● F ail fas t: repor t er ror s as s oon as pos s ible. ○ Compiler better than r untime. ○ Fir s t er ror rather than las t at r untime. CP S C 310: Introduction to S oftware E ngineer ing Designing for Const ant Change A s Jeﬀ Dean WS DM K ey note: the abs tractions y ou choos e will change ov er time as new parameter s are lear ned. • T h in kin g co n cr et ely ab o u t w h at p ar ts o f th e syst em ar e lik ely t o ch an g e in the s hor t and medium ter ms are more lik ely to lead to us eful and v aluable abs traction lay er s , rather than taking an 'any thing can change' v iew to des ign. • W h ile AP I s ar e fo r ever, th eir in t ern als w ill ch an g e m o r e th an yo u can u su ally im ag in e in ad van ce! • The r ight des ign for one s y s tem will probably be diﬀ erent at 10X load or 100X load (premature optimiz ation). CP S C 310: Introduction to S oftware E ngineer ing • What is us ability to a dev eloper ? P rogrammat ic Usab ilit y CP S C 310: Introduction to S oftware E ngineer ing P rogrammat ic Usab ilit y • What is us ability to a dev eloper ? • A P Is are aﬀ ordances us ed by dev eloper s for under s tanding • A P I des ign forces y ou to think from a client’s point of v iew . • Good A P Is encourage reus ability. • B road v aluable A P Is can be widely us ed. G ood P rogramming P ract ice User Inter face Design API Usab ilit y E ﬀect ive Communicat ion CP S C 310: Introduction to S oftware E ngineer ing P rincip les of P rogrammat ic Usab ilit y ● G ood visib ilit y: P os s ible actions and s tates mus t be e x pos ed. ○ anti-e x ample: items.sort(string). items.sort(‘clearance’) ● G ood mod el: Helpful, cons is tent, and complete abs tractions clar ify the cor rect model of the s y s tem. ○ anti-e x ample: store.get(id: string) ● G ood map p ing: Natural mapping between actions & res ults . ○ anti-e x ample: store.getProduct(pid: string): any ● G ood feed b ack: Continuous feedback about res ults of actions . ○ anti-e x ample: error: OperationFailure CP S C 310: Introduction to S oftware E ngineer ing","libVersion":"0.2.1","langs":""}