{"path":".obsidian/plugins/text-extractor/cache/bb50445024196229f177868ea1b9fb61.json","text":"Virtual memory summary * VM adds a level of indirection between the virtual program addresses (VA) and the physical RAM addresses (PA) * This allow us to do lots of cool things: — Map memory to disk (“unlimited” memory) — Keep programs from accessing each other’s memory (security) — Fill holes in the RAM address space (efficiency) * But, we have to translate every single memory access from a VA to a PA — Page Tables for each program keep track of all translations — Use larger pages (4kB) to reduce the number of Page Table Entries (PTEs) needed — Fast translation via a hardware translation lookaside buffer (TLB) * Need to combine the TLB and the cache for good performance — Physical caches: require translation first (slow) — Virtual caches: use virtual addresses (no translation: fast, but protection) — Virtually-Indexed, Physically-Tagged (VIPT) caches: use VA for index and PAkfor tag","libVersion":"0.2.1","langs":"eng"}