{"path":".obsidian/plugins/text-extractor/cache/f81deb31dffa531dcfad5bc43f6a546e.json","text":"2 A Reduction from 3-SAT to ST We’ve already shown that ST ∈ NP. To show that it’s NP-complete, we need to also show that it is NP-hard; that is, that it’s at least as hard as every other problem in NP. We’ll use 3-SAT to help us, since we already know that 3-SAT is at least as hard as every other problem in NP. 1. Which of these would show that ST is at least as hard as 3-SAT: reducing from ST to 3-SAT in polynomial time or reducing from 3-SAT to ST in polynomial time? (Hint: We know that any problem in NP can be reduced to 3-SAT in polynomial time. We want to prove that any problem in NP can be reduced to ST in polynomial time.) 2. Here is a sketch of a \"variable gadget\" to help with our reduction. How can we \"shade in\" (put in S) some of these vertices and choose an appropriate k (maximum number of edges in the solution) to enforce 3-SAT’s choice that x or x is true but not both? 4 3. Draw a graph with four variable gadgets (w, x, y, and z), all sharing a single \"hub\" node. Make sure your layout still enforces choosing either true or false but not both for each of the four variables, yet allows all 16 possible combinations of their truth values. 4. Now, ﬁnd a way to add one or more nodes and edges to your graph and choose a k in order to represent the clause (w ∨ x ∨ y) and enforce that: at least one of w, x, and y is true and also (still) each variable is either true or false but not both. (z isn’t in this clause, which is ﬁne. In most 3-SAT problems, not all variables are in all clauses.) 5 5. Give a complete reduction from 3-SAT to ST such that the answer to the ST instance you produce is YES if and only if the answer to the original 3-SAT instance is YES. 6. Analyze the runtime of your reduction (to show that it takes polynomial time). 6 3 Reduction Correctness Now, we’ll prove that our reduction is correct. To do this, we need to show that instance I is a Yes-instance of 3-SAT if and only if instance I ′ = (G, S, k) is a Yes-instance of ST. So, our proof should proceed in two directions, one for the “if” and one for the “only if”. 3.1 If I is a Yes-instance of 3-SAT then I ′ is a Yes-instance of ST 1. We usually want to go further than the assumption that I is a Yes-instance, and describe what is a good solution (i.e., working certiﬁcate) for I. Consider what a solution for 3-SAT looks like and use it to ﬁnish the statement: \"Since I is a Yes-instance of 3-SAT, there must be. . . \" 2. To prove that I ′ is a Yes-instance of ST, we similarly try to show the existence of a good solution (working certiﬁcate) to that instance, and conclude that therefore the answer to the instance is YES. What does a good solution for ST look like? 3. Given a truth assignment that satisﬁes I, how would you select the edges of the good solution of I ′? 4. Finish the proof to show that the ST certiﬁcate actually works, i.e., is a solution to the instance. 7 3.2 If I ′ is a Yes-instance of ST then I is a Yes-instance of 3-SAT 1. First, an apparently unrelated side-track: How many edges must there be in a tree with n nodes? So. . . if you use at most k edges to form a connected graph, how many nodes can you connect? 2. Now complete the proof. Hints: Many pieces of this proof will be very similar to the previous one, but you’ll also need to show that any solution (working certiﬁcate) for the ST instance has its edges where you intended them to be when you designed your reduction. It may help to think about the number of nodes you can possibly connect, given a maximum of k edges. 8","libVersion":"0.2.1","langs":""}