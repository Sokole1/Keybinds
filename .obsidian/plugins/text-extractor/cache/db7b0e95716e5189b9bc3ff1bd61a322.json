{"path":".obsidian/plugins/text-extractor/cache/db7b0e95716e5189b9bc3ff1bd61a322.json","text":"3 Reduction Correctness Now, we’ll prove that our reduction is correct. To do this, we need to show that instance I is a Yes-instance of 3-SAT if and only if instance I’ = (G, S, k) is a Yes-instance of ST. So, our proof should proceed in two directions, one for the “if” and one for the “only if”. 3.1 If ] is a Yes-instance of 3-SAT then I’ is a Yes-instance of ST 1. We usually want to go further than the assumption that I is a Yes-instance, and describe what is a good solution (i.e., working certificate) for I. Consider what a solution for 3-SAT looks like and use it to finish the statement: \"Since I is a Yes-instance of 3-SAT, there must be...\" SOLUTION: \"...some assignment of truth values to the variables that makes at least one literal true in every clause.\" 2. To prove that I’ is a Yes-instance of ST, we similarly try to show the existence of a good solution (working certificate) to that instance, and conclude that therefore the answer to the instance is YES. What does a good solution for ST look like? SOLUTION: The \"solution\" to an ST problem is a set of at most k edges that connect all the shaded nodes. 3. Given a truth assignment that satisfies I, how would you select the edges of the good solution of I'? SOLUTION: We designed our reduction so that one \"variable gadget\" represents the truth (or falsehood) of each variable. Thus, in each \"variable gadget\", we’ll use two edges to connect the \"pin\" to the hub via the variable node z; if z; is set to true, or via Z; if z; is set to false. This is possible using 2n edges in total. Then, pick the first literal that is true in each clause c¢;, and choose the edge connecting ¢; to that literal. Note that this literal node must already be connected to the variable’s hub and pin, since we ensured we always connect in the node corresponding to the variable’s truth value. We use ¢ additional edges here. 4. Finish the proof to show that the ST certificate actually works, i.e., is a solution to the instance. SOLUTION: Above we built a candidate solution using exactly 2n + c¢ edges. Does it actually connect all shaded nodes? Every variable’s pin node is connected to the hub, as discussed above. Further, every clause is connected to a true literal, which must in turn be connected to the hub given the way we chose the variable gadgets’ edges. Thus, our ST \"solution\" is a valid certificate showing the answer to the ST instance is YES.","libVersion":"0.2.1","langs":"eng"}