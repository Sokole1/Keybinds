{"path":".obsidian/plugins/text-extractor/cache/c2892881b549584e03c918560447e5bd.json","text":"A utomation CP S C 310: Introduction to S oftware E ngineer ing L ect ure L earning O ut comes B y the end of this lecture, y ou will be able to ans wer : ● What is Continuous Integration and Continuous Deliv er y /Deploy ment? What are the k ey s teps in each? ● What problems does CI/CD aim to s olv e? ● What is S emantic V er s ioning, and why do we us e it? ● What problems does Dev Ops s olv e in a company ? What tooling is av ailable? ● How and why do we tes t in production? A utomat ion CP S C 310: Introduction to S oftware E ngineer ing E xaminab le skills • E x plain the rationale behind the us e of automation in the s oftware dev elopment proces s . • Identify k ey ideas and common actions that are automated. • Des cr ibe the pur pos e and beneﬁ ts of continuous integration, and continuous releas e (deploy ment/deliv er y ). • Under s tand why branches are us ed in dev elopment and the beneﬁ ts and drawbacks of branch-bas ed dev elopment. • E x plain how s emantic v er s ioning wor ks . A utomat ion CP S C 310: Introduction to S oftware E ngineer ing @310-bot #c0 @310-bot #c1 @310-bot #c2 @310-bot #c3 • The 310 bots are e x amples of continuous integration and rely on automation to check and ev aluate y our s y s tems . Thes e are k ey to Dev Ops (des cr ibed later ). • The cor ner s tone to thes e analy s es is automation: they r un automatically and continually to prov ide cr ucial dev elopment feedback. A utomat ion in t he p roject A utomated Target s: B uild S ty le Lint V iolations Tes t (public) Tes t (pr iv ate) Cov er CP S C 310: Introduction to S oftware E ngineer ing Change code Change code Change code A dd tes ts Implement Us er S tor y Fix bug Change code In 310 lectures we focus on the code dimens ion a lot: proces s es /des ign/implement- ation/maintenance of.. code. Cod ing and d ep loying Code CP S C 310: Introduction to S oftware E ngineer ing Change code Change code Change code Change code Deploy Code on its own is jus t half the s tor y. Code mus t be built into a releas e and deploy ed into production for us er s to beneﬁ t from it. Code Cod ing and d ep loying A dd tes ts Implement Us er S tor y Fix bug CP S C 310: Introduction to S oftware E ngineer ing Change code → version’ A ctions → C ont inuous Integrat ion loop CP S C 310: Introduction to S oftware E ngineer ing Change code → version’ G et code & dependencies A ctions → C ont inuous Integrat ion loop CP S C 310: Introduction to S oftware E ngineer ing Change code → version’ G et code & dependencies A ctions → ← F eedback C ont inuous Integrat ion loop CP S C 310: Introduction to S oftware E ngineer ing Change code → version’ G et code & dependencies B uild A ctions → ← F eedback C ont inuous Integrat ion loop CP S C 310: Introduction to S oftware E ngineer ing Change code → version’ G et code & dependencies B uild A ctions → ← F eedback C ont inuous Integrat ion loop CP S C 310: Introduction to S oftware E ngineer ing Change code → version’ G et code & dependencies B uild Run tests A ctions → ← F eedback C ont inuous Integrat ion loop CP S C 310: Introduction to S oftware E ngineer ing Change code → version’ G et code & dependencies B uild Run tests A ctions → ← F eedback C ont inuous Integrat ion loop CP S C 310: Introduction to S oftware E ngineer ing Change code → version’ G et code & dependencies B uild Run tests … ● R epeatable ● R eliable A ctions → ← F eedback C ont inuous Integrat ion loop CP S C 310: Introduction to S oftware E ngineer ing • A utomated pipeline: • Tr iggered by code change ev ents . • E ns ures abs ence of obv ious build is s ues and conﬁ guration. is s ues (e.g., dependencies all check ed in). • E ns ures tes ts are e x ecuted. • May encourage more tes ts . • C an r un checks on diﬀ erent platfor ms , s ecur ity checks … C ont inuous Integrat ion CP S C 310: Introduction to S oftware E ngineer ing C ont inuous Integrat ion • A utomated pipeline: • Tr iggered by code change ev ents . • E ns ures abs ence of obv ious build is s ues and conﬁ guration. is s ues (e.g., dependencies all check ed in). • E ns ures tes ts are e x ecuted. • May encourage more tes ts . • C an r un checks on diﬀ erent platfor ms , s ecur ity checks … CP S C 310: Introduction to S oftware E ngineer ing CI Tools: T r av is CI [https ://blog.trav is -ci.com/2019-04-03-trav is -ci-ins ights ] [ https ://app.circleci.com/pipelines /github/ubccps c/clas s y ] CP S C 310: Introduction to S oftware E ngineer ing F rom integrat ion to release ● R eleas e management: ○ V er s ioning ○ B ranches ● Goal: Continuous releas es . ○ E v er y merge-to-main s hould be a releas e. CP S C 310: Introduction to S oftware E ngineer ing S emant ic versioning ● A s s ociated with s ome public A P I. ● F or a v er s ion number MA JOR .MINOR .P A T CH , increment the: ○ MA JOR when y ou mak e incompatible A P I changes , ○ MINOR when y ou add functionality in a backwards -compatible manner, and ○ P A T CH when y ou mak e backwards -compatible bug ﬁ x es . ● A dditional labels for pre-releas e and build metadata are av ailable as e x tens ions to the MA JOR .MINOR .P A T CH for mat. ○ ~1.2.3 → 1.2.*; ^5.4.3 → 5.*.* [ https://semver.org/] CP S C 310: Introduction to S oftware E ngineer ing W hy semant ic versioning? • Cons ider a librar y called “Firetr uck.” It requires a S emantically V er s ioned package named “Ladder.” • A t the time that Firetr uck is created, Ladder is at v er s ion 3.1.0. S ince Firetr uck us es s ome functionality that was ﬁ r s t introduced in 3.1.0, y ou can s afely s pecify the Ladder dependency as greater than or equal to 3.1.0 but les s than 4.0.0. • Now , when Ladder v er s ion 3.1.1 and 3.2.0 become av ailable, y ou can releas e them to y our package management s y s tem and know that they will be compatible with e x is ting dependent s oftware. CP S C 310: Introduction to S oftware E ngineer ing Branch management CP S C 310: Introduction to S oftware E ngineer ing ● Traditional V iew (B o x ed S oftware): ○ W or king toward ﬁ x ed releas e date, QA heav y before releas e. ○ R eleas e and mov e on. ○ Fix pos t-releas e defects in ne x t releas e or through e x pens iv e patches . ● F requent releas es : ○ Incremental updates deliv ered frequently (weeks , day s , ...), e.g. B rows er s . ○ A utomated updates (“patch culture”; “updater done? s hip it”). ● Hos ted s oftware (S aaS : s oftware as a s er v ice): ○ F requent incremental releas es , hot patches , diﬀ erent v er s ions for diﬀ erent cus tomer s , cus tomer may not ev en notice update. F rom r eleas e to cont inuous r eleas e CP S C 310: Introduction to S oftware E ngineer ing C ont inuous D eliver y vs. D ep loyment CP S C 310: Introduction to S oftware E ngineer ing [ https://commons.wikimedia.org/wiki/F ile:Co ntinuous_Delivery_process_diagram.svg] C ont inuous D eliver y p rocess CP S C 310: Introduction to S oftware E ngineer ing A utomat ion facilit ates rap id p rogress ● A ll mature teams us e automation to improv e their proces s . ● A utomation: ○ De-r is ks dev elopment through continual ev aluation. ○ F acilitates rapid problem identiﬁ cation. ○ E as es rollback: pas t s tates are well under s tood. ○ Decreas es res is tance to releas e (indiv idual s teps well under s tood, pos s ibility of rollback known). ● Increas es team tr us t; res ults are v is ible, and often mus t meet predeﬁ ned meas ures to qualify for code rev iew . ● A s mall inv es tment in automation almos t alway s pay s div idends in future time s av ings . Dev Ops CP S C 310: Introduction to S oftware E ngineer ing E xaminab le skills • E x plain the rationale behind the Dev Ops mov ement. • Identify k ey ideas and common practices in Dev Ops . • E x plain the v alue behind tes ting in production. • E x plain how A /B tes ting and canar y releas es wor k. • E x plain the role of automation and tools in Dev Ops . • Under s tand the pur pos e Dock er and K uber netes fulﬁ ll in the Dev Ops env ironment. DevO p s dev elopment → operations CP S C 310: Introduction to S oftware E ngineer ing How d id w e get here ● His tor ically , the people who dev elop the s oftware, and the people who operate s oftware were not on the s ame teams . ● This div ide has numerous downs ides : ○ P oor communication. ○ S low res olution of production is s ues . ○ L engthened feedback loop. ○ Higher deploy ment cos t/time. ● Dev Ops attempts to unify thes e teams . ● A utomation cr ucial to enable almos t all as pects of the moder n Dev Ops toolbo x . CP S C 310: Introduction to S oftware E ngineer ing DevO p s K ey G oals • Co llab o r atio n : B etter coordinate between dev eloper s and operations . • E ﬃcien cy: R educe fr iction in br inging changes from dev elopment into production. • Ho listic : Cons ider the entire tool chain from dev→ production. • Co n ﬁ g u r atio n s as co d e: Documentation and v er s ioning of all dependencies and conﬁ gurations and env ironments . • Au t o m atio n: E nable continuous deliv er y , monitor ing. • Q u ick : S mall iterations , incremental and continuous releas es . CP S C 310: Introduction to S oftware E ngineer ing Common release p rob lems E x amples : • Mis s ing dependencies . • Diﬀ erent compiler v er s ions or librar y v er s ions . • Diﬀ erent local utilities (e.g., unix grep v s mac grep). • Databas e problems (conﬁ g, auth, s torage). • OS diﬀ erences . • Too s low in real s ettings . • Diﬃcult to rollback changes . • S ource code from many diﬀ erent repos itor ies . • Obs cure hardware? Cloud? E nough memor y ? CP S C 310: Introduction to S oftware E ngineer ing Dev Ops d ivid e • Coding • Tes ting • S tatic analy s is • Code rev iews • Continuous integration • B ug tracking • R unning local tes ts • L ocal s calability e x per iments • … • A llocating hardware res ources • Managing OS updates • Monitor ing per for mance • Monitor ing cras hes • Managing load s pik es , ... • Tuning DB per for mance • R unning dis tr ibuted at s cale • R olling back releas es • … CP S C 310: Introduction to S oftware E ngineer ing Q A d oes not stop in d ev • E ns ur ing product builds cor rectly (e.g., reproducible builds ). • E ns ur ing s calability under real-wor ld loads . • S uppor ting env ironment cons traints from real s y s tems (hardware, s oftware, OS ). • E ﬃciency with giv en infras tr ucture. • Monitor ing (s er v er, databas e etc). • B ottlenecks , cras h-prone components , ... (pos s ibly thous ands of cras h repor ts per day /minute). CP S C 310: Introduction to S oftware E ngineer ing E ﬃ ciency of release p ip eline N e t flix proc e ss: [ h tt p s://w w w .slide share .ne t /jm c g ar r / c on t inuous-de liv e r y -a t-ne t flix -and-be y ond] CP S C 310: Introduction to S oftware E ngineer ing Heav y tooling/automat ion CP S C 310: Introduction to S oftware E ngineer ing Tooling/automat ion, e xamp les • Infras tr ucture as Code: A ns ible, T err afo rm, P uppet, Chef, Clo u d F o rm atio n . • CI/CD: T r avis, Jen kin s , TeamCity , GitLab, S hippable, B amboo, A z ure Dev Ops , B itbuck et P ipelines . • Tes t A utomation: S elenium, Cucumber, A pache JMeter. • Container iz ation: Do ck er , R ock et, Unik. • Orches tration: K u b ern et es , S war m, Mes os . • S oftware Deploy ment: E las tic B eans talk, Octopus , V amp. • Meas urement/Monitor ing: Datadog, Dy naTrace, K ibana, NewR elic, S er v iceNow , P r o m eth eu s , G r afan a . CP S C 310: Introduction to S oftware E ngineer ing • Lightweight v ir tualiz ation. • S ub-s econd boot time. • S hareable v ir tual images with full s etup & conﬁ guration. • Us ed in dev elopment and deploy ment. • S eparate dock er images for s eparate s er v ices (web s er v er, bus ines s logic, databas e, …). • W eak er is olation than v ir tual machines : les s s ecure. CP S C 310: Introduction to S oftware E ngineer ing • S cr ipts to change s y s tem conﬁ gurations (conﬁ guration ﬁ les , ins tall packages , v er s ions , …); declarativ e v s imperativ e. • Us ually placed under v er s ion control. • Cloud-nativ e (e.g. A WS CloudF or mation) v s . cloud-agnos tic (e.g. Ter rafor m). provider \"aws\" { access_key = \"${var.access_key}\" secret_key = \"${var.secret_key}\" region = \"us-east-1\" } resource \"aws_instance\" \"ec2_instance\" { ami = \"${var.ami_id}\" count = \"${var.number_of_instances}\" subnet_id = \"${var.subnet_id}\" instance_type = \"${var.instance_type}\" key_name = \"${var.ami_key_pair_name}\" } EC2Instance: Type: AWS::EC2::Instance Properties: InstanceType: Ref: InstanceType SecurityGroups: - Ref: InstanceSecurityGroup KeyName: Ref: KeyName ImageId: Fn::FindInMap: - AWSRegionArch2AMI - Ref: AWS::Region - Fn::FindInMap: - AWSInstanceType2Arch - Ref: InstanceType - Arch (Te r ra for m )(A W S CloudF or m a t ion) Conﬁgurat ion management , Infrast ruct ure as Cod e ( IaC) CP S C 310: Introduction to S oftware E ngineer ing K ub ernetes cont ainer orchest rat ion • Manages which container to deploy to which machine. • Launches and kills container s depending on load. • Manage updates and routing. • A utomated res tar t, replacement, replication, s caling. • K uber netes main controls many nodes . CP S C 310: Introduction to S oftware E ngineer ing Monitoring • Monitor s er v er health. • Monitor s er v ice health. • Collect and analy z e meas ures or log ﬁ les . • Das hboards and tr igger ing automated decis ions . • Many tools , e.g., Grafana as das hboard, P rometheus for metr ics , L oki + E las ticS earch for logs . • P us h and pull models . CP S C 310: Introduction to S oftware E ngineer ing Test ing in p rod uct ion?? CP S C 310: Introduction to S oftware E ngineer ing Crash telemet r y CP S C 310: Introduction to S oftware E ngineer ing W hat if...? ... we had plenty of s ubjects for e x per iments . ... we could randomly as s ign s ubjects to treatment and control group without them knowing. ... we could analy z e s mall indiv idual changes and k eep ev er y thing els e cons tant. → Ideal conditions for controlled e x per iments . CP S C 310: Introduction to S oftware E ngineer ing A /B test ing CP S C 310: Introduction to S oftware E ngineer ing E xp eriment siz e • W ith enough s ubjects (us er s ), we can r un many many e x per iments . • E v en v er y s mall e x per iments become feas ible. CP S C 310: Introduction to S oftware E ngineer ing A /B test ing ● Im p lem en t alt ern ative versio n s of the s y s tem: ○ Us ing feature ﬂ ags (decis ions in implementation) ○ S eparate deploy ments (decis ion in router /load balancer ). ● Map u sers to treatment group: ○ R andomly from dis tr ibution. ○ S tatic us er - group mapping. ○ Online s er v ice (e.g., launchdar kly , s plit). ● Mo n it o r o u tco m es per group: ○ Telemetr y , s ales , time on s ite, s er v er load, cras h rate. CP S C 310: Introduction to S oftware E ngineer ing F eat ure ﬂags ● B oolean options . ● Good practice; features are: ○ Track ed e x plicitly and documented. ○ L ocaliz ed and independent. ● E x ter nal mapping of ﬂ ags to cus tomer s : ■ e.g., the s ame 1% of us er s s ees one_click_check out, or 50% of beta-us er s and 90% of dev eloper s and 0.1% of all us er s . if (features.enabled(userId, \"one_click_checkout\")) { // new one click checkout function } else { // old checkout functionality } def isEnabled(user): Boolean = (hash(user.id) % 100) < 10 CP S C 310: Introduction to S oftware E ngineer ing Comp aring out comes Group A - B as e game. - 2,158 Us er s . - A v erage 18:13 min time on s ite. Group B - B as e game with e x tra power cards . - 2,020 Us er s . - A v erage 20:24 min time on s ite. CP S C 310: Introduction to S oftware E ngineer ing [ https://techcrunch.com/2014/06/29/ethics-in-a-data-driven-world/] CP S C 310: Introduction to S oftware E ngineer ing C anar y releases CP S C 310: Introduction to S oftware E ngineer ing • Tes ting releas es in production. • In cr em en tally d ep lo y a new releas e to us er s , not all at once. • Mo n it o r d iﬀer en ce in o u tco m es (e.g., cras h rates , per for mance, us er engagement). • Au t o m atically r o ll b ack bad releas es . • S imple v er s ion of A /B tes ting. • Telemetr y es s ential. C anar y releases CP S C 310: Introduction to S oftware E ngineer ing Chaos E xp eriment s “ A chaos e x per iment in production allows y ou to meas ure a s y s tem's traﬃc, patter ns of us e, res ource utiliz ation, and practical application. This infor mation can help b uild resilience within the s y s tem and improv e cy ber defens es .” [https ://w w w .cis ecur ity.org/ins ights /blog/the-chaos -e x per iment] [https ://netﬂ ix techblog.com/the-netﬂ ix -s imian-ar my -16e57fbab116] CP S C 310: Introduction to S oftware E ngineer ing Chaos E xp eriment s [https ://w w w .cis ecur ity.org/ins ights /blog/the-chaos -e x per iment] [https ://netﬂ ix techblog.com/the-netﬂ ix -s imian-ar my -16e57fbab116] CP S C 310: Introduction to S oftware E ngineer ing Chaos E xp eriment s [https ://w w w .cis ecur ity.org/ins ights /blog/the-chaos -e x per iment] [https ://netﬂ ix techblog.com/the-netﬂ ix -s imian-ar my -16e57fbab116] CP S C 310: Introduction to S oftware E ngineer ing Chaos E xp eriment s [https ://w w w .cis ecur ity.org/ins ights /blog/the-chaos -e x per iment] [https ://netﬂ ix techblog.com/the-netﬂ ix -s imian-ar my -16e57fbab116] CP S C 310: Introduction to S oftware E ngineer ing Chaos E xp eriment s [https ://w w w .cis ecur ity.org/ins ights /blog/the-chaos -e x per iment] [https ://netﬂ ix techblog.com/the-netﬂ ix -s imian-ar my -16e57fbab116] CP S C 310: Introduction to S oftware E ngineer ing Chaos E xp eriment s [https ://w w w .cis ecur ity.org/ins ights /blog/the-chaos -e x per iment] [https ://netﬂ ix techblog.com/the-netﬂ ix -s imian-ar my -16e57fbab116] CP S C 310: Introduction to S oftware E ngineer ing The comp le xit y of real DevO p s p ip elines • Incremental rollout, re-conﬁ gur ing router s . • C anar y tes ting. • A utomatic change rollback. F ur ther readings : Chunqiang et al. Holis tic conﬁ guration management at F acebook . In P roceedings of the 25th S y mpos ium on Operating S y s tems P r inciples . 2015. CP S C 310: Introduction to S oftware E ngineer ing DevO p s summar y • Code only has v alue if it can be us ed. Mos t moder n s y s tems are deploy ed rather than phy s ically s hipped. • Increas ing automation of tes ts and deploy ments . • Container s and conﬁ guration management tools help with automation, deploy ment, and rollbacks . • Monitor ing becomes cr ucial. • E nables many oppor tunities for tes ting in production: A /B tes ting, canar y releas es , feature ﬂ ags as mechanis m.","libVersion":"0.2.1","langs":""}