{"path":".obsidian/plugins/text-extractor/cache/99b91d556e24a2ebbf86b1a8bb151f34.json","text":"CPSC 320: Clustering Completed ∗ Step 5 Continued: Correctness of Greedy-Clustering Our goal is to show that our greedy algorithm below for our photo clustering problem produces a catego- rization that minimizes Cost(C). Recall that an instance of the problem is • n, the number of photos (numbered from 1 to n); • E, a set of weighted edges, one for each pair of photos, where the weight is a similarity in the range between 0 and 1 (the higher the weight, the more similar the photos); and • c the desired number of categories, where 1 ≤ c ≤ n. A categorization C is a partition of the photos into c (non-empty) sets, or categories. If C has more than one category, the inter-category similarity between two of its categories C1 and C2 is the maximum similarity between any pair of photos p1 ∈ C1 and p2 ∈ C2. Edges between photos in the same category are called intra-category edges. The cost of the categorization is the maximum inter-category similarity, taken over all pairs of categories. We’ll denote the cost by Cost(C). The lower the cost, the better the categorization, so we are trying to ﬁnd the categorization with minimum cost. function Clustering-Greedy(n, E, c) ▷ n ≥ 1 is the number of photos ▷ E is a set of edges of the form (p, p′, s), where s is the similarity of p and p′ ▷ c is the number of categories, 1 ≤ c ≤ n create a list of the edges of E, in decreasing order by similarity let C be the categorization with each photo in its own category Num-C ← n ▷ Initial number of categories while Num-C > c do remove the highest-similarity edge (p, p′, s) from the list if p and p′ are in diﬀerent categories of C then \"merge\" the categories containing p and p′ Num-C ← Num-C − 1 return C ∗Copyright Notice: UBC retains the rights to this document. You may not distribute this document without permission. 1 1. We’ll start by getting to know the terminology. Imagine that we’re looking at a categorization produced by our algorithm in which e is the inter-category edge with highest similarity. Can our greedy algorithm’s solution have an intra-category edge with lower weight than e? Either draw an example in which this can happen, or sketch a proof that it cannot. 2. Suppose that I tell you that C has an inter-category edge e with weight s. Can you ﬁnd an upper bound or lower bound on Cost(C) in terms of s? 3. On to proof of correctness of our greedy algorithm. Fix an instance of the problem. In what follows, let CG be the categorization produced by our greedy algorithm, and let C∗ be an optimal categorization on that instance. Let E′ be the set of edges removed from the list during iterations of the while loop. With respect to the greedy solution CG, are the edges in E′ inter-category? Or intra-category? Or could both types of edges be in E′? 2 4. Suppose that some edge e = (p, p′, s) of E′ is inter-category in the optimal solution C∗. What can we say about Cost(CG) versus Cost(C∗)? 5. Suppose that all edges of E′ are intra-category not only in CG, but also in the optimal solution C∗. Can CG and C∗ be diﬀerent? 6. Apply the progress made in parts 4 to 5 to conclude that CG must be an optimal solution. 3","libVersion":"0.2.1","langs":""}