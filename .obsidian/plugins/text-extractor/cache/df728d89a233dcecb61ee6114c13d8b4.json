{"path":".obsidian/plugins/text-extractor/cache/df728d89a233dcecb61ee6114c13d8b4.json","text":"3. Common Programming Concepts « Local variables can hold either data (like numbers, booleans, tuples, etc.) or pointers. 3.1. Variables and Mutability * Pointers can be created either through boxes (pointers owning data on the heap) or references 32.Data Types (non-owning pointers). 3.3. Functions This diagram illustrates how each concept looks at runtime: 3.4. Comments E3 D 3.5. Control Flow ! fn () 1 b 4. Understanding Ownership | ecitomms 0 i | inner(&mut a_num); p 4.1.Whatis Ownership? [ ; 4.2, References and Borrowing . . i 1 fn dnner(x: &mut i32) { p 4.3. Fixing Ownership Errors ! let another_num = 1; | 44, The Slice Type | let a_stack_ref = &another_num; p 4.5. Ownership Recap f }et ﬂ,:ﬂx = Boﬁ: :niwﬂ:‘: N ] [ P R | 5. Using Structs to Structure Related < | let a_box_heap_ref = &ra_box; Data ' ' 5.1. Defining and Instantiating Structs e ] p 5.2. An Example Program Using 1 ] Structs | f 5.3. Method Syntax | stack Heap Stack i 6. Enums and Pattern Matching | main 2 main 1 6.1. Defining an Enum 1 lanume a_num|5 i 6.2. The match Control Flow | dnner | Construct tix . ! 6.3. Concise Control Flow with if let i |another_num 1 i 6.4. Ownership Inventory #1 ii{f=EstackSrem o i i la_box . | 7. Managing Growing Projects with i i Packages, Crates, and Modules iiif=EtoxEstaciEre e i i |a_box_heap_ref e | 7.1. Packages and Crates ! : 7.2. Defining Modules to Control et","libVersion":"0.2.1","langs":"eng"}