{"path":".obsidian/plugins/text-extractor/cache/88ec9b574e7c0687b13abf6e7ce76df0.json","text":"Q7.4 1 Point Which of these best describes the maximum number of triples that could be in the set T? Check one. e(n?) o(n?) o(2\") o(3\") O(n!) Q7.5 2 Points For this part of the problem, assume that the set T\" has exactly n triples. In this case, what do you think would be the runtime of an efficient algorithm, IsConsistent(Tâ€™, R), that that outputs true if R is a consistent ranking, and false if not? Assume that the ranking R is represented by an array R[1..n] with R[] being the ith element in the ranking, and T is a list of triples. Check one. O(logn) O(n) O(nlogn) O(n?)","libVersion":"0.2.1","langs":"eng"}