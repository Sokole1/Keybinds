{"path":".obsidian/plugins/text-extractor/cache/6b808e40896008a2197c937d9f27d3f2.json","text":"1 Memoization: If I Had a Nickel for Every Time I Computed That Here you’ll use a technique called memoization to improve the runtime of the recursive brute force algorithm for making change. Memoization avoids making a recursive call on any subproblem more than once, by using an array to store solutions to subproblems when they are first computed. Subsequent recursive calls are then avoided by instead looking up the solution in the array. Memoization is useful when the total number of different subproblems is polynomial in the input size. 1. Rewrite BRUTE-FORCE-CHANGE, this time storing—which we call \"memoizing\", as in \"take a memo about that\"—each solution as you compute it so that you never compute any solution more than once. function MEMO-CHANGE(n) create a new array Soln of length n // using 1-based indexing for i from 1 to n do: Soln[i] «— return Memo-Change-Helper(n) function MEMO-CHANGE-HELPER(7) if ¢ < 0 then return infinity else if i = 0 then return else if ¢ > 0 then if Soln[i] == —1 then","libVersion":"0.2.1","langs":"eng"}