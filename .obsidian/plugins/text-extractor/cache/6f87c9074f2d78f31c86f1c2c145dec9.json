{"path":".obsidian/plugins/text-extractor/cache/6f87c9074f2d78f31c86f1c2c145dec9.json","text":"2. Fill in the following O(log n) time algorithm to solve this problem. (Note that there are two functions, and both include portions to be filled in.) [9 marks]| function isMajority(A, x): // Determine whether x is a majority element in A. // A has indexes 1, 2, 3, .., n n = length(A) i = firstOccurrence(A, x, 1, n) if i == -1: return False else if __________ ot return True else: return False function firstOccurrence(A, x, low, high): // returns index of first occurrence of x in A[low..high] if // subarray A[low .. high] is empty return -1 mid = floor((low+thigh)/2) if et // The first occurrence is at index low return low else if mid > low and _____________________________________: // The first occurrence is at index mid. return mid else if A[mid] < x: // The first occurrence is in the right half. return ____________ else: // The first occurrence is in the left half. return ________________","libVersion":"0.2.1","langs":"eng"}