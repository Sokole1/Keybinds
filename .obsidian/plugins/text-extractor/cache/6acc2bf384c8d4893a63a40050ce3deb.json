{"path":".obsidian/plugins/text-extractor/cache/6acc2bf384c8d4893a63a40050ce3deb.json","text":"CPSC 320 2023W1: Tutorial 1 1 Recursive Permutation Generation The brute force algorithm for stable matching in the worksheet relied on a means to generate permu- tations. The following recursive algorithm can be used to generate all n! permutations of a set of n distinct integers, which are stored in an array p[1..n]. 1: function Generate-All-Permutations(p[1..n], i) 2: ▷ p[1..n] contains n distinct integers, 1 ≤ i ≤ n 3: if i = 1 then 4: return p[1..n] 5: else 6: for j from i downto 1 do 7: swap(p[i],p[j]) 8: Generate-All-Permutations(p[1..n], i − 1) 9: swap(p[i],p[j]) 10: end for 11: end if 12: end function 1. When n = 4, i = 4, and the value of the array is initially 3,2,9,5 (i.e., p[1] = 3, p[2] = 2, p[3] = 9, and p[4] = 5), what is the ﬁrst permutation that is returned? 2. When n = 4, i = 4, and the value of the array is initially 3,2,9,5, what is the second permutation that is returned? 3. Let n = 3 and let p[1..3] be 1,2,3. What is the sequence of permutations that are returned by Generate-All-Permutations(p[1..3], 3]? 4. Use induction on i to prove the following claim. Claim: Let n > 0 and let 1 ≤ i ≤ n. For any value of the array p[1..n], when a call to Generate- All-Permutations(p[1..n], i) is made, the value of p[1..n] upon returning from the call is exactly the same as the initial value when that call is made. 1 2 Review proof by contradiction Let a, b and n be non-negative real numbers. Suppose that a · b = n. Prove that the statement either a ≤ √ n (1) or b ≤ √n (2) is true. 2","libVersion":"0.2.1","langs":""}