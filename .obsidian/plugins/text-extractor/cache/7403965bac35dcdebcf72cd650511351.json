{"path":".obsidian/plugins/text-extractor/cache/7403965bac35dcdebcf72cd650511351.json","text":"CPSC 320 Final Examination April 23rd, 2021, 8:30 to 11:00 \u0015 You have 150 minutes to write the 7 questions on this examination. A total of 75 marks are available. \u0015 Justify all of your answers. \u0015 You are allowed to access the course web site, Canvas, Piazza, your notes and the textbook but not other web sites. You are allowed to contact the course sta˙ through a private post on Piazza if you believe you have found an error on the exam, but you are not allowed to contact anyone else about the exam. \u0015 Keep your answers short. If you run out of space for a question, you have written too much. \u0015 The number in square brackets to the left of the question number indicates the number of marks allocated for that question. Use these to help you determine how much time you should spend on each question. \u0015 Use the back of the pages for your rough work. \u0015 Good luck! UNIVERSITY REGULATIONS: \u0015 Each candidate should be prepared to produce, upon request, his/her UBC card. \u0015 CAUTION: candidates guilty of any of the following, or similar, dishonest practices shall be immedi- ately dismissed from the examination and shall be liable to disciplinary action. 1. Having at the place of writing, or making use of, any books, papers or memoranda, electronic equipment, or other memory aid or communication devices, other than those authorised by the examiners. 2. Speaking or communicating with other candidates. page 2 out of 11 1 Assorted multiple answers 1. [2 marks] Your boss tells you that the company's largest client requires an e˚cient solution to the komplikovaný optimization problem. After studying this problem for a few days, you manage to prove that the decision version of this problem is NP-complete. What can you tell your boss without lying (choose all that apply)? No problem, I will have the algorithm written by the end of the month. Sorry boss, but it's not possible to write an e˚cient algorithm for this problem. It's very unlikely that the komplikovaný problem can be solved e˚ciently. There may be an e˚cient algorithm that won't always ˝nd the optimal solution, but won't be o˙ by more than a factor of some function of n from the optimal. Can I please have a raise? 2. [2 marks] After resolving the issue with the komplikovaný problem, you boss now asks you to solve the snadn¥fj²í optimization problem. You come up with a correct polynomial-time greedy algorithm for it. Which of the following statement(s) is/are true? The snadn¥fj²í problem is NP-complete. There is a correct dynamic programming algorithm for the snadn¥fj²í problem. No dynamic programming algorithm can solve the snadn¥fj²í problem correctly. There may or may not be a correct dynamic programming algorithm for the snadn¥fj²í problem. None of the above. 3. [2 marks] Which Θ bound will the Master Theorem give for the following recurrence relation? T (n) = { 8T (n/2) + 1.2n if n ≥ 2 Θ(1) if n = 1 nlog2 1.2 n3 n3 log n 1.2n The Master theorem can not be used to obtain a tight bound on T (n). 4. [2 marks] Which Θ bound will the Master Theorem give for the following recurrence relation? T (n) = { 10T (n/4) + n√n if n ≥ 4 Θ(1) if n ≤ 3 nlog4 10 n√n n√n log n n2 The Master theorem can not be used to obtain a tight bound on T (n). page 3 out of 11 2 Algorithm Design Paradigms Each of the algorithms below uses zero, or one or more of the following algorithm design techniques: divide and conquer, prune and search, greedy, dynamic programming. Select all of the techniques that apply to each algorithm, or None of the above . 1. [2 marks] for i = 0 to n - 1 do C[i][0] = 0 C[i][1] = 0 for len = 2 to n - 1 do for i = 0 to n - 1 do C[i][len] = ∞ for k = 1 to len - 1 i2 = (i + k) mod n i3 = (i + len) mod n x = C[i][k] + C[i2][len - k] + w(i, i2, i3) if x < C[i][len] then C[i][len] = x return C[0][n - 1] Divide and Conquer Prune and Search Greedy algorithm Dynamic Programming None of the above. 2. [2 marks] To color all regions of a map using as few colors as possible: while there is an uncolored region pick a new color C while there is an uncolored region R not adjacent to a region colored using C color R using color C Divide and Conquer Prune and Search Greedy algorithm Dynamic Programming None of the above. 3. [2 marks] To find value that occurs most often in array A: find value x1 that occurs most often in 1st half of A find value x2 that occurs most often in 2nd half of A count occurrences of x1 in the array count occurrences of x2 in the array return that of x1, x2 with most occurrences Divide and Conquer Prune and Search Greedy algorithm Dynamic Programming None of the above. page 4 out of 11 3 DeterministicSelect simpli˝ed, and less deterministic 1. [3 marks] An anonymous student ˝nds DeterministicSelect too complicated, and decides to simplify the algorithm by changing how it ˝nds a good pivot. Instead of choosing the pivot by making groups of ˝ve elements, ˝nding the median of each group using insertion sort, and then calling DeterministicSelect recursively to ˝nd the median of the group of ⌊n/5⌋ medians, the student decides to instead choose a pivot by calling DeterministicSelect recursively to ˝nd the median of a random group of ⌊n/5⌋ elements of the array. Complete the following recurrence relation for the worst-case running time of the student's version of DeterministicSelect . T (n) =  || || Θ(1) if n < 5 if n ≥ 5 2. [1 marks] Will the student's version of Deterministic Select run in Θ(n) time in the worst-case? Yes No 3. [6 marks] Justify your answer to question 2. If your answer to question 2 was \u0010No\u0011, it is su˚cient to show that T (n) grows faster than n; you do not need to derive a tight bound on the value of T (n). page 5 out of 11 4 Messages from Mars The very small nation of Nanonesia has successfully sent a rover to Mars. After collecting all kinds of fascinating data, the rover is now ready to transmit it back to Earth. This data consists of n fragments, where fragment i contains bi bits. The AI built into the rover also assigns a usefulness wi to each fragment, based on how useful the information in that fragment will be to the NAnonesia Space Agency (NASA). Unfortunately the rover's battery is depleting, it has not been able to ˝nd a power outlet, and so it only has enough energy left to transmit B bits of data. This means the rover may not be able to send all of its data before it runs out of battery. 1. [5 marks] First, consider the case where transmitting only a part of a data fragment is worthwhile. The usefulness of a partial data fragment will be proportional to how much of the fragment has been sent. For instance, if wi = 15, bi = 100 and the rover is able to send 50 bit of fragment i before running out of battery, then the usefulness of that partial fragment will be 15 ∗ 50/100 = 7.5. Describe a greedy algorithm that takes in the arrays b1, . . . , bn and w1, . . . , wn and the integer B, and maximizes the usefulness of the data the rover will send back to Earth. You may describe your algorithm using either words or pseudo-code. 2. [3 marks] Now, let us consider the case where transmitting only a part of a data fragment is equivalent to not sending anything at all for that data fragment (i.e. an incomplete fragment has no usefulness at all). Give a small example showing that your algorithm from question 1 will not always return an optimal solution. page 6 out of 11 5 Counters Suppose we have a collection of binary counters, all initialized at 0. Each counter is represented by a singly linked list of bits, where the least-signi˝cant (rightmost) bit is at the head of the list. For instance, a counter containing the value 10010 would be represented by the list 0 → 1 → 0 → 0 → 1. These counters support the following operations ( C and C′ are names of counters): ‹ Increment ( C): adds 1 to counter C. ‹ Double ( C): doubles the value of counter C by shifting. ‹ Add ( C, C′): adds the contents of C to C′ and sets C to 0. Suppose that a counter C has bits (C) bits, and ones (C) '1' bits. We will de˝ne the potential Φ(C) of C by Φ(C) = bits (C) + ones (C) For instance the potential of a counter with value 10010 would be 5 + 2 = 7. 1. [3 marks] What is the amortized cost of operation Double(C) ? 2. [5 marks] What is the amortized cost of operation Add(C, C') ? Assume that C contains n bits, that C′ contains n′ bits, that n′ ≥ n, and that the Add operation is performed the same way as regular binary addition. 3. [3 marks] Assuming that the amortized cost of the Increment operation is constant, prove a tight upper bound on the worst-case running time of a sequence of n Increment , Double and Add operations on a collection of counters all of which are initially set to 0. page 7 out of 11 6 Planning your summer vacation using dynamic programming Dr. Isulo, an alien computer scientist, is planning their summer holiday. They will divide the holiday between two locations A and B, possibly moving between them several times, with the following constraints: ‹ Dr. Isulo was given a guaranteed 100%-correct weather forecast for both locations by a medium with a crystal ball, and wants to maximize the number of days with \u0010good\u0011 weather in their current location. ‹ After moving from one location to the other, Dr. Isulo must remain in this new location at least three days before moving back (reaching the last day of Summer does not count as \u0010moving back\u0011). So, for instance, if Dr. Isulo moves from B to A on day 10, then the earliest they can move back to location B would be on day 13. Note that day 1 counts as moving to a new location. ‹ Moving from one location to the other incurs a ˝xed cost c. So the input to the problem will be a pair of arrays with n elements (one for location A and one for location B), where element i represents the weather on day i and is either \u0010good\u0011 or \u0010bad\u0011. The output should be an array of the same length where element i is either A (Dr. Isulo will spend day i in location A) or B. We are looking to maximize the number of days where the weather at Dr. Isulo's location is \u0010good\u0011 minus c times the number of location changes. For instance, if the input is A \u0010good\u0011, \u0010bad\u0011, \u0010bad\u0011, \u0010good\u0011, \u0010good\u0011, \u0010good\u0011, \u0010good\u0011, \u0010good\u0011, \u0010bad\u0011 B \u0010good\u0011, \u0010bad\u0011, \u0010good\u0011, \u0010good\u0011, \u0010good\u0011, \u0010bad\u0011, \u0010bad\u0011, \u0010bad\u0011, ` `good\u0011 c 0.6 and Dr. Isulo decides to spend days 1 to 5 in location B, and 6 to 9 in location A, then the value of the objective function will be 4 (days 1 to 5) + 3 (days 6 to 9) - 0.6 (moving from B to A) = 6.4. On the other hand, if Dr. Isulo decides to spend days 1 to 5 in location B, days 6 to 8 in location A and day 9 in location B, then the value of the objective function will be 4 (days 1 to 5) + 3 (days 6 to 8) + 1 (day 9) - 1.2 (moving from B to A and then from B to A) = 6.8. We will denote by cA(i, j) the number of days of good weather between day i and day j, inclusive, at location A. The function cB(i, j) is de˝ned the same way for location B. 1. [6 marks] Let VA[i] be the highest possible value of the objective function for days 1 to i, assuming Dr. Isulo is at location A on day i. Similarly, let VB[i] be the highest possible value of the objective function for days 1 to i, assuming Dr. Isulo is at location B on day i. Complete the following recurrence relation that de˝nes the value VA[i] (a symmetric recurrence can be written for VB[i], but we will not ask for it). Note: you can complete the other questions in this section without the answer to this one. VA[i] =  |||||||| |||||||| 0 if i = 0 if i > 0 and i ≤ if i > page 8 out of 11 2. [7 marks] Write pseudo-code for an iterative dynamic programming algorithm that computes VA[i] and VB[i] for every value of 0 ≤ i ≤ n. If you were unable to ˝nd a recurrence relation in question 1, use the recurrences VA[i] =  | | 0 if i = 0 1 if i > 0 and i ≤ 2 min1≤j≤i−1{cB(1, j) − c} if i > 2 VB[i] =  | | 0 if i = 0 1 if i > 0 and i ≤ 2 min1≤j≤i−1{cA(1, j) − c} if i > 2 page 9 out of 11 3. [5 marks] Write pseudo-code to construct the array that will contain, for each day i, the location where Dr. Isulo should be on day i. 4. [2 marks] What is the running time of your algorithm from question 2 as a function of n ? Note: describing a trivial (and totally irrelevant) algorithm in question 2 may result in not getting full marks for question 3. page 10 out of 11 7 From paths to graphs Recall from take-home test 2, that a path is a graph whose nodes can be written as v1, v2, . . . , vn with an edge between vi and vj if and only if the numbers i and j di˙er by exactly 1. On the test, we associated a positive integer weight wi with each node vi of the path, as in the following example: and considered the problem of ˝nding the subset of the vertices G with the largest total weight, subject to the condition that If a node vi with weight wi is chosen as part of the subset, then none of the nodes vi−1, vi−2, . . . , vi−wi can be chosen. In this question, we return to this problem but make two changes to it: ‹ We consider an arbitrary graph G that is not necessarily a path. The condition above now becomes If a node vi with weight wi is chosen as part of the subset, then no other node of G that's connected to vi by a path with at most wi vertices can be chosen. For instance, in the ˝gure below, if the bottom-left node (the node with the thicker border) is chosen, then none of the red nodes can be chosen. ‹ We turn the problem into a decision problem, by adding a parameter K, and asking whether or not there is a subset of the nodes of G that meets the condition and whose weights add up to at least K. Let's call this new problem the Unnamed problem (because, to the best of my knowledge, it doesn't have a name). We will prove that, unlike the version of the Unnamed problem that deals with paths, this version is NP-complete. 1. [3 marks] Describe one of the following: (a) A possible \u0010proof\u0011 (certi˝cate) for a Yes answer to the Unnamed problem. (b) A possible \u0010proof\u0011 (certi˝cate) for a No answer to the Unnamed problem. Explain brie˛y how to check this certi˝cate in polynomial time. page 11 out of 11 2. [4 marks] Show how to reduce an arbitrary instance of the Independent Set problem to an instance of the Unnamed problem with the same answer. Note: We are asking for the reduction from Independent Set to Unnamed instead of a reduction from Unnamed to Independent Set because it's the simpler one of the two. We are not implying that this direction is needed for the proof of NP-completeness \u0016 it might be; it might not be. 3. [5 marks] Prove that the answer to the instance of the Independent Set problem is Yes if and only if the answer to the instance of the Unnamed problem resulting from your reduction is Yes.","libVersion":"0.2.1","langs":""}