{"path":".obsidian/plugins/text-extractor/cache/3a2a70bba19bff297ed569c8eda3d39c.json","text":"CPSC 320 2023W1: Tutorial 7 1 Practice at Solving Recurrences A student in the class has proposed a sophisticated algorithm to predict whether or not there will be a heat wave during the ﬁnal, based on data from n previous years. The recurrence of the student’s algorithm is as follows: T (n) = { 2T (n/4) + T (3n/4) + cn2, if n ≥ 2 c, if n = 1. (1) 1. You want to get an upper bound on T (n). Since the Master Theorem does not handle recurrences like this, with two terms involving T () on the right hand side, you decide to work with the following recurrence: T (n) ≤ { 3T (3n/4) + cn2, if n ≥ 2 c, if n = 1. (2) Apply the Master Theorem to solve recurrence (2). 2. Draw level 0 (the root), level 1 and level 2 of the recursion tree for the original recurrence (1). Within each node, write (i) the size of the subproblem at this node and (ii) the time needed for the subproblem at this node (not counting times at deeper levels of recursion). 3. As a function of n, what is the total time needed at levels 1, 2 and 3 of the tree? Level 1: Level 2: Level 3: 4. Generalizing the pattern from the ﬁrst three levels of the tree, write down the total time needed at level i of the tree. Level i: 5. Write down a sum that upper bounds the total time over all levels of the tree. 6. Use part 5 to provide a big-O bound on the running time of the algorithm as a function of n. 7. Which method leads to a better bound, the Master Theorem or the recursion tree? 1 2 Divide & conquer Consider the problem of taking a sorted array A containing distinct (and not necessarily positive) integers, and determining whether or not there is a position i such that A[i] = i. 1. Describe a divide-and-conquer algorithm to solve this problem. Your algorithm should return such a position if it exists, or nil otherwise. If A[i] = i for several diﬀerent integers i, then you may return any one of them. 2. Analyze the running time of your algorithm as a function of the number of elements of A. 2","libVersion":"0.2.1","langs":""}