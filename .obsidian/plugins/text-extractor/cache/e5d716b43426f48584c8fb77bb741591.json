{"path":".obsidian/plugins/text-extractor/cache/e5d716b43426f48584c8fb77bb741591.json","text":"def predict(self, X): n, d = X.shape predictions = np.zeros(n) for i in range(n): pX_yz = self.pX_yz.copy() pX_yz[:, :, X[i] == 0] = 1 - pX_yz[:, :, X[i] == 0] # Binary data, flip . probabilities # Following the formula for log-probabilities we derived: sum_log_pX_yz = np.sum(np.log(pX_yz), axis=2) log_pz_y_plus = np.log(self.pz_y) + sum_log_pX_yz log_sum_exped = logsumexp(log_pz_y_plus, axis=1) add_log_prior = np.log(self.y_probs) + log_sum_exped predictions([i] = np.argmax(add_log_prior) return predictions","libVersion":"0.2.1","langs":"eng"}