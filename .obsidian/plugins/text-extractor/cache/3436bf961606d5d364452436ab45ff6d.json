{"path":".obsidian/plugins/text-extractor/cache/3436bf961606d5d364452436ab45ff6d.json","text":"William Kang Mathematics 318 Homework 4 77253938 Question 11. A particle of mass 1 g has a random velocity 𝑋 that is uniformly distributed between 2 cm/s and 3 cm/s. (a) Find the cumulative distribution function of the particle’s kinetic energy 𝑇 = 12 𝑋 2 . Answer: 𝑓 𝑋 ( 𝑥 ) = { 1 , 2 < 𝑥 < 3 0 , otherwise 𝐹 𝑋 ( 𝑥 ) = { 0 , 𝑥 < 2 𝑥 − 2 , 2 ≤ 𝑥 ≤ 3 1 , 𝑥 > 3 𝑇 = 12 𝑋 2 so when 𝑥 = 2 , 𝑡 = 2 when 𝑥 = 3 , 𝑡 = 92 𝐹 𝑇 ( 𝑡 ) = 𝑃 ( 𝑇 ≤ 𝑡 ) = 𝑃 ( 12 𝑋 2 < 𝑡 ) = 𝑃 ( 𝑋 ≤ √ 2 𝑡 ) = 𝐹 𝑋 ( √ 2 𝑡 ) 𝐹 𝑇 ( 𝑡 ) = {{{{{ 0 , 𝑡 < 2 √ 2 𝑡 − 2 , 2 ≤ 𝑡 ≤ 92 1 , 𝑡 > 92 (b) Find the probability density function of 𝑇 . Answer: The p.d.f. is just derivative of the CDF. 𝑓 ( 𝑡 ) = 𝑑 𝑑 𝑡 𝐹 ( 𝑡 ) = { ( 2 𝑡 ) − 12 , 2 ≤ 𝑡 ≤ 92 0 , otherwise (c) Determine the mean and standard deviation of 𝑇 in two ways: (i) using the p.d.f. of 𝑇 from part (b), 1 William Kang Mathematics 318 Homework 4 77253938 (ii) using the Law of the Unconscious Statistician and the uniform density of 𝑋 . 2 William Kang Mathematics 318 Homework 4 77253938 Question 22. Let 𝑋 1 , 𝑋 2 , … , 𝑋 𝑛 be independent random variables, each with uniform distribution on (0, 1). Let 𝑀 be the minimum of these random variables, (a) Show that the cumulative distribution function of 𝑀 is 𝐹 𝑀 ( 𝑥 ) = 1 − ( 1 − 𝑥 ) 𝑛 , 0 ≤ 𝑥 ≤ 1 (b) Find the probability density function of 𝑀 3 William Kang Mathematics 318 Homework 4 77253938 (c) Determine the mean and variance of 𝑀 . Question 3 4 William Kang Mathematics 318 Homework 4 77253938 Question 4 5 William Kang Mathematics 318 Homework 4 77253938 Question 5 6 William Kang Mathematics 318 Homework 4 77253938 7 William Kang Mathematics 318 Homework 4 77253938 5 d) One way to generate uniform random points on this disc is to first generate uniformrandom points on the square with corners ( ± 1 , ± 1 ) , by independently generating their 𝑥 and 𝑦 coordinates as uniform random variables on ( − 1 , 1 ) , and then ignore the points outside the unit circle. To visualize this, generate 5000 uniform random points on the square with corners( ± 1 , ± 1 ) and create a scatterplot of their locations. Draw a circle with radius one centred at the origin. The points inside the circle are then uniformly random points in the disk. from scipy . stats import uniform import matplotlib . pyplot as plt xs = [ ] ys = [ ] for _ in range ( 5000 ) : x , y = uniform . rvs ( - 1 , 2 ) , uniform . rvs ( - 1 , 2 ) xs . append ( x ) ys . append ( y ) plt . scatter ( xs , ys ) plt . xlabel ( \" x \" ) plt . ylabel ( \" y \" ) plt . title ( \" Q5 d) 5000 uniform points on (-1, 1) \" ) plt . axhline ( 0 , color = ' black ' , linewidth = 1 ) plt . axvline ( 0 , color = ' black ' , linewidth = 1 ) # https://stackoverflow.com/questions/9215658/plot-a-circle-with-pyplot circle = plt . Circle ( ( 0 , 0 ) , 1 , color = \" r \" , fill = False ) plt . gca ( ) . add_patch ( circle ) plt . show ( ) 8 William Kang Mathematics 318 Homework 4 77253938 9 William Kang Mathematics 318 Homework 4 77253938 5 e) Another way to represent points in this unit circle is via polar coordinates. We might try naively to generate uniform random points in the circle by first generating a random radius 𝑅 uniformly between 0 and 1 , and then by generating a random angle 𝑇 uniformly between 0 and 2 𝑝 𝑖 . Generate 5000 such random pairs ( 𝑅 , 𝑇 ) and create a scatterplot of the resulting points in the standard 𝑥 𝑦 -plane; that is, so that each pair gives the point ( 𝑥 , 𝑦 ) = ( 𝑅 cos 𝑇 , 𝑅 sin 𝑇 ) . Compare this scatterplot to the one you created in (a). Does this look uniformly random? Answer: No this one does not look uniformly random. Around the origin seems to be more dense in points compared to the edges. from scipy . stats import uniform import math import matplotlib . pyplot as plt xs = [ ] ys = [ ] for _ in range ( 5000 ) : r , theta = uniform . rvs ( 0 , 1 ) , uniform . rvs ( 0 , 2 * math . pi ) xs . append ( r * math . cos ( theta ) ) ys . append ( r * math . sin ( theta ) ) plt . scatter ( xs , ys ) plt . xlabel ( \" x \" ) plt . ylabel ( \" y \" ) plt . title ( \" Q5 e) 5000 polar coordinates points \" ) plt . axhline ( 0 , color = ' black ' , linewidth = 1 ) plt . axvline ( 0 , color = ' black ' , linewidth = 1 ) # https://stackoverflow.com/questions/9215658/plot-a-circle-with-pyplot circle = plt . Circle ( ( 0 , 0 ) , 1 , color = \" r \" , fill = False ) plt . gca ( ) . add_patch ( circle ) plt . show ( ) 10 William Kang Mathematics 318 Homework 4 77253938 5 f) By definition, the density of uniformly random points in the circle with respect to polar coordinates is the function 𝑓 ( 𝑟 , 𝜃 ) for which, if 𝐴 is a subset of the circle, ∫ ∫ 𝐴 𝑓 ( 𝑟 , 𝜃 ) 𝑑 𝑟 𝑑 𝜃 = area of A 𝜋 (1) Using your knowledge of multivariate calculus, what must 𝑓 ( 𝑟 , 𝜃 ) be? Answer: The double integral gives the area if the function is set to 1 . Therefore 𝑓 ( 𝑟 , 𝜃 ) = 1 𝜋 11 William Kang Mathematics 318 Homework 4 77253938 Question 6(a) Use Python to simulate a standard normal random variable 10000 times and make a plot of the running average. That is, if 𝑋 𝑖 is the 𝑖 th simulated value, make a plot of 𝑋 1 + … + 𝑋 𝑛 𝑛 (2) against 𝑛 for 𝑛 from 1 to 10000 . Does this plot look like it converges to 0 ? Answer: Yes it looks like it converges to 0. import numpy as np mu , sigma = 0 , 1 ns = list ( range ( 1 , 10001 ) ) running_average = [ ] running_sum = [ 0 ] # Just add this to make the code simpler, remove later for n in ns : sample = np . random . normal ( mu , sigma , 1 ) [ 0 ] cur_sum = running_sum [ - 1 ] + sample # last element + current running_sum . append ( cur_sum ) running_average . append ( cur_sum / n ) running_sum = running_sum [ 1 : ] # Ignore placeholder plt . plot ( ns , running_average ) plt . xlabel ( \" n \" ) plt . ylabel ( \" Running Average \" ) plt . title ( \" Q6a) Running average of standard normal random variable \" ) plt . legend ( ) plt . show ( ) 12 William Kang Mathematics 318 Homework 4 77253938 13 William Kang Mathematics 318 Homework 4 77253938 (b) Consider the model described in class where a spinner is located one unit of distance awayfrom an infinite wall. The angle 𝑌 that the pointer makes with the perpendicular to the wall is uniformly distributed over the interval ( − 𝜋2 , 𝜋2 ) . The distance 𝑋 of the point that the spinner points at to the perpendicular is thus 𝑋 = tan 𝑌 . It was argued in class that 𝑋 has no expectation (despite the fact that it might look as if it should have expected value 0). To illustrate this, use Python to simulate 𝑋 10000 times and make a plot of the running average of the simulated values. Does this plot look like it converges to 0 ? Does it look like it converges at all? Answer: No it does not look like it converges to 0 and does not look like it converges at all. import numpy as np from scipy . stats import uniform import matplotlib . pyplot as plt ns = list ( range ( 1 , 10001 ) ) running_average = [ ] running_sum = [ 0 ] # Just add this to make the code simpler, remove later for n in ns : y = uniform . rvs ( - math . pi / 2 , math . pi / 2 ) x = math . tan ( y ) cur_sum = running_sum [ - 1 ] + x running_sum . append ( cur_sum ) running_average . append ( cur_sum / n ) running_sum = running_sum [ 1 : ] # Ignore placeholder plt . plot ( ns , running_average ) plt . xlabel ( \" n \" ) plt . ylabel ( \" Running Average of X = tanY \" ) plt . title ( \" Q6b) Running average of X = tanY \" ) plt . legend ( ) plt . show ( ) 14 William Kang Mathematics 318 Homework 4 77253938 15","libVersion":"0.2.1","langs":""}