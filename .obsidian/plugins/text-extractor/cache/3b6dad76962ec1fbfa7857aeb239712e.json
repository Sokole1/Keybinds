{"path":".obsidian/plugins/text-extractor/cache/3b6dad76962ec1fbfa7857aeb239712e.json","text":"2.10 [H] You are required by a computer manufacturer to write a library function for a given floating point system to find the cube root y'/3 of any given positive number y. Any such relevant floating point number can be represented as y = a x 2Â¢, where a is a normalized fraction (0.5 < @ < 1) and e is an integer exponent. This library function must be very efficient and it should always work. For efficiency purposes it makes sense to store some useful constants ahead of computation time; e.g., the constants 21/3, % and a/3, should these prove useful. (a) Show how y'/3 can be obtained, once a'/3 has been calculated for the corresponding fraction, within three floating point operations. (If you cannot do it within three operations, do the best you can.) (b) Derive the corresponding Newton iteration and devise a way to compute a single iteration within four floating point operations only. (c) How would you choose an initial approximation? (d) Roughly how many iterations are needed? (The machine rounding unit is 2793.)","libVersion":"0.2.1","langs":"eng"}