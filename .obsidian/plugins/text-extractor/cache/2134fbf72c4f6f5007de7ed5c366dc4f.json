{"path":".obsidian/plugins/text-extractor/cache/2134fbf72c4f6f5007de7ed5c366dc4f.json","text":"1 2 3 6 4 1 3 0 48 92 9   Quiz Number:    Tutorial Section:  Important notes about this examination    1. You have 150 minutes (2.5 hours) to complete this exam, worth 100 marks.  2. You are allowed up to two double‐sided letter‐sized (8.5”x11”) sheets of notes as reference. Otherwise, no  notes or aids are allowed. No electronic equipment is allowed.  3. Enter as your Exam ID the rightmost 3 digits of the number printed in the corner of each page of your exam.  4. Please write your exam IN PEN (preferred) or VERY DARKLY in pencil.  5. Good luck!    Full Name:  ______________________  Exam ID:     Signature:  ______________________  UBC Student #:  THE UNIVERSITY OF BRITISH COLUMBIA  CPSC 320: Final Exam, August 13, 2019  Student Conduct during Examinations  1. Each examination candidate must be prepared to produce, upon the request of  the invigilator or examiner, his or her UBCcard for identification.  2. Examination candidates are not permitted to ask questions of the examiners or  invigilators, except in cases of supposed errors or ambiguities in examination  questions, illegible or missing material, or the like.  3. No examination candidate shall be permitted to enter the examination room  after the expiration of one‐half hour from the scheduled starting time, or to leave  during the first half hour of the examination. Should the examination run forty‐ five (45) minutes or less, no examination candidate shall be permitted to enter  the examination room once the examination has begun.  4. Examination candidates must conduct themselves honestly and in accordance  with established rules for a given examination, which will be articulated by the  examiner or invigilator prior to the examination commencing. Should dishonest  behaviour be observed by the examiner(s) or invigilator(s), pleas of accident or  forgetfulness shall not be received.  5. Examination candidates suspected of any of the following, or any other similar  practices, may be immediately dismissed from the examination by the  examiner/invigilator, and may be subject to disciplinary action:  i. speaking or communicating with other examination candidates, unless  otherwise authorized;  ii. purposely exposing written papers to the view of other examination  candidates or imaging devices;  iii. purposely viewing the written papers of other examination candidates;  iv. using or having visible at the place of writing any books, papers or other  memory aid devices other than those authorized by the examiner(s); and,  v. using or operating electronic devices including but not limited to telephones,  calculators, computers, or similar devices other than those authorized by the  examiner(s)—(electronic devices other than those authorized by the  examiner(s) must be completely powered down if present at the place of  writing).  6. Examination candidates must not destroy or damage any examination material,  must hand in all examination papers, and must not take any examination material  from the examination room without permission of the examiner or invigilator.  7. Notwithstanding the above, for any mode of examination that does not fall into  the traditional, paper‐based method, examination candidates shall adhere to any  special rules for conduct as established and articulated by the examiner.  8. Examination candidates must follow any additional examination rules or  directions communicated by the examiner(s) or invigilator(s).  Please do not write in this space: CPSC 320 2019S2: Final Exam August 13, 2019 This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. DO NOT DETACH THIS PAGE FROM YOUR EXAM BOOKLET POSSIBLY HELPFUL NOTES Sums of sequences: ‹ n∑ i=1 i = n(n+1) 2 , for n ≥ 1. ‹ n∑ k=0 ark = a ( 1−rn+1 1−r ), for n ≥ 0. ‹ ∞∑ k=0 ark = a 1−r , for |r| < 1. Combinatorics formulas: ‹ Number of ways to sample from k items n times, with replacement: kn ‹ Number of ways to order n distinct elements: n! ‹ Number of combinations of size k from n objects: ( n k ) = n! k!(n−k)! The Master Theorem For a recurrence like T (n) = aT ( n b ) + f (n), where a ≥ 1 and b > 1, the Master Theorem states three cases: 1. If f (n) ∈ O(nc) where c < logb a then T (n) ∈ Θ(nlogb a). 2. If for some constant k ≥ 0, f (n) ∈ Θ(nc(log n)k) where c = logb a, then T (n) ∈ Θ(nc(log n)k+1). 3. If f (n) ∈ Ω(nc) where c > logb a and af ( n b ) ≤ kf (n) for some constant k < 1 and su˚ciently large n, then T (n) ∈ Θ(f (n)). De˝nitions of big-O and friends: ‹ f (n) ∈ O(g(n)) (big- O, that is) exactly when there is a positive real constant c and positive integer n0 such that for all integers n ≥ n0, f (n) ≤ c · g(n). ‹ f (n) ∈ o(g(n)) (little- o, that is) exactly when for all positive real constants c, there is a positive integer n0 such that for all integers n ≥ n0, f (n) ≤ c · g(n). ‹ f (n) ∈ Ω(g(n)) exactly when g(n) ∈ O(f (n)). ‹ f (n) ∈ ω(g(n)) exactly when g(n) ∈ o(f (n)). ‹ f (n) ∈ Θ(g(n)) exactly when f (n) ∈ O(g(n)) and f (n) ∈ Ω(g(n)). This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. DO NOT DETACH THIS PAGE FROM YOUR EXAM BOOKLET This page intentionally left (almost) blank. If you write answers here, you must CLEARLY indicate on this page what question they belong with AND on the problem's page that you have answers here. This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. CS ID [ −1 mark if incorrect or missing] Please enter your 4 or 5 digit CSID in this box: 1 O(1) Answer Problems [9 marks] 1. [2 marks] In each blank on the left, write the letter of the Θ bound for that function. Each letter may appear in more than one blank or may not appear at all. n · n! A. Θ(n) √4n B. Θ(2n) 22n C. Θ(4n) 42+log4 n D. Θ((n + 1)!) E. Θ(nn) 2. [5 marks] True or False. (a) Assuming P ̸= NP, if I reduce problem A to an NP-complete problem B in polynomial time, it means that A is NP-hard. TRUE FALSE (b) The greedy graph colouring algorithm derived in assignment 3 (which used at most d + 1 colours, where d is the maximum degree of any node in the graph) is optimal (i.e., always uses the fewest possible colours). TRUE FALSE (c) The recurrence T (n) = 8T ( n 2 ) + n3 log n has a resulting asymptotic bound of Θ(n3 log n). TRUE FALSE (d) A reduction from A to B must work for any legal instance of problem A. TRUE FALSE (e) It is possible for an SMP instance to have some stable matchings that cannot be produced by the Gale-Shapley algorithm. TRUE FALSE 3. [1 mark] Which of the following bounds describe the worst-case runtime for QuickSort on an array of size n? Check ALL that apply . Θ(n log n) Ω(n log n) Θ(n2) Ω(n2) This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. 4. [1 mark] Consider the class of change-making problem with coin values c1, c2, . . . , ck for k > 1. Suppose that the greedy solution of always giving the largest possible coin value is optimal for this problem. What can we say about the dynamic programming solution to this problem? It will be optimal, but generally slower than the greedy algorithm It will be optimal, and generally faster than the greedy algorithm It will not be optimal It is impossible to determine whether or not the algorithm will be optimal 2 Can't Get No SAT-isfaction [8 marks] Here we consider a reduction from 4-SAT (a SAT instance where each clause has exactly four literals) to 3-SAT (where each clause has exactly three literals). Clauses may contain repeated literals. Our reduction is: introduce a new variable for each 4-literal clause and \u0010or\u0011 it in one clause onto the ˝rst two literals and in a second onto the last two literals. For example, we would convert a clause of the form (x1 ∨ x2 ∨ x2 ∨ x3) to two clauses (x1 ∨ x2 ∨ yi) ∧ (yi ∨ x2 ∨ x3). This reduction is incorrect . Complete the following to supply a counterexample to its correctness: Counterexample instance (of 4-SAT): Correct solution to this instance (YES or NO plus a brief explanation): Corresponding instance of 3-SAT produced by the reduction: Reduction's solution to this instance (YES or NO plus a brief explanation): This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. 3 Moderate True or False [9 marks] For each of the statements below, select whether the statement is true or false. Justify your choice. 1. [3 marks] There are n! possible certi˝cates for a SAT instance with n variables. Choose one: TRUE FALSE Justi˝cation: 2. [3 marks] Assume P ̸= NP. Then the special case of the Steiner Tree problem where all nodes are shaded can be solved in polynomial time. Choose one: TRUE FALSE Justi˝cation: 3. [3 marks] Assume P ̸= NP. If a problem is in NP and has a polynomial number of possible certi˝cates, then it is in P (i.e., it can be solved in polynomial time). Choose one: TRUE FALSE Justi˝cation: This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. 4 Extreme True and/or False [20 marks] Each of the following problems represents a scenario and a statement about that scenario. Each statement may be always true, sometimes true, or never true. For each one, ˝ll the circle by the best of these choices: ‹ If the statement is ALWAYS true, i.e., true in every instance matching the scenario. ‹ If the statement is SOMETIMES true, i.e., true in some instance matching the scenario but also false in some such instance. ‹ If the statement is NEVER true, i.e., true in none of the instances matching the scenario. Then, justify your answer as follows: ALWAYS answer: give and very brie˛y explain a small instance that ˝ts the scenario for which the statement is true; and prove that the statement is true for all instances that ˝t the scenario. SOMETIMES answer: give and very brie˛y explain a small instance that ˝ts the scenario for which the statement is true; and give and very brie˛y explain a small instance that ˝ts the scenario for which the statement is false. NEVER answer: give and very brie˛y explain a small instance that ˝ts the scenario for which the state- ment is false; and prove that the statement is false for all instances that ˝t the scenario. Here are the problems: 1. [5 marks] Scenario: An SMP instance with n ≥ 1. Statement: The Gale-Shapley algorithm with men proposing will return the same matching as the Gale-Shapley algorithm with women proposing. Choose one: ALWAYS SOMETIMES NEVER True instance (always/sometimes) or proof that statement is false in all instances (never): False instance (sometimes/never) or proof that statement is true in all instances (always): This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. 2. [5 marks] Scenario: an undirected bipartite graph with n ≥ 2 nodes. Statement: the graph has a 2-colouring. Choose one: ALWAYS SOMETIMES NEVER True instance (always/sometimes) or proof that statement is false in all instances (never): False instance (sometimes/never) or proof that statement is true in all instances (always): 3. [5 marks] Scenario: a simple, undirected, unweighted, connected graph G with n ≥ 3 nodes and a graph T that is a spanning tree of G. Statement: if v is an articulation point in T , then v is an articulation point in G. (Recall that an articulation point is a node whose removal increases the number of connected components in the graph.) Choose one: ALWAYS SOMETIMES NEVER True instance (always/sometimes) or proof that statement is false in all instances (never): False instance (sometimes/never) or proof that statement is true in all instances (always): This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. 4. [5 marks] Scenario: a simple, undirected, unweighted, connected graph G with n ≥ 3 nodes and a graph T that is a spanning tree of G. Statement: if v is an articulation point in G, then v is an articulation point in T . Choose one: ALWAYS SOMETIMES NEVER True instance (always/sometimes) or proof that statement is false in all instances (never): False instance (sometimes/never) or proof that statement is true in all instances (always): The rest of this page has been intentionally left (almost) blank. Feel free to use it for scrap work, or for extra space to write your answers. If you write answers here, you must CLEARLY indicate on this page what question they belong with AND on the problem's page that you have answers here. This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. 5 A Recurring Dream/Question Title [11 marks] Consider the recurrence relation: T (n) = { T ( 3n 4 ) + T ( n 5 ) + cn if n > 1 c if n = 1. 1. [1 mark] We have previously seen this recurrence relation in class. Which of the following runtimes is described by T (n)? The worst case for QuickSort with random pivot The average case for QuickSort with random pivot The worst case for QuickSelect with random pivot The worst case for Deterministic QuickSelect 2. [1 mark] Explain brie˛y why we cannot use the Master Theorem to obtain a tight bound on the function T (n). 3. [9 marks] Prove as tight an upper bound as possible on the function T (n). Your grade will depend both on the quality of the bound you provide (so showing that T (n) ∈ O(nn) will not give you many marks) and on the quality of your justi˝cation. (Possibly helpful notes: 3 4 + 1 5 = 19 20 and 9 16 + 6 20 + 1 25 = 192 202 .) This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. 6 Choose Your Own Adventure Reduction [12 marks] Consider the Word Transformation Problem (WTP): given two English words, transform the ˝rst word to the second word in as few steps as possible. The rules for each step of the transformation: ‹ The allowed operations at each step are: \u0015 Changing a single letter \u0015 Removing the ˝rst letter \u0015 Adding a letter before the ˝rst letter ‹ At each step of the transformation, I must still have a valid English word. For example, we can transform the word data into the word graph using the following sequence of operations (where, after each step, we have underlined the letter that was changed or added): data → dat e → rate → grate → gra pe → grap h We can also transform the word graph to the word data by reversing the order of the operations above (i.e., transform graph to grape to grate to rate to date to data ). Assume you are given a length- n array containing all the words in the English dictionary. In the following questions, you will describe how to solve WTP by creating a graph based on the words in the dictionary, and then using a familiar algorithm on that graph. Your solution should return the minimum number of operations to transform the ˝rst word into the second word (i.e., we do not require that you return the actual sequence of words), and should return in˝nity if there is no valid way to transform the ˝rst word into the second. 1. [1 mark] What kind of graph is the best choice to use to solve WTP? An undirected, unweighted graph An undirected, weighted graph A directed, unweighted graph A directed, weighted graph 2. [1 mark] Below are several algorithms we've seen in this class (which all take a graph as input). Which one is the best choice for solving WTP? Breadth-˝rst search Kruskal's algorithm Dijkstra's algorithm Topological sorting Greedy clustering algorithm This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. 3. [8 marks] Fill in the steps below to solve WTP. You should use the algorithm you selected in question 6.2, but you do not need to implement the algorithm. A. Describe how to build the input graph: B. Describe the inputs to the algorithm you selected in question 6.2: C. Assume you have run the algorithm you selected in question 6.2 with the speci˝ed input, and describe how to transform the output from that algorithm into the solution to WTP: 4. [2 marks] Give and brie˛y justify a good asymptotic upper bound on the runtime of part A of your algorithm (building the input graph) , in terms of n (the number of words in your dictionary) and k (the maximum length of any word in the dictionary). This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. 7 A Golden Opportunity [14 marks] You're in sales at a mining company and you have an n-centimeter-long bar of 24 karat gold. For each value of i for 1 ≤ i ≤ n (where i is an integer), you have the price you would get for selling an i-centimeter piece of the bar. Your goal is to determine the maximum value obtainable by cutting up your bar of gold and selling the pieces. For example, if the bar of gold is 8 centimetres long, and the di˙erent lengths have the following prices, then the maximum value is 1900 (by cutting into two pieces of length 3 and 5): length 1 2 3 4 5 6 7 8 price 100 200 800 900 1100 1200 1200 1100 If the prices were listed as below, then the maximum obtainable value would be 1600 (by cutting into eight pieces of length 1): length 1 2 3 4 5 6 7 8 price 200 300 400 500 600 700 800 900 1. [4 marks] Complete the following recurrence to compute the maximum obtainable value of a bar of gold of length n, given the prices in an array P (assuming 1-based indexing): MaxValue (n) =  ||||||||| ||||||||| when n = 0 max j=1,...,n when n ≥ 1 This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. 2. [8 marks] Complete the following dynamic programming algorithm to compute the maximum ob- tainable value in dividing a bar of gold of length n, given the prices in an array P : function ComputeMaxValue(P): n = length(P) // Set up the array Table (Table[i] should contain MaxValue(i)) let Table be an array with indexes 0 .. __________ // FILL IN THE BLANK Table[0] = ____________ // FILL IN THE BLANK for i = ___________________________: // FILL IN THE BLANK // FILL IN THE LOOP BODY return _________________ // FILL IN THE BLANK 3. [2 marks] Give and brie˛y justify a good asymptotic bound on the runtime and memory usage of your dynamic programming algorithm for question 2. This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. 8 Shh, No Talking [17 marks] You're a researcher studying how people communicate in the presence of language barriers. You're given a set of n di˙erent people of various nationalities and, for each person, you have a list of the languages they speak. For your study, you want to include as many people as you can such that no two of them speak the same language. We call this the Study Participant Selection (SPS) problem For example: suppose there are three people. If person 1 speaks language 1, person 2 speaks languages 1 and 2, and person 3 speaks languages 3 and 4, we would represent this instance as {[1], [1, 2], [3, 4]}. This instance has two optimal solutions: we can either select person 1 and person 3, or person 2 and person 3. 1. [4 marks] Consider an arbitrary SPS instance that contains a person p who speaks exactly one language. Prove that, for any such instance, there is some optimal solution that includes p. 2. [4 marks] Based on this insight, your friend proposes the following greedy algorithm: If no two people speak the same language, select them all. Otherwise, select the person who speaks the fewest languages, remove all other people who share a language with the one you just selected, and recurse. This strategy is not optimal . Prove this by completing the following counterexample. Counterexample: complete the counterexample below by ˝lling in the boxes to give the two lan- guages spoken by person 1, the three languages spoken by person 2, and the three languages spoken by person 3.      ,   ,   , ,   ,   , ,    ‖  Optimal solution to this instance: Greedy algorithm's solution to this instance: This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. 3. [2 marks] Consider now the decision variant of the SPS problem: given a set of people and the lists of languages each can speak, can I select at least k of them for my study such that no two speak the same language? Give a good certi˝cate for SPS (you do not need to prove that SPS is in NP, but your certi˝cate should be a good candidate for such a proof). 4. [7 marks] Recall the Independent Set (IS) problem: given a graph G = (V, E), is there a set of at least k vertices in V such that no two are adjacent (i.e., no two share an edge)? Prove that SPS is NP-hard by completing the following reduction from IS to SPS: Given: an instance {G=(V,E), k_IS} of Independent Set, where n = |V| and m = |E| Each v_i in V becomes a ________________________________________ in SPS Each edge e_j in E becomes a _______________________________________ in SPS Let L be a set of the lists of languages spoken by each person. L contains __________ entries, all initialized to []. For each edge e_k = (v_i, v_j) in E do: Define k_SPS = _____________________________________________________ Solve SPS(L, k_SPS). Return YES to IS iff _________________________________________. This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. DO NOT DETACH THIS PAGE FROM YOUR EXAM BOOKLET This page intentionally left (almost) blank. If you write answers here, you must CLEARLY indicate on this page what question they belong with AND on the problem's page that you have answers here. This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. DO NOT DETACH THIS PAGE FROM YOUR EXAM BOOKLET This page intentionally left (almost) blank. If you write answers here, you must CLEARLY indicate on this page what question they belong with AND on the problem's page that you have answers here. This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia. DO NOT DETACH THIS PAGE FROM YOUR EXAM BOOKLET This page intentionally left (almost) blank. If you write answers here, you must CLEARLY indicate on this page what question they belong with AND on the problem's page that you have answers here. This work is licensed under a Creative Commons Attribution 4.0 International License. cb For license purposes, the author is the University of British Columbia.","libVersion":"0.2.1","langs":""}