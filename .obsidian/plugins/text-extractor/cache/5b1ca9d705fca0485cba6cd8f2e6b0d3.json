{"path":".obsidian/plugins/text-extractor/cache/5b1ca9d705fca0485cba6cd8f2e6b0d3.json","text":"3 Runtime and Measures of Progress The following code is a small function written in Python: def rewrite( str ): while \"10\" in str: str = str.replace(\"10\",\"01\",1) print str return The loop condition checks whether the substring “10” occurs in the string str, and the assignment statement replaces the first occurence of the substring “10” with the substring “017. For example, if the function is called on: rewrite(\"0101\") it will print the following output: 0011 a. [2 marks| On the time-limited “test” you wrote a couple weeks ago, there was a very similar-looking problem, where the while loop replaced instances of “Alan” with “Patrice”. For that problem, a simple progress measure was the number of copies of “Alan” in the string. For this problem, it might therefore be tempting to try to use the number of copies of “10” in the string as a progress measure. Give an example string for which this attempted progress measure doesn’t work correctly, and briefly explain why this is not a good progress measure for this while loop. b. [3 marks] Define a progress measure for the while loop that does work, and use it to prove that the loop always terminates. If you wish, you may assume the string str consists of only 0s and 1s (mixed up in any order). (Hint: You might think about progress measures that work for sorting.)","libVersion":"0.2.1","langs":"eng"}