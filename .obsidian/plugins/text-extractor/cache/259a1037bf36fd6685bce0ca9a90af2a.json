{"path":".obsidian/plugins/text-extractor/cache/259a1037bf36fd6685bce0ca9a90af2a.json","text":"8. Let’s use the name TRANSFORM-CLAUSE to refer to the algorithm for transforming a clause, as described in part [7} Suppose that I’ is obtained from I by transforming clause (I1 Vlz...V l;) using algorithm TRANSFORM-CLAUSE. Explain why I is satisfiable if and only if I’ is satisfiable. SOLUTION: This generalizes our arguments in parts 4 and 5 If direction: First suppose that I is satisfiable, and choose a satisfying truth assignment to the variables z ...z,. We need to extend this to a satisfying truth assignment for I’, by assigning truth values to the newly created variables z;41,... %y (x_3)- Suppose that I; is the first literal in the clause (I; Vlz ...V l}) which is true with respect to the chosen truth assignment. Then we set @i, ..., (j_2) to true. These ensure that all clauses created before clause (@it(j—2) VI V Tiy(i-1)) are true. Literal /; ensures that clause (Z;;(j_2) V1; V zi_,,(]-_l)) is true. So, we can set the remaining newly created variables ;| (j_1),...,Tiy(k—3), to false, ensuring that the remaining newly created clauses are true. This ensures that all clauses in I’ are true. Only if direction: Conversely suppose that I’ is satisfiable. A truth assignment obtained by remov- ing the newly created variables from a satisfying truth assignment of I’ must satisfy all clauses of I other than ({1 Vla...V l), since all of these clauses are also in I’. Suppose that (I; VIs...V 1) is not satisfied by the chosen truth assignment. Then all of the /; are false. In this case, in the truth assignment satisfying I’, it must be that all of z;,,... s Tiy(k—3) are true, in order to satisfy the first ¥k — 3 newly created clauses. In this case, the last clause, namely (Tiy(k—3) Vlk—1 V I), will not be satisfied. This contradicts the fact that I\" is satisfied by the chosen truth assignment, and so we conclude that (I; V ly...V [) is indeed satisfied by the chosen truth assignment.","libVersion":"0.2.1","langs":"eng"}