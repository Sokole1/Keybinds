{"path":".obsidian/plugins/text-extractor/cache/c572ce2cd56d50944de693a5c8f2cbdf.json","text":"3 More on kth smallest elements in trees As in assignment 2, suppose we have a collection of values that’s dynamic: we will be inserting new values, and deleting old ones. In CPSC 221, you learned that we could store this data in a balanced binary search tree (such as an AVL tree) so every insertion and deletion operation takes in O(logn) time, where n is the size of the tree. So assume that we have a balanced binary search tree containing our data, and that in addition to the usual fields each node also contains the size of its left subtree. 1. [6 marks] Describe an efficient algorithm that takes in such a tree T and a value z, and returns the rank of z in the tree T. The element & has rank k if the tree contains 2, and there are k — 1 elements smaller than z. Your algorithm should return —1 if z is not an element of the tree.","libVersion":"0.2.1","langs":"eng"}