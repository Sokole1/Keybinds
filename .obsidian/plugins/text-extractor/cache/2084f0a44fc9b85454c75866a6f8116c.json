{"path":".obsidian/plugins/text-extractor/cache/2084f0a44fc9b85454c75866a6f8116c.json","text":"5. Consider the standard normal probability density function 1 z? )= ——exp|—— ). @)= gmoo(-%) It is known that there is no closed form for the antiderivative of this function, i.e., for the c.d.f. ® of the standard normal. However, the c.d.f. can be approximated accurately, and tables give 1 / f(z)dz = ®(1) — ®(0) =~ 0.3413. 0 (a) To demonstrate the method of Monte Carlo integration, use Python to approximate the integral fol f(z) dx by generating 40000 i.i.d. uniform random numbers on [0, 1] and computing the approximation 7 _ fW0) + f(U2) + - - + f(Usoo00) 40000 = —— 45500 from #4. Do this three times and record the results from each run. Submit your code and your output. (b) Another method for approximating this integral is to recall that the integral fol f(z) dz rep- resents the area underneath the graph of f from x = 0 to x = 1. To estimate this area, one could simulate a large number of uniform points in the square with corners at (0,0), (0,1), (1,0), and (1,1); then, find the proportion of points that lie underneath the curve y = f(z). Give a short argument (not a proof, just a motivation) as to why this is a reasonable way to approximate this area. (c) Perform the approximation in (b) by writing code to simulate 40000 i.i.d. uniform random numbers in the square [0, 1] x [0, 1] and determine the proportion of them falling in the region y < f(z). Do this three times and record the results each time. Submit your code and your output. o","libVersion":"0.2.1","langs":"eng"}