{"path":".obsidian/plugins/text-extractor/cache/6ceea33f96617226f4a118831a3db4db.json","text":"RO.5. Strings and Characters For this problem, assume a little-endian machine. Also, you might find the ASCIl man page (UNIX manual documentation) handy: man-pages/ascii-7.pdf. Consider the following code: char text[] = \"Cheers,\\@world!\"; // Line A printf(\"%s\\n\", text); printf(\"sld\\n\", strlen(text)); printf(\"%02X\\n\", text[strlen(text)]); What does this code print when run? Give the exact results up to but not including each end-of-line. Do not change case (e.g., C vs. c), add extra spaces, or add quotation marks unless they are printed. (Reminder: The %1d format code just produces a number from a long input (which strlen returns). The %02x format code produces a value in hexadecimal, padded with o on the left if needed to be 2 digits long, with no 0x at the start and with uppercase letters like F rather than 7.) « Linel: Cheers, (-} « Line2: 15 (-] « Line3: 21 (-] Now, we replace // Line A with the following two lines: uint32_t #val = (uint32_t)text + 1; xval = 0x50756C70; Now what is printed when we run the code? « Line1: (-] « Line2: (-] « Line 3: (-] How many bytes of memory minimum (ignoring any alignment) must be used to store text? integer (-] o ———————————— ———","libVersion":"0.2.1","langs":"eng"}