{"path":".obsidian/plugins/text-extractor/cache/390ff63ece8f71bce3e59a2137c2185d.json","text":"1 Boolean Satisfiability Boolean satisfiability (SAT) is—as far as Computer Scientists know—a hard problem, in the sense that no-one knows of an algorithm to solve SAT that has worst-case polynomial runtime. In the version of SAT that we discuss here, you're given a propositional logic expression like: (zl VZaVazxzV z4) A (Is) A (51) A (zz Vz3V Ts) A (fz Vv zs). You must determine whether any assignment of truth values to variables (the z;’s) makes the expression true, which we call satisfying the expression. Formally, an instance of SAT is a logical statement that is a conjunction (an \"and\" denoted by A) of c clauses. Each clause is a disjunction (an \"or\" denoted by V) of one or more literals, and each literal is either a variable z; or its negation Z;. For convenience, we’ll insist on using the variables z1,zs, ...z, for some 7, without skipping any. Given an instance I of SAT, we want to know: is the instance I satisfiable or not? The answer is either Yes or No, so we call this a decision problem. 1. Is the example SAT instance above satisfiable? If not, explain why not. If so, prove it by giving an assignment that makes the statement true.","libVersion":"0.2.1","langs":"eng"}