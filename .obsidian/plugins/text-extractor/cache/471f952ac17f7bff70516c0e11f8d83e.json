{"path":".obsidian/plugins/text-extractor/cache/471f952ac17f7bff70516c0e11f8d83e.json","text":"Question 2. (8 points) The IEEE 754 single precision floating point system uses base # = 2 and has 23 bits in its significand (mantissa), plus one more leading bit which is not explicitly stored. It has 8 bits for the exponent and one bit for the sign, for a total of 32 bits. The rounding unit is approximately equal to 5.96 x 108 and the largest finite positive number that can be represented on the system is approximately 3.4 x 10%. All integers with seven or fewer decimal digits can be converted exactly into a single precision value. The solution of a quadratic equation az?+bz+c = 0 where a # 0, is given by x4 = =tEVIi-dac ”2‘:’4‘\". The following two MATLAB scripts were executed for solving the equation, using single precision: Script 1: a=single(1); b=single(-1e6); c=single(1); xp=(-b+sqrt (b~2-4xaxc))/(2*a) ; xm=(-b-sqrt (b~2-4*axc))/(2*a) ; The results of the computation for Script 1 are: xp=1.0000e+6, xm=0 (in single precision). The correct results in this case are approximately xp=1.0000e+6 and xm=1.0000e-06. Therefore the approximation obtained by xp is fine but the approximation obtained by xm is uninformative, without meaningful correct decimal digits. Script 2: a=single(1); b=single(-1e20); c=single(1); xp=(-b+sqrt (b~2-4*axc))/(2*a) ; xm=(-b-sqrt (b~2-4*axc))/(2*a) ; The results of the computation for Script 2 are: xp=Inf, xm=-Inf (in single precision). The correct results in this case are approximately xp=1.0000e+20 and xm=1.0000e-20. Therefore, the results for both xp and xm are incorrect, Note that b in both scripts is negative. 4 pts (a) Explain the results. What goes wrong in each of the two scripts and why?","libVersion":"0.2.1","langs":"eng"}