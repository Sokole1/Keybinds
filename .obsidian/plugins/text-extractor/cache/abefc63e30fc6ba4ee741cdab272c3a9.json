{"path":".obsidian/plugins/text-extractor/cache/abefc63e30fc6ba4ee741cdab272c3a9.json","text":"QP2.8. Stack Smash In this problem, you call arrayinit with parameters that force a return to evilfun rather than evil_helper. Assume: « Code is run on a 64-bit machine using y86 calling conventions (but see the next item) « Our calls use base pointers; otherwise, no registers are explicitly saved on the stack by callers or callees. « Each function allocates space for all and only its explicitly declared local variables. You are also provided the following decimal addresses: main's first instruction: 700. o evil_helper's first instruction: 600. evilfun's first instruction: 400. e arrayinit's first instruction: 1700. « The instruction after the call to evil_helper: 1500. « The instruction after the call to arrayinit: 300. Hint: Violate arrayinit's REQUIRES clause! C Code int main(int argc, charx argv[]) { int64_t array[10]; evil_helper(array); // More code goes here to USE array. return 0; i void evil_helper(int64_t *array) { uint64_t scratch[9]; arrayinit(array, » // YOU fill in start 2, 9, ___ )i // YOU fill in val // More code goes here to USE scratch and/or array. ¥ // Assigns val into a[start], a[start+step], a[start+2+step], up to but not including a[sto // REQUIRES: @ <= start < stop <= array a's length. @ < step. void arrayinit(int64_t *a, int start, int step, int stop, int64_t val) { int current = start; do { alcurrent] = val; current += step } while (0 <= current && current < stop); ¥ void evilfun() { /* evil contents go here */ } L EEEEEEEEEEEEEEEEEEEEEEEEEEEEEE——————————— Give the decimal values (not hex) to be passed by evil_helper to arrayinit for the parameters start and val. For credit, your answers must be between -10000 and 10000. (start is worth three times as much as val.)) 1.start: | decimal integer @","libVersion":"0.2.1","langs":"eng"}