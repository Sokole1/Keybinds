{"path":".obsidian/plugins/text-extractor/cache/e6dd8e0d36561afefe991df64b20b87f.json","text":"2. (5 marks) Using the recurrence relation, develop a dynamic programming algorithm for com- puting OPT'(n). procedure DP-BEACON(DI1...n], P[1...n]) Create a new array Soln|[l..n] initialized with zeros Soln[l] + 1 for j < 2 ton do 2 i—j—1 Create a new array Probabilities-i[1..7] initialized with zeros while i >1 & D[j]— D[i] <100 do Probabilities-i[¢] - Solnli] x P[i] ii—1 Soln[j] + max{Probabilities-i} return Soln[n] 3. (2 marks) Suppose that the distinct entries in array D are all integers. In this case, if ¢ is the index of the furthest hill preceding j that is still within 100km of hill j, there are at most 100 possible hills between ¢ and j (including ¢ and j themselves). We consider 100 to be a constant, i.e., 100 = O(1). Give a big-O-bound on the runtime of your dynamic programming algorithm from part [2in this case, and briefly justify your bound.","libVersion":"0.2.1","langs":"eng"}