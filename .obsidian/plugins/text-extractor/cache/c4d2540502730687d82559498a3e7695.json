{"path":".obsidian/plugins/text-extractor/cache/c4d2540502730687d82559498a3e7695.json","text":"CPSC 302, Fall 2022 Midterm 1 Solutions Question 1. (6 points) Determine whether the following statements are true or false. There is no need to justify your answer; just write T/F at a visible place. (a)1 pt Suppose f (x) is a smooth function with several continuous derivatives. If the second- order accurate formula f (x+h)−f (x−h) 2h is used to approximate f ′(x) in the IEEE 754 double precision ﬂoating point system, then the absolute error \f \f \f f (x+h)−f (x−h) 2h − f ′(x)\f \f \f can be made arbitrarily small by setting h arbitrarily small. Answer: False (roundoﬀ errors prevent us from being able to do so) (b)1 pt The problem of evaluating f (x) = √x at x = 2 (i.e., evaluating √2 = 1.414...) is well conditioned. Answer: True (c)1 pt For a ﬂoating point system deﬁned by (β, t, L, U ), the rounding unit η = 1 2 β1−t (when rounding is used) is equal to the smallest positive number. Answer: False (smallest positive number is βL) (d)1 pt The largest positive number in the IEEE 754 double precision ﬂoating point system is approximately 10308. If x = 10200, then even though √x2 = x in exact arithmetic, on this ﬂoating point system the result of computing √x2 is not equal or approximately equal (with a relative error up to rounding unit) to x. Answer: True (the computation triggers overﬂow, which sets the value to Inf) (e)1 pt Suppose a function f (x) has a zero x∗ that satisﬁes f (x∗) = 0. If the derivative satisﬁes f ′(x∗) = 0 then bisection cannot possibly be applied for computing x∗. Answer: False (counterexample: f (x) = x3) (f)1 pt Suppose a function f (x) is continuous, has a continuous derivative, and has a zero x∗ that satisﬁes f (x∗) = 0 in a given interval, [a, b]. If in that interval f (x) > 0 for all x ̸= x∗, then Newton’s method cannot possibly converge to x∗ for an initial guess in [a, b]. Answer: False (counterexample: f (x) = x2) Question 2. (4 points) The IEEE 754 single precision ﬂoating point system uses base β = 2 and has 23 bits in its signiﬁcand (mantissa), plus one more leading bit which is not explicitly stored. It has 8 bits for the exponent and one bit for the sign, for a total of 32 bits. The rounding unit is approxi- mately equal to 5.96 × 10−8 and the largest ﬁnite positive number that can be represented on the system is approximately 3.4 × 1038. All integers with seven or fewer decimal digits can be converted exactly into a single precision value. The following Matlab script was executed: >> x=single(1e6); % x=1,000,000 -- represented in single precision >> y1=sqrt(x+1/x); >> y2=sqrt(x); >> z=y1-y2; In other words, we are trying to compute z = √x + 1 x − √x. (a)2 pts Upon running the script, we have observed that y1 is equal to y2 on the ﬂoating point sys- tem. Explain why. (In your answer please refer speciﬁcally to the numbers and information given in this question.) Answer: We have in exact arithmetic that x+ 1 x = 1000000+0.000001 = 1000000.000001, but in the signiﬁcand fewer decimal digits are available for an exact representation, as speciﬁed in the question, so we cannot represent the least signiﬁcant nonzero digit that corresponds to 1 x = 10−6. (It was okay if you didn’t write down the above number explic- itly.) Therefore, x + 1 x is represented in single precision as 1.0 × 106, which is equal to x. From this we get that y1 is equal to y2. The issue is in fact in storage of x + 1 x , which precedes the computation of the square root. (b)2 pts Rewrite the formula for computing z in a way that is more suitable for numerical compu- tations. Answer: We multiply by the conjugate: √ x + 1 x − √x = (√ x + 1 x − √x)(√x + 1 x + √x) (√ x + 1 x + √x ) = 1 x(√ x + 1 x + √x) . The above can be further approximated to 1 2x√x , which would be numerically appropriate, but it was okay to just write the expression above. Question 3. (10 points) Consider the function f (x) = 2x + ex. It can be shown that f (x) has a unique zero at x∗ = −0.3517... (You are not required to show it.) In case it helps for answering the following questions, ex∗ = 0.7035..., e−1 = 1 e = 0.3679..., e0 = 1, the derivative of f (x) = ex is f ′(x) = ex, and the derivative of r(x) = ln(x) for x > 0 is r′(x) = 1 x . (a)2 pts The bisection method with an initial interval [−1, 0] is guaranteed to converge. Explain why. Answer: f (x) is continuous on the interval because it is a sum of two continuous functions, a linear polynomial and the exponential function. At the interval’s ends we have f (−1) = −2 + 0.3679... < 0 and f (0) = 1 > 0. Therefore, since f (x) is continuous and changes sign from x = −1 to x = 0, bisection can be applied. (b)2 pts Show that the iterative scheme xk+1 = − 1 2 e xk converges linearly to x∗ for an initial guess x0 ∈ [−1, 0], and determine whether it converges at a rate which is faster or slower than bisection. You may assume without proof that x∗ is a unique ﬁxed point of the function g(x) = − 1 2 ex in the interval. Answer: if f (x) = 2x + ex = 0, then 2x = −ex and we have x = − 1 2 ex, therefore the ﬁxed point iteration will converge to x∗ if it converges. Since g′(x) = − 1 2 ex and Page 2 g′(x∗) = − 1 2 ex∗ = x∗ = −0.3517, , , < 1, we have that ρ = |g′(x∗)| = 0.3517... and convergence is linear. Convergence is faster than bisection because ρ < 0.5. (c)2 pts For an initial guess suﬃciently close to x∗, the iterative scheme xk+1 = xk − 2xk + exk 2 + exk is not guaranteed to converge / converges linearly / converges quadratically Answer: This is Newton’s method with f ′(x∗) = 2 + ex∗ ̸= 0. (d)2 pts For an initial guess x0 ∈ [−1, 0], the iterative scheme xk+1 = 3xk + e xk is not guaranteed to converge / converges linearly to x∗ / converges quadratically to x∗ Answer: This is a ﬁxed point iteration of the form xk+1 = g(xk) with g(x) = 3x + ex and g′(x) = 3 + ex. Therefore g′(x) > 1 and we have no convergence. Alternatively, we can show if x0 = 0 then xk > 3k−1 and therefore the iterates grow very quickly and diverge. (e)2 pts For an initial guess x0 ∈ [−1, 0], the iterative scheme xk+1 = ln(−2xk) is not guaranteed to converge / converges linearly to x∗ / converges quadratically to x∗ Answer: for g(x) = ln(−2x) we have g′(x) = 1 |x| for x < 0. For the speciﬁc interval −1 < x < 0 we have |g′(x)| > 1. Note also that an initial guess x0 = 0 results in an immediate failure with ln(−2x0) undeﬁned. Page 3","libVersion":"0.2.1","langs":""}