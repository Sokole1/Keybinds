{"path":".obsidian/plugins/text-extractor/cache/5ec9c3fc128b5c357bd991c31cacaa4f.json","text":"Consider a file of 62 4096-byte blocks, of which 25 are contiguous and the rest are randomly scattered across the disk. Assume that when blocks are adjacent by physical block number, they are on the same track. If we consider the time it takes to read this file sequentially, does it matter if the 25 contiguous blocks appear all together in the file or if each one follows a block that is non-contiguous? That is, will your sequential read performance be different for file A and file B? No The key thing to consider is how many seeks are needed. In the first case, we need 6 seeks (one before each pair of physically adjacent blocks). In the second, we also need 6 seeks: One at the beginning and then one before each of the non-contiguous blocks (the light blue). How long (in ms) will it take to read the entire file sequentially? Round your answer to 2 decimal places. Sequential read time= 267.85 ms Access time = seek time (find cylinder/ track) + rotational delay (find block) + transfer time, where rotational delay would be a half rotation on average If the disk spins at 10000 RPM, then the disk spins at 166.667 rotations per second, and it takes 6 ms per rotation. If there are 256 sectors per track, then the time to transfer a single sector is 6,/256 or 0.023 ms. If we read the file sequentially, then we'll pay a transfer time for every block and a seektime plus one-half rotation for each block that is not contiguous, or: (NumberO fBlocks x Trans ferTime) + (NumberO f Blocks — ContiguousBlocks) *(Seektime + RotationTime/2), whichis: (62 * 0.023) + (62 — 25) * (4.2 + 6/2). How long will it take if we read the file randomly? Round your answer to 2 decimal digits. Random read time= 447.85 ms If we read randomly, then every block requires a seek, a half rotation, and a transfer, which is 62 % (4.2 + 6/2 + 0.023).","libVersion":"0.2.1","langs":"eng"}