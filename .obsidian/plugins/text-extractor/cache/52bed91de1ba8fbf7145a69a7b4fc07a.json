{"path":".obsidian/plugins/text-extractor/cache/52bed91de1ba8fbf7145a69a7b4fc07a.json","text":"To d a y • To p i c • Im p r ov e C P I b y m a n u a l l y r e a r r a n g i n g c o d e • Le ar n i n g ou t c om e s • Re a r r a n g e y 8 6 i n s t r u c t i o n s t o i m p r o v e C P I ( i . e . , p r a c t i c e f o r L a b 5 ) CP S C 3 1 3 1 Le t ’ s t r y g e t t i n g ri d o f b u b b l e s CP S C 3 1 3 2 irmovq Data, % rbp # rbp points to data irmovq 8, % rsi # rsi = increment ptr xorq % rcx , % rcx # rcx = 0 (accumulator) loop: mrmovq 0(% rbp ), % rdi # read from array andq % rdi , % rdi # Check for 0 element je Done # Done if 0 addq % rdi , % rcx # add element to rcx addq % rsi , % rbp # advance to next item jmp loop # process next Done: halt Data: .quad 0xDECADE .quad 0xBE11 .quad 0xAB1E .quad 0xABBA .quad 0 lo n g lo n g a r r a y [ 5 ] ; lo n g lo n g * a p = a r r a y ; lo n g lo n g s u m = 0 ; wh i l e ( * a p ! = 0 ) { su m + = * a p ; ap + + ; } As s u m e f o rw a r d i n g a n d b r a n c h p r e d i c t i o n ( a l w a y s t a k e n ) 1. Ho w m a n y b u b b l e s ? 2. CP I ( H i n t : 31 in s t r u c t io n s a r e e x e c u t e d in t h e s e q u e n t ia l c a s e ) Ha z a r d s : D a t a CP S C 3 1 3 3 irmovq Data, % rbp # rbp points to data irmovq 8, % rsi # rsi = 8 xorq % rcx , % rcx # rcx = 0 (accumulator) loop: mrmovq 0(% rbp ), % rdi # read from array andq % rdi , % rdi # Check for 0 element je Done # Done if 0 addq % rdi , % rcx # add element to rcx addq % rsi , % rbp # advance to next item jmp loop # process next Done: halt Data: .quad 0xDECADE .quad 0xBE11 .quad 0xAB1E .quad 0xABBA .quad 0 lo n g lo n g a r r a y [ 5 ] ; lo n g lo n g * a p = a r r a y ; lo n g lo n g s u m = 0 ; wh i l e ( * a p ! = 0 ) { su m + = * a p ; ap + + ; } As s u m e f o rw ar d i n g an d b r an c h p r e d i c t i o n ( al w a y s t ak e n ) 1. Ho w m a n y b u b b l e s ? 1 s t a l l b e t w e e n m e m o r y a n d A L U o p ( 5 i t e r a t i o n s ) = 5 2. CP I ( H i n t : 31 in s t r u c t io n s a r e e x e c u t e d in t h e s e q u e n t ia l c a s e ) Ha z a r d s : C o n t r o l CP S C 3 1 3 4 irmovq Data, % rbp # rbp points to data irmovq 8, % rsi # rsi = 8 xorq % rcx , % rcx # rcx = 0 (accumulator) loop: mrmovq 0(% rbp ), % rdi # read from array andq % rdi , % rdi # Check for 0 element je Done # Done if 0 addq % rdi , % rcx # add element to rcx addq % rsi , % rbp # advance to next item jmp loop # process next Done: halt Data: .quad 0xDECADE .quad 0xBE11 .quad 0xAB1E .quad 0xABBA .quad 0 lo n g lo n g a r r a y [ 5 ] ; lo n g lo n g * a p = a r r a y ; lo n g lo n g s u m = 0 ; wh i l e ( * a p ! = 0 ) { su m + = * a p ; ap + + ; } As s u m e f o rw ar d i n g an d b r an c h p r e d i c t i o n ( al w a y s t ak e n ) 1. Ho w m a n y b u b b l e s ? 1 s t a l l b e t w e e n m e m o r y a n d A L U o p ( 5 i t e r a t i o n s ) = 5 2 qua s he d i ns t r uc t i o ns f o r mi s p r e d i c t s (4 in t e r a t io n s ) = 8 2. CP I ( H i n t : 31 in s t r u c t io n s a r e e x e c u t e d in t h e s e q u e n t ia l c a s e ) Ha z a r d s : C P I CP S C 3 1 3 5 irmovq Data, % rbp # rbp points to data irmovq 8, % rsi # rsi = 8 xorq % rcx , % rcx # rcx = 0 (accumulator) loop: mrmovq 0(% rbp ), % rdi # read from array andq % rdi , % rdi # Check for 0 element je Done # Done if 0 addq % rdi , % rcx # add element to rcx addq % rsi , % rbp # advance to next item jmp loop # process next Done: halt Data: .quad 0xDECADE .quad 0xBE11 .quad 0xAB1E .quad 0xABBA .quad 0 lo n g lo n g a r r a y [ 5 ] ; lo n g lo n g * a p = a r r a y ; lo n g lo n g s u m = 0 ; wh i l e ( * a p ! = 0 ) { su m + = * a p ; ap + + ; } As s u m e f o rw ar d i n g an d b r an c h p r e d i c t i o n ( al w a y s t ak e n ) 1. Ho w m a n y b u b b l e s ? 1 s t a l l b e t w e e n m e m o r y a n d A L U o p ( 5 i t e r a t i o n s ) = 5 2 qua s he d i ns t r uc t i o ns f o r mi s p r e d i c t s (4 in t e r a t io n s ) = 8 2. CP I ( H i n t : 31 in s t r u c t io n s a r e e x e c u t e d in t h e s e q u e n t ia l c a s e ) 31 in s t r u c t io n s + 13 st a l l / s q u a s h + 4 to fi l l pi pe = 48 CP I = 1 . 5 Ca n w e d o b e t t e r ? CP S C 3 1 3 6 irmovq Data, % rbp # rbp points to data irmovq 8, % rsi # rsi = 8 xorq % rcx , % rcx # rcx = 0 (accumulator) loop: mrmovq 0(% rbp ), % rdi # read from array andq % rdi , % rdi # Check for 0 element je Done # Done if 0 addq % rdi , % rcx # add element to rcx addq % rsi , % rbp # advance to next item jmp loop # process next Done: halt Data: .quad 0xDECADE .quad 0xBE11 .quad 0xAB1E .quad 0xABBA .quad 0 lo n g lo n g a r r a y [ 5 ] ; lo n g lo n g * a p = a r r a y ; lo n g lo n g s u m = 0 ; wh i l e ( * a p ! = 0 ) { su m + = * a p ; ap + + ; } As s u m e f o rw ar d i n g an d b r an c h p r e d i c t i o n ( al w a y s t ak e n ) Th e r e a r e t w o w a y s y o u c a n r e d u ce t h e n u m b e r o f b u b b l e s . W h a t a r e t h e y ? Le t ’ s t r y g e t t i n g ri d o f b u b b l e s CP S C 3 1 3 7 irmovq Data, % rbp # rbp points to data irmovq 8, % rsi # rsi = 8 xorq % rcx , % rcx # rcx = 0 (accumulator) loop: mrmovq 0(% rbp ), % rdi # read from array andq % rdi , % rdi # Check for 0 element je Done # Done if 0 addq % rdi , % rcx # add element to rcx addq % rsi , % rbp # advance to next item jmp loop # process next Done: halt Data: .quad 0xDECADE .quad 0xBE11 .quad 0xAB1E .quad 0xABBA .quad 0 lo n g lo n g a r r a y [ 5 ] ; lo n g lo n g * a p = a r r a y ; lo n g lo n g s u m = 0 ; wh i l e ( * a p ! = 0 ) { su m + = * a p ; ap + + ; } As s u m e f o rw ar d i n g an d b r an c h p r e d i c t i o n ( al w a y s t ak e n ) Th e r e a r e t w o w a y s y o u c a n r e d u ce t h e n u m b e r o f b u b b l e s . W h a t a r e t h e y ? 1. D o s o m e t h i n g u s e f u l a f t e r t h e mr mo v q th a t d o e s n o t d e p e n d o n rd i Ch a n g i n g ou r j u m p CP S C 3 1 3 8 irmovq Data, % rbp # rbp points to data irmovq 8, % rsi # rsi = 8 xorq % rcx , % rcx # rcx = 0 (accumulator) loop: mrmovq 0(% rbp ), % rdi # read from array addq % rsi , % rbp # advance to next item andq % rdi , % rdi # Check for 0 element je Done # exit addq % rdi , % rcx # add element to rcx jmp loop # process next Done: halt Data: .quad 0xDECADE .quad 0xBE11 .quad 0xAB1E .quad 0xABBA .quad 0 lo n g lo n g a r r a y [ 5 ] ; lo n g lo n g * a p = a r r a y ; lo n g lo n g s u m = 0 ; wh i l e ( * a p ! = 0 ) { su m + = * a p ; ap + + ; } As s u m e f o rw ar d i n g an d b r an c h p r e d i c t i o n ( al w a y s t ak e n ) Th e r e a r e t w o w a y s y o u c a n r e d u ce t h e n u m b e r o f b u b b l e s . W h a t a r e t h e y ? 1. Do s o m e t h i n g u s e f u l a f t e r t h e mr mo v q th a t d o e s n o t d e p e n d o n rd i 2. Ca n w e t u r n t h i s i n t o a l o o p i n g b r a n c h i n s t e a d o f t w o b r a n c h e s ? Ca n w e p u t t h e c o n d i t i o n a l j u m p a t t h e en d of t h e l oop a n d b r a n c h b a c k ? Ch a n g i n g ou r j u m p CP S C 3 1 3 9 irmovq Data, % rbp # rbp points to data irmovq 8, % rsi # rsi = 8 xorq % rcx , % rcx # rcx = 0 (accumulator) loop: mrmovq 0(% rbp ), % rdi # read from array addq % rsi , % rbp # advance to next item andq % rdi , % rdi # Check for 0 element je Done # exit addq % rdi , % rcx # add element to rcx jmp loop # process next Done: halt Data: .quad 0xDECADE .quad 0xBE11 .quad 0xAB1E .quad 0xABBA .quad 0 lo n g lo n g a r r a y [ 5 ] ; lo n g lo n g * a p = a r r a y ; lo n g lo n g s u m = 0 ; wh i l e ( * a p ! = 0 ) { su m + = * a p ; ap + + ; } As s u m e f o rw ar d i n g an d b r an c h p r e d i c t i o n ( al w a y s t ak e n ) Th e r e a r e t w o w a y s y o u c a n r e d u ce t h e n u m b e r o f b u b b l e s . W h a t a r e t h e y ? 1. Do s o m e t h i n g u s e f u l a f t e r t h e mr mo v q th a t d o e s n o t d e p e n d o n rd i 2. Ca n w e t u r n t h i s i n t o a l o o p i n g b r a n c h i n s t e a d o f t w o b r a n c h e s ? We w a n t t h i s t o b e a J N E Ho w m a n y b u b b l e s a r e l e f t ? CP S C 3 1 3 10 irmovq Data, % rbp # rbp points to data irmovq 8, % rsi # rsi = 8 xorq % rcx , % rcx # rcx = 0 (accumulator) loop: mrmovq 0(% rbp ), % rdi # read from array addq % rsi , % rbp # advance to next item addq % rdi , % rcx # add element to rcx andq % rdi , % rdi # Check for 0 element jne loop # process next Done: halt Data: .quad 0xDECADE .quad 0xBE11 .quad 0xAB1E .quad 0xABBA .quad 0 lo n g lo n g a r r a y [ 5 ] ; lo n g lo n g * a p = a r r a y ; lo n g lo n g s u m = 0 ; wh i l e ( * a p ! = 0 ) { su m + = * a p ; ap + + ; } As s u m e f o rw ar d i n g an d b r an c h p r e d i c t i o n ( al w a y s t ak e n ) Th e r e a r e t w o w a y s y o u c a n r e d u ce t h e n u m b e r o f b u b b l e s . W h a t a r e t h e y ? 1. Do s o m e t h i n g u s e f u l a f t e r t h e mr mo v q th a t d o e s n o t d e p e n d o n rd i 2. Ca n w e t u r n t h i s i n t o a l o o p i n g b r a n c h i n s t e a d o f t w o b r a n c h e s ? 29 i n s t r u c t i o n s i n 35 c y c l e s = > 1. 2 C P I !","libVersion":"0.2.1","langs":""}