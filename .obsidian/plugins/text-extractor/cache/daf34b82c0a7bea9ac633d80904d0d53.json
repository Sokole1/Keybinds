{"path":".obsidian/plugins/text-extractor/cache/daf34b82c0a7bea9ac633d80904d0d53.json","text":"A dapter [https : //refactor ing.gur u/] Topics CP S C 310: Introduction to S oftware E ngineer ing E xaminab le skills • Identify when a clas s has too much conv er s ion code. • Identify how to for m an A dapter inter face and as s ociated implementation. • B e able to route calls to a des ired s er v ice through the adapter y ou hav e created. • R efactor a clas s or clas s hierarchy where conv er s ion has bloated into the A dapter patter n. • E x plain how the A dapter P atter n ens ures pr incipled des ign as mapped to the S OLID pr inciples . A d ap ter S cenar io You are implementing a web application for a mus ic s tore. You hav e two s eparate data s ources for y our records and they s tore records in JS ON or CS V for mat; howev er, y ou want to retur n a s hared for mat, a record. CS V JS O N CP S C 310: Introduction to S oftware E ngineer ing p ub lic g etReco r d s( ) : S et <Record > { const csv: st ring = csvMusicDB.get Record sA sCsv( ) ; const csvRecord s = tr an sl at eCsvReco r d s( csv) ; const json = jsonMusicDB.get Record sA sJson( ) ; const jsonRecord s = tr an sl at eJso n Reco r d s( json) ; // ... } S cenario: First A p p roach CP S C 310: Introduction to S oftware E ngineer ing P roblems (s election): ● Multiple conv er s ions implemented in one clas s (S R P v iolation). ● S olution not open for other for mats /conv er s ions (OCP v iolation). ● E ach additional algor ithm mak es the code in this clas s more comple x (div ergent changes and duplicate code s mells). S cenario: First A p p roach CP S C 310: Introduction to S oftware E ngineer ing Intent: A n \"oﬀ the s helf\" component oﬀ er s compelling functionality that y ou would lik e to reus e, but its \"v iew of the wor ld\" is not compatible with the philos ophy and architecture of the s y s tem cur rently being dev eloped. Conv er t the inter face of a clas s into another inter face that clients e x pect. A dapter lets clas s es wor k together that couldn't other wis e becaus e of incompatible inter faces . W rap an e x is ting clas s with a new inter face. S cenario: A d ap ter Imp lement at ion CP S C 310: Introduction to S oftware E ngineer ing S cenario: A d ap ter Imp lement at ion ● One s peciﬁ c A dapter (*A dapter ) for each A daptee (*DB ). ○ S olv es S R P and OCP v iolations . ● A dapter is able to wor k with both Client and A daptee. CP S C 310: Introduction to S oftware E ngineer ing S cenario: A d ap ter Imp lement at ion p ub lic g etReco r d s( ) : S et <Record > { let record s: S et <Record > = new S et ( ) ; for ( ad ap ter in ad ap ters) { record s.ad d ( ad ap ter.get Record s( ) ) ; } } A dds a trans lation lay er CP S C 310: Introduction to S oftware E ngineer ing S cenario: A d ap ter Imp lement at ion CP S C 310: Introduction to S oftware E ngineer ing W hat we want ed: ● A s s ume we us e the leftmos t B ak er y inter face from a librar y and we hav e no control ov er it (“legacy inter face”). ● B ut in our application, we would s till lik e to s egregate thes e inter faces . ● W e can s olv e this by apply ing the A dapter patter n. W hat we had: A d ap ter & Inter face S egregat ion CP S C 310: Introduction to S oftware E ngineer ing ● A dapter “wraps ” the legacy inter face (s ometimes called wrapper patter n). ● Our codebas e us es our own inter faces (IS P ) e x clus iv ely. ● W e enhance an e x is ting s olution that v iolates IS P by s egregating inter faces . p ub lic cla ss Ba k er yAd a p ter im p lem ents IS P Ba k er y { p r iv a te a d a p tee: Ba k er y; constr uctor (a d a p tee: Ba k er y) { th is.a d a p tee = a d a p tee; } p ub lic sellBrea d (): v oid { th is.a d a p tee.sellBrea d (); } p ub lic sellC a k e(): v oid { th is.a d a p tee.sellC a k e(); } } A d ap ter & Inter face S egregat ion CP S C 310: Introduction to S oftware E ngineer ing 1) Find the pr inciples v iolation: a) OCP v iolation: not open for new conv er s ions . b) S R P v iolation: one clas s embodies multiple conv er s ions . c) P os s ibly : IS P v iolation if A dapter patter n is us ed to s egregate inter faces . d) Mos t obv ious s mells : div ergent changes and duplicate code. 2) Find the abs traction (which clas s or clas s es are added at the top of the hierarchy ): a) The A dapter inter face (in our cas e MusicS toreAd a p ter). 3) Find the poly mor phis m: a) The methods of interes t in the A dapter inter face (in our cas e g etRecord s() ). 4) Figure out when the poly mor phic method(s ) is /are called: a) Whenev er the A dapter ’s methods (in our cas e g etRecord s() ) are us ed to inv ok e the adaptees ’ methods (in our cas e g etRecord sAsC sv() and g etRecord sAsJ son() ). A d ap ter A nalysis DE COR A T OR [https : //refactor ing.gur u/] Topics CP S C 310: Introduction to S oftware E ngineer ing E xaminab le skills Decorator ● B e able to des cr ibe the beneﬁ ts and tradeoﬀ s of the patter n. ● Under s tand the relations hip between the decorator patter n and the compos ite patter n. ● Des cr ibe the s hor tcomings as s ociated with the decorator patter n. ● B e able to conv er t a large des ign into a decorator-bas ed des ign. ● Under s tand how the r untime calling relations hips happen when decorator s are inv ok ed. ● B e able to recogniz e how decorator-bas ed des igns are often ins tantiated in practice. Decorator: Dynamically ad d resp onsib ilit ies to ob ject s. ● E nables features to be added to object ins tances ins tead of _all_ ins tances of a clas s . Decorator s es s entially wrap e x is ting objects while maintaining their ty pe. ● E x cellent proper ties for maintaining ﬂ e x ibility and e x tens ibility. ○ S R P : E x tra features pus hed to decorator s (wrapper s ). ● Te x tbook cas e of compos ition ov er inher itance. While inher itance is s till needed (the decorator mus t e x tend the bas e clas s ), the ﬂ e x ibility comes from the encaps ulated ﬁ eld. Decorator: C anonical d ep ict ion M o c ha W hip Decorator comp osit ion L eaf ( e.g., Decaf extends AbstractBeverage): constructor() {} cost() { return 1.75; } Dec a f M o c ha W hip Decorator comp osit ion L eaf ( e.g., Decaf extends AbstractBeverage): constructor() {} cost() { return 1.75; } Decorator ( e.g., Whip extends BeverageDecorator): constructor(b: AbstractBeverage){ this.beverage = b; } cost() { return this.beverage.cost() + .50; } getDescription() { return ‘whip ’ + this.beverage.getDescription(); } Dec a f java.io ( Task: read an ob ject from a gz ip ) // op en ob jects.g z F ile f = new F ile ( “ ob jects.g z\"); // sta r t rea d ing it one b yte a t a tim e F ileInp utS trea m ﬁs = new F ileInp utS trea m ( f ); // sooo slow , rea d f a ster with a b uf fer Buf f ered Inp utS trea m b is = new Buf fered Inp utS trea m (ﬁs); // uncom p ress th e strea m a s y ou g o Gzip Inp utS trea m g is = new Gzip Inp utS trea m (b is); // conv er t th e strea m into ob jects O b jectInp utS trea m ois = new O b jectInp utS trea m (g is); // now a ctua lly rea d som eth ing S om eO b ject som eO b ject = (S om eO b ject ) ois.rea d O b ject(); java.io ( Task: read an ob ject from a gz ip ) // op en ob jects.g z F ile f = new F ile ( “ ob jects.g z\"); // sta r t rea d ing it one b yte a t a tim e F ileInp utS trea m ﬁs = new F ileInp utS trea m ( f ); // sooo slow , rea d f a ster with a b uf fer Buf f ered Inp utS trea m b is = new Buf fered Inp utS trea m (ﬁs); // uncom p ress th e strea m a s y ou g o Gzip Inp utS trea m g is = new Gzip Inp utS trea m (b is); // conv er t th e strea m into ob jects O b jectInp utS trea m ois = new O b jectInp utS trea m (g is); // now a ctua lly rea d som eth ing S om eO b ject som eO b ject = (S om eO b ject ) ois.rea d O b ject(); new O b jectInp utS trea m ( new Gzip Inp utS trea m ( new Buf fered Inp utS trea m ( new F ileInp utS trea m ( new F ile(“ ob jects.g z) )))); ● How would we ins tead ins tantiate a reader but we wanted to s how a progres s monitor as we read input, and we didn’t hav e a GZ ﬁ le but a z ip ﬁ le? java.io class st ruct ure CP S C 310: Introduction to S oftware E ngineer ing Decorators in t he W ild rest = restify.createServer(httpsOptions); rest.use(restify.plugins.queryParser()); rest.use(restify.plugins.bodyParser({mapParams: true})); rest.use(function crossOrigin(req, res, next) { res.header(\"Access-Control-Allow-Origin\", \"*\"); res.header(\"Access-Control-Allow-Headers\", \"...\"); return next(); }); // prevent caching, overrides cache headers rest.use(function(req, res, next) { res.header(\"Last-Modified\", new Date()); res.header(\"Cache-Control\", \"...\"); return next(); }); CP S C 310: Introduction to S oftware E ngineer ing Decorators in t he W ild // visible to all privileged users server.get(\"/classy/deliverables\", AR.isPrivileged, AR.getDelivs); server.get(\"/classy/students\", AR.isPrivileged, AR.getStudents); server.get(\"/classy/dashboard/:delivId/:repoId\", AR.isPrivileged, AR.getDashboard); server.get(\"/classy/results/:delivId/:repoId\", AR.isPrivileged, AR.getResults); // admin-only functions server.put(\"/classy/classlist\", AR.isAdmin, AR.updateClasslist); server.post(\"/classy/grades/csv/:delivId\", AR.isAdmin, AR.postGrades); server.post(\"/classy/deliverable\", AR.isAdmin, AR.postDeliverable); Decorator A nalysis ● E nable clas s es to focus on their core functionality (s ingle res pons ibility ). ● P rov ide a mechanis m to e x tend e x is ting clas s es without changing them (open/clos e). ● W ell-under s tood technique for us ing compos ition in place of inher itance. ● E s pecially us eful for compos ing/lay er ing additional behav iour s to e x is ting objects . ● S tr ucturally s imilar to compos ite (uniﬁ ed inter face), but focus is on adding behav iour s , not jus t allowing clients to to treat par t/whole objects obliv ious ly. M o c ha W hip Dec a f F acade [https : //refactor ing.gur u/] Topics CP S C 310: Introduction to S oftware E ngineer ing ● Under s tand why the F acade P atter n was applied to the project. ● B e able to des cr ibe the beneﬁ ts and tradeoﬀ s of the patter n. ● K now how to wr ite the code for a F acade-bas ed des ign. ● Under s tand how to create a facade for an under ly ing module and what this enables (and what it does not). ● Des cr ibe how facades us e compos ition to enable their functionality. E xaminab le skills F acad e CP S C 310: Introduction to S oftware E ngineer ing F acad e: C anonical D ep ict ion CP S C 310: Introduction to S oftware E ngineer ing F acad e Design P rocess • Fir s t: Identify the main res pons ibilities of the s ubs y s tem. • F acades often v iolate S R P as they tr y to prov ide a s ubs y s tem’s breadth of behav iour s behind a s ingle F acade object. • S econd: Deter mine if common or s imple actions require comple x collaboration of multiple clas s es within the s ubs y s tem. • Third: Identify abs tractions that would allow the s ubs y s tem to encaps ulate thes e behav iour s more directly. • F our th: E x pos e abs tractions through the F acade to enable s ubs y s tem inter nals to be eas ily ev olv ed. • E nables OCP (often v ia DIP ) to allow s ubs y s tem ev olution. CP S C 310: Introduction to S oftware E ngineer ing F acad e A nalysis • Goal: To prov ide a uniﬁ ed, higher-lev el, inter face to a whole module making it eas ier to us e. • Compos ing clas s es into s ubs y s tems reduces e x ter nal comple x ity. Us ing a F acade minimiz es the dependencies known by client s ubs y s tems . E s pecially helpful when adding lay er s to an e x is ting s y s tem. • F acades generally prov ide a more limited s et of operations than the whole s ubs y s tem would prov ide. This s ubs et is carefully des igned to s uppor t mos t Clients while s till enabling other Clients to connect to inter nal clas s es directly if needed.","libVersion":"0.2.1","langs":""}