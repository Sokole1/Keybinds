{"path":".obsidian/plugins/text-extractor/cache/b523a93aafd69f411da4e20ecfd22150.json","text":"Nick B radley & K athar ine K er r F or per s onal us e only , pleas e do not dis tr ibute on non-UB C domains . S oft w are P rocess CP S C 310 P roces s CP S C 310: Introduction to S oftware E ngineer ing S oft w are is b uilt b y teams of p eop le ● Large s y s tems require large teams . ● Coordinating teams of people can be challenging. ● Teams us e proces s to prov ide clar ity about how decis ions get made and how s oftware will ev olv e. ● P roces s es are es s ential de-r is king mechanis ms to help ev er y one on a team wor k together eﬀ ectiv ely. ● R equirements gather ing and reﬁ nement is a core activ ity for all engineer s to help build cons ens us about is being built. ○ Managing the abs traction gap between high-lev el requirements and low-lev el implementation is a cons tant tens ion. CP S C 310: Introduction to S oftware E ngineer ing S oft w are p roject risks • 6 dimens ions of r is ks : • User: R es is tance to change; conﬂ icts between them; negativ e attitudes towards the project; lack of commitment; lack of cooperation. • Req uirement s: Changing; inadequately identiﬁ ed; unclear ; incor rect. • P roject Comp le xit y: New technology ; high comple x ity ; immature technology ; ﬁ r s t us e of technology. • P lanning & Cont rol: P oor proces s ; inadequate es timation; poor planning; unclear miles tones ; ine x per ienced P M’s ; ineﬀ ectiv e communication. • Team: Lack of e x per ience; lack of training; lack of s pecialis ed s kills ; lack of e x per ience wor king as a team. • O rganisat ional E nvironment : Change of management dur ing the project; uns table organis ation; ongoing res tr uctur ing. When y ou tak e on a project, cons ider thes e r is k s , and whether y ou can mitigate them! CP S C 310: Introduction to S oftware E ngineer ing W hy p rocess? Denv er B aggage (mis )Handling Und erest imat ion of comple x ity. Comp le x architecture. Changes in requirements . Underes timation of sched ule and budget. Dis mis s al of ad vice from e x per ts . F ailure to build in b ackup or recov er y proces s to handle failures . http://calleam.com/W T P F /?page_id= 2086 CP S C 310: Introduction to S oftware E ngineer ing The stor y ...p ar t 1 CP S C 310: Introduction to S oftware E ngineer ing The stor y ...p ar t 2 CP S C 310: Introduction to S oftware E ngineer ing W hat hap p ened ? • Bad p lanning: S oftware des ign began only 17 months before launch. • In Munich, engineer s s pent t w o years test ing a s maller s y s tem. • P hysical p rob lems: Mos t buildings were built before the baggage s y s tem was des igned, meaning the baggage s y s tem had to adapt to an architecture that was n’t a good ﬁ t (s har p tur ns , nar row cor r idor s ). • Change of management : Death of the dr iv ing force of the project (y ou’d think this was aty pical, but gur us often leav e a company mid-way through a project, leav ing the project s omewhat s tranded if planning is n’t good). • A ccep t ing changing req uirement s: A lterations to baggage s iz es , ty pes , paths , etc — and the contractor s aid a ﬁ r m “y es ” to all thes e changes ! • Lack of e xp erience: This was the ﬁ r s t time B A E had built a s y s tem lik e this . B ut for s ome reas on they didn’t choos e to as k for outs ide adv ice from the Munich baggage s y s tem engineer s who could hav e helped mitigate r is k. CP S C 310: Introduction to S oftware E ngineer ing P roject s need good p lans A s oftware proces s is a stru ctu r ed s et of activ ities for dev eloping a s oftware s y s tem. Deﬁ nes who, what, when and how for attaining goals . CP S C 310: Introduction to S oftware E ngineer ing S oft w are p rocess A s oftware proces s is a s tr uctured s et of activ ities to dev elop a s oftware s y s tem. It deﬁ nes who does what, when, and how , to reach a goal. P roces s es hav e des cr iptions that dis cus s : P rod uct s : the outcome of a proces s activ ity. S t ak ehold ers : people who care about the outcome. CP S C 310: Introduction to S oftware E ngineer ing I s p rocess w or t h it ? “W hen a project has paid too little early attention to the processes it will use, by the end of a project developers feel they are spending all of their time in meetings and correcting defects and little or no time extending the software.” “During the first few weeks of the project, the process-oriented team will seem less productive than the process-phobic team… B y the end of the project, the process-oriented team will be operating at a high-speed hum, with little thrashing, and performing its processes with little conscious effort.” [http://www .stevemcconnell.com/articles/art09.htm] CP S C 310: Introduction to S oftware E ngineer ing P rocess p hases • Many diﬀ erent s oftware proces s es . • E ach with their own s trengths and weaknes s es . • A ll include: • R equirements elicitation / gather ing. • A rchitectural des ign. • Detailed des ign / s peciﬁ cation. • Implementation. • Integration. • Tes ting. • Deploy ment. • Maintenance. The goal for each of thes e activ ities is to: ● Mar k out a clear s et of s teps ● P roduce tangible item(s ) ● A llow for rev iew of wor k ● S pecify actions to per for m ne x t CP S C 310: Introduction to S oftware E ngineer ing E ﬃ ciency p rogress aﬀected p rocess F ailu re Sh ipping Coding Compiling P lanning T e sting CP S C 310: Introduction to S oftware E ngineer ing W ater fall F ailu re Sh ipping Coding Compiling P lanning T e sting CP S C 310: Introduction to S oftware E ngineer ing W ater fall F ailu re Sh ipping Coding Compiling P lanning T e sting W ater fall scenario ( not unusual t imeline) Req u i r em en ts : 18 months . S oliciting cus tomer feedback, creating high ﬁ delity mockups , v alidating requirements . Desi g n : 12 months . Der iv ing high-lev el architectural des cr iption and all des ign info and documentation. I m p lem en tati o n : 18 months . Cons tr ucting s y s tem components matching des ign that per for ms as in the requirements . V eri ﬁ cati o n : 12 months . E ns ure ov erall s y s tem per for ms as s peciﬁ ed in the requirements . R eﬁ ne implementation as needed. Mai n t en an ce : 15+ y ear s after v 1. K eeping the s y s tem going amid OS / s ecur ity / dev ice changes . CP S C 310: Introduction to S oftware E ngineer ing Daw n of E xt reme P rogramming F ailu re (u se d in le ss c ritic al applic ations) Sh ipping Coding Compiling P lanning T e sting CP S C 310: Introduction to S oftware E ngineer ing Daw n of E xt reme P rogramming F ailu re (u se d in le ss c ritic al applic ations) Sh ipping Coding Compiling P lanning T e sting CO M M UNICA T IO N SIM P LICIT Y F E E D BA CK CO UR A G E Cour age: W e will tell the tr uth about progr es s and es timates . W e don't document e x cus es for failur e becaus e we plan to s ucceed. W e don't fear any thing becaus e no one ev er wor k s alone. W e will adapt to changes when ev er [s ic] they happen. CP S C 310: Introduction to S oftware E ngineer ing E volut ion into A gile d evelop ment F ailu re (in non-c ritic al syste ms) Sh ipping Coding Compiling P lanning T e sting CP S C 310: Introduction to S oftware E ngineer ing E volut ion into A gile d evelop ment F ailu re (in non-c ritic al syste ms) Sh ipping Coding Compiling P lanning T e sting I nd ivid uals and interact ions ov er proces s es and tools . W orking soft w are ov er comprehens iv e documentation. Customer collab orat ion ov er contract negotiation. Resp ond ing to change ov er following a plan. New approaches : ● Us er S tor ies (lightweight s pecs ) ● Tes t Dr iv en Dev CP S C 310: Introduction to S oftware E ngineer ing A gile soft w are p rocess: A d eep er look Tes t dr iv en des ign (wr ite tes ts ﬁ r s t). E mergent d esign: S tar t at the Minimum V iab le P rod uct, then grow from there, identify ing duplication and introducing abs tractions as needed s o s olv e duplication. Refactor cod e: rather than doing big des ign ﬁ r s t (mak e pragmatic choices along the way -- this is not a licens e to wr ite ter r ible code) A ND the architectural s pik e mus t come ﬁ r s t. CP S C 310: Introduction to S oftware E ngineer ing S p ik es XP introduced the concept of S pik es: s hor t, intens e, activ ities preceding dev elopment iterations (or s ometimes ﬁ t in between, but not ty pically ). Us ed to prov ide ins ight for decis ion making. A rchitect ural S p ik e: when product is being dev is ed, decide on high- and medium-lev el architectures . E .g. What tech s tack? What are the collaborator s and s ubcomponents of major components (client, s er v er )? User I nter face S p ik e: B efore any UI dev elopment, decide on look and feel, UI framewor k, plan for UI e x pans ion. Thes e can inv olv e initial lightweight prototy ping and s et the s tage for des ign from a us er per s pectiv e. [https : //w w w .s caledagileframewor k.com/s pik es /] S cr um CP S C 310: Introduction to S oftware E ngineer ing S cru m t imeline Note that y ou ar e alway s iterating from wor k ing product to wor k ing product, ev en if only s ome of the featur es ar e pr es ent. S P RI NT S crum scenario P lan Code & Tes t Ceremonies 3 weeks CP S C 310: Introduction to S oftware E ngineer ing S crum roles P rod uct O w ner S crum L ead Team Deﬁ nes features of the product. P r ior itiz es features according to mar k et v alue. A djus t features and pr ior ities ev er y iteration, as needed. F acilitates S cr um proces s . Helps res olv e problems . S hields team from e x ter nal inter ferences . NO T the manager. S elf-organiz ing, s elf-managing, cros s -functional. Dev eloper s , des igner s , manager s , clients , etc… 7 (+/- 2) people. CP S C 310: Introduction to S oftware E ngineer ing S crum ceremony: S p rint p lanning What us er s tor ies will be included in the s pr int? What’s the comple x ity of each s tor y ? [https : //lets s cr umit.com/s cr um-ev ents -2-s pr int-planning] CP S C 310: Introduction to S oftware E ngineer ing P rod uct b acklog S p rint b acklog Burnd ow n char t P r ior itiz ed lis t of backlog items (P B Is ). P B Is s pecify a cus tomer- centr ic feature (Us er S tor y for m). E ﬀ or t es timated by Team, pr ior ity es timated by P roduct Owner. Contains lis t of us er s tor ies that are negotiated by team and product owner from the P roduct B acklog. Negotiated P B Is brok en down into s peciﬁ c tas ks . Total remaining team tas k hour s within one s pr int. S crum ar t ifact s CP S C 310: Introduction to S oftware E ngineer ing S crum ceremony: Daily st and up • ~15 minutes where ev er y one talks about: • What did y ou do y es terday ? • What will y ou do today ? • What are y ou block ed on? • Team member s mak e commitments to each other. • Not a problem s olv ing s es s ion. • Not des igned to blame who is behind s chedule. • E ﬀ ectiv e way for a S cr um Mas ter to track team progres s . • Tas k es timates may need to be adjus ted. You s hould plan to do thes e either daily , or ev er y couple of day s . CP S C 310: Introduction to S oftware E ngineer ing S crum ceremony: Review + ret rosp ect ive • Team pres ents what it accomplis hed dur ing the s pr int. • Ty pically tak es the for m of a demo of new features or under ly ing architecture. • Infor mal; nor mally 2-hour prep time r ule. • A s in the Daily S cr um S tandup, ev er y one is inv ited. • R ev iew and retros pectiv e can be one or s eparate meetings . [https : //illus tratedagile.com/2015/01/16/3-things -to-obs er v e-in-a-s pr int-rev iew/] CP S C 310: Introduction to S oftware E ngineer ing Q uick reﬂect ion on S crum • S pr int P lanning: W or k items are pulled from the product backlog. • S cr um teams wor k in s er ies of s pr ints → no new requirements dur ing s pr int. • Dev team commits to implementing the wor k items in one s pr int. • S pr int B acklog: wor k items for s pr int implemented by dev eloper s . • Teams us ually us e a s cr um/agile board to track progres s . • R es ult s hipped to cus tomer at end of the s pr int. • Unres olv ed wor k items are mov ed back to the product backlog. • 15min daily s tandup meeting. • R ev iew / retros pectiv e meeting at end of s pr int. CP S C 310: Introduction to S oftware E ngineer ing F rom S crum to K anb an • K anb an : other common agile proces s methodology • “ You talk about wor k; we DO wor k”. • No s pr ints but a cont inuous p rocess without a s pr int backlog. • P ull s y s tem implemented diﬀ erently : each column on the board has a w ork-in-p rogress limit related to the team’s capacity : • “K eep WIP under control” • S pace freed on the board only when items mov e between columns . • No s peciﬁ c releas e dates → up to the team to decide when to releas e. • No s pr int planning, or s pr int rev iews : • K eeps daily s tandup. • Often us ed for more rapid releas es than s cr um. • L es s r igid ceremonies . CP S C 310: Introduction to S oftware E ngineer ing A gile b oard ( K anb an) [https : //w w w .z oho.com/s pr ints /what-is -a-s cr um-board.html] W I P Limit P roduct B acklog pull","libVersion":"0.2.1","langs":""}