{"path":".obsidian/plugins/text-extractor/cache/6a19c15227e8233642cf3950ef56ba59.json","text":"R E S T A P Is CP S C 310: Introduction to S oftware E ngineer ing E xaminab le S kills - S pot non-R E S Tful qualities in a s er v ice: endpoints and s emantics (us ing client s ide conte x t to compute a “ne x t” link, for ins tance). - S tr ucture a R E S Tful s er v ice giv en a des cr iption of the s er v ice - P rov ide appropr iate res pons es for each of the UR Is in a R E S Tful s er v ice. - Giv en a client-s ide us er s tor y , des cr ibe what the client s ide ps eudo code would look lik e (what reques t it would s end, would it be in a loop or an indiv idual reques t, etc.). - R elate R E S Tful qualities to the other des ign pr inciples : the concept of localis ation of reas oning and change. - Dis cus s how R E S Tful s er v ices can us e v er s ioning to ev olv e their A P Is . RE S T CP S C 310: Introduction to S oftware E ngineer ing AP I Revisit ing A P Is CLIE NT S E R V ICE CP S C 310: Introduction to S oftware E ngineer ing R E S T is an architectur e s ty le - it is a s et of guidelines or pr inciples for a W eb A P I W hat is a RE S T A P I? CP S C 310: Introduction to S oftware E ngineer ing RE p resent at ional S t ate T ransfer API A P Is R E S T A P Is W eb A P Is W hat is a RE S T A P I?S imp list ic t imeline of W eb A P Is… 226 1991 W or ld W ide W eb is created 2000 R oy Fielding + Dick Tay lor des ign R E S T (HTTP ) SO AP (XML R P C) 1998 F acebook announces GraphQL 2015 SO AP (XML R P C) 1998 2000 R oy Fielding des igns R E S T (HTTP ) 227 1991 W or ld W ide W eb is created F acebook announces GraphQL 2015 S imp list ic t imeline of W eb A P Is… CP S C 310: Introduction to S oftware E ngineer ing RE S Tful Design P rincip les W e were taking a jour ney through Object Or iented des ign, but we’re going to br ieﬂ y z oom out to inter-component des ign! Under pinning P r inciples : 1. L ocalis ation of reas oning. 2. R eduction in the propagation of change. CP S C 310: Introduction to S oftware E ngineer ing W hy has RE S T b ecome so p er vasive? In No S ilv er B ullet, F red B rooks s tates that: “The bes t way to addres s the comple x ity of s oftware is to not build it at all.” S ev eral long-s ought No S ilv er B ullet s olutions fav our reus e : ● A s a means to reduce comple x ity. ● A s a means to improv e productiv ity. ● A s a means to increas e reliability. ● A s a means to encourage / enable reus e. CP S C 310: Introduction to S oftware E ngineer ing ● New features are added by “dropping in” components : ○ A ccounts for 53% of reus e at NA S A . [S elby 2005] ● Domain-s peciﬁ c component mar k ets : ○ P opulated by carefully created reus able components . ○ This is harder than it s ounds . ● Three main impediments : ○ High up-front cos t. [Gaﬀ ney 1992, ICS E ] ○ A rchitectural mis match. [Gar lan et. al. 1995, IE E E S oftware] ○ Librar y s caling problem. [B igger s taﬀ 1994, ICS R ] Reuse in p ract ice CP S C 310: Introduction to S oftware E ngineer ing http://im a g es .g o o g le .c o m /im g r es ?im g ur l= http://m ed ia .ha m pto nro a d s .c o m /c a c he/files /im a g es /86661.jpg &im g r efur l= http://ha m pto nro a d s .c o m /2008/04/lo c a l-a utis m -g ro up-a s s em bles -hug e-puz z le-r a is e-awa r enes s &us g = _ _ A Z W P v 96v TXJtXO XFYpEtwN 9tr M 0= &h= 378&w= 600&s z = 168&hl= en&s ta r t= 1&s ig 2= 3K 9EUHjtkA qLtpl587ufYA &um = 1&tbnid = m OR2Fu0o v Yq_ UM :&tbnh= 85&tbnw= 135&ei= hZ -lSZ 6JC5K C7QON 9YXwB Q&pr e v = /im a g es % 3Fq% 3Dhug e% 2B puz z le% 26um % 3D1% 26hl% 3Den% 26c lient% 3 Ds a fa r i% 26r ls % 3Den-us % 26s a % 3DG Lib rar y S caling • Two e x tremes : • Large, feature-laden, components . • S mall, s imple, components . • Large components are hard to adapt. • S mall components hav e comple x cos t/beneﬁ t implications . CP S C 310: Introduction to S oftware E ngineer ing Client (Client) S er v ice (S er v er ) HT TP E .g. B rows er re q u e s t re s p o n s e API W hat is a RE S T A P I? CP S C 310: Introduction to S oftware E ngineer ing L et ’s L ook at an E xamp le: C anaFind ● F in d ers: A s s omeone who found s omething in a public place, I would lik e to be able to upload a photo of that thing, s o their owner can lear n that it has been found. ● S ear ch er: A s s omeone who los t s omething in a public s pace, I would lik e to be able to look at a location on a map and s ee whether any thing was found there, s o I can s ee if s omeone has found what I hav e los t. (Yes , this as s umes no one will mov e any thing.) (It’s not a per fect s y s tem.) CP S C 310: Introduction to S oftware E ngineer ing W hat is This A ll A b out ? Databas eComponent g etResult(a rg s): Result[] S earchComponent CP S C 310: Introduction to S oftware E ngineer ing R emote S er v er RP C Databas eComponent reques t res pons e Mobile P hone S earchComponent CP S C 310: Introduction to S oftware E ngineer ing A n “ RP C” A p p roach • This is the approach us ed in the S imple Object A cces s P rotocol (S O A P ) ...which we will not cov er. • This approach inv olv es Remote P roced ure C alls ( RP C), and a lot of integration between client and s er v er. • Note that the calls are s pecialis ed ‘ verb s’ (sub m itI tem (. . . ), ﬁnd I tem (. . . )). • Pro : S imple to program, behav es lik e local calls . • Con : The protocol mus t be pre-deﬁ ned. The client and the s er v er mus t agree on methods /data ty pes . • R P C is cov ered in much more detail in CP S C 416. Delocaliz ation of changes !!!! (S er v er changes propagate to client!) CP S C 310: Introduction to S oftware E ngineer ing • RE pres entational • S tate • T rans fer [http://en.wikipedia.org/wiki/R epres entational_s tate_trans fer] A not her W ay: RE S T CP S C 310: Introduction to S oftware E ngineer ing RE S Tful Inter faces “… the web is an e x is tence proof of a mas s iv ely s calable d ist rib uted system that wor ks really well, and we can tak e ideas from that to b uild integrated systems more eas ily.” – Mar tin F owler \"R epres entational S tate Trans fer is intended to ev ok e an image of how a w ell-d esigned W eb application behav es : a networ k of web pages (a v ir tual s tate-machine), where the us er progres s es through an application by s electing links (st ate t ransit ions), res ulting in the ne x t page (repres enting t he ne xt st ate of the application) being trans fer red to the us er and rendered for their us e.\" - R oy Fielding [http: //roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven] R oy Fielding inter v iew: [https ://w w w .y outube.com/watch?v =w5j2K wz z B -0 ] CP S C 310: Introduction to S oftware E ngineer ing RE S T: Basics CP S C 310: Introduction to S oftware E ngineer ing If Y our Client is a Brow ser w w w .github.com <html>....</html> CP S C 310: Introduction to S oftware E ngineer ing If Y our Client is an A p p licat ion GE T: w w w .api.github.com/is s ues /1 JS ON (could be XML, image, ... ) W ith URI ( u n iversal r eso u r ce id en tiﬁ er) CP S C 310: Introduction to S oftware E ngineer ing S tatus code HTTP UR L Header s B ody Header s B ody reques t res pons e CP S C 310: Introduction to S oftware E ngineer ing RE S T: Nouns & V erb s V erb s The actions that can be tak e on the s y s tem’ s r es ources (nouns ). V er bs are HTTP methods : ○ GE T (retr iev e) ○ P OS T (create) ○ P UT (update) ○ DE LE TE (remov e) GE T : w w w .api.github.com/ is s ues / 1 No u n s The r es ources (or objects ) of our s y s tem, contained in the UR I (or UR L): ○ P rov ide abs traction of res ources and data. ○ S hows the relations hip between diﬀ erent nouns A R E S Tful reques t cons is ts of two things : (1) HTTP Method (V er b), (2) UR I (contains the Noun(s )) CP S C 310: Introduction to S oftware E ngineer ing ● Nouns are in the R eques t UR I (or UR L) ● Nouns are the application’s res ources (or objects within the s y s tem) ● In UR Is : ○ Nouns are alway s plural (e.g. is s ues , not is s ue) ○ The order of nouns des cr ibes the relations hip between diﬀ erent res ources ● E x ample: Twitter ’s res ources include tweets , us er s , follower s ○ http://twitter.com/ us er s /{id}/tweets /{id}/ ○ http://twitter.com/ has htags /{id}/tweets Nouns: Resources CP S C 310: Introduction to S oftware E ngineer ing Good: ● http://api.github.com/ orgs /{id} ← orgs is plural ● http://api.github.com/ repos /{id}/is s ues ← the repo has is s ues B ad: ● http://api.github.com/ org /{id} ← org is s ingular ● http://api.github.com/ getOrg /{id} ← getOrg contains a v er b ● http://api.github.com/ is s ues /{id}/repos ← the is s ues does n’t hav e a repo Nouns: Resources CP S C 310: Introduction to S oftware E ngineer ing • E v er y res ource mus t s uppor t (to s ome elegant e x tent) all four v er bs . • E x amples : • A twitter client can get tweets , put/pos t tweets , delete tweets , etc. • A n email client can get mes s ages , get lis ts of us er s , pos t mes s ages , delete mes s ages , etc. V erb s: G E T/P UT/P O S T/DE LE TE P atch is lik e updating a s ingle ﬁ eld within a r ecord. P ut-par t-of ( we don’ t talk about that! ) my Lis t.add(5) my Lis t.add(5) my Lis t.add(5) Get my Lis t >>> ids : 0,1,2 CP S C 310: Introduction to S oftware E ngineer ing Id emp otency W ill per for ming a V E R B multiple times hav e the s ame res ult for s er v er res ources as per for ming it once? ● Impor tant in dis tr ibuted s y s tems . ● POS T : Is not idempotent; alway s mak es new res ources . ● O th er V erb s: Idempotent. R es ources are cons is tent. CP S C 310: Introduction to S oftware E ngineer ing RE S T Design Const raint s ● A pply pr incipled des ign proces s to commonly occur r ing challenges facing online applications . ● Needed to s uppor t networ k ed s ets of loos ely coupled s er v ices . ● This led to s ev eral cons traints , addres s ing prov ided proper ties : ○ Cons traint: R eplication needed to s uppor t caching. ○ Cons traint: Unifor m inter face allowed s imple mechanis ms . ○ Cons traint: S tateles s nes s required for reliability. ○ Cons traint: Connectednes s s uppor ts dis cov erability. CP S C 310: Introduction to S oftware E ngineer ing • Reso u r ce-o rien tatio n : Or ienting des igns around res ources emphas is a s eparation of concer ns between a res ource and the actions a s y s tem might per for m on the action. This commonly dr iv es infor mation hiding decis ions in R E S T s y s tems . • Un ifo rm in t er face: Hav ing a cons is tent, predictable, and s imple mechanis m for mar s halling reques ts and res pons es allows for clients and s er v er s to independently ev olv e (for ins tance us ing diﬀ erent programming langs ). RE S T Design P rincip les CP S C 310: Introduction to S oftware E ngineer ing ● S tat elessn ess : A ll client reques ts need to contain all of the infor mation needed to proces s a res pons e. This is a fundamental decis ion that allows s er v er res ources to s cale. ● S elf-d escrip tive m essag es: Mes s ages , es pecially res pons es , s hould contain infor mation to help clients reas on about how to proces s a res pons e. This is mos t commonly us ed to enable follow-up actions for a res ource. This often enables connectednes s , where clients do not need to gues s about an A P I. RE S T Design P rincip les CP S C 310: Introduction to S oftware E ngineer ing POST /repos/{ owner} /{ repo} /issues/{ issue_number} /comments CP S C 310: Introduction to S oftware E ngineer ing /repos/{ owner} /{ repo} /issues/{ issue_number} /comments POST CP S C 310: Introduction to S oftware E ngineer ing /repos/{ owner} /{ repo} /issues/{ issue_number} /comments POST CP S C 310: Introduction to S oftware E ngineer ing DE L /repos/{ owner} /{ repo} /issues/{ issue_number} /comments /repos/{ owner} /{ repo} /pulls/{ number} /reviews/{ review_id} CP S C 310: Introduction to S oftware E ngineer ing Design Fle xib ilit y ● UR Is deﬁ ne res ources , but there are many way s to pas s additional data to the s er v er : ○ P UT: /segments/{ id} /starred ■ What us er is apply ing the s tar ? ○ DE L: /repos/../{ repo} /pulls/../{ review_id} ■ Is the us er per for ming the action per mitted to delete this ? ○ P otential options : ■ Header s , e x plicit parameter s , reques t bodies . CP S C 310: Introduction to S oftware E ngineer ing Develop er Document at ion CP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ing RE S Tful C anaFind G E T { image} G E T { latlon,latlon} G E T { latlon, radius} CP S C 310: Introduction to S oftware E ngineer ing E nab ling A P I E volut ionar y Rob ust ness ● Imagine the following res pons e object: ○ {name: ‘cps c autobot’} ● B ut in the future y ou could imagine that y ou need to diﬀ erentiate ﬁ r s t and las t names ; one pos s ible s chema: ○ {ﬁ r s t: ‘cps c’, las t: ‘autobot’, name: ‘cps c autobot’} ● R E S T res ources as much as pos s ible s tr iv e for backwards compatibility s ince frontend and back ends are loos ely coupled and may not be s imultaneous ly updated. CP S C 310: Introduction to S oftware E ngineer ing V ersioning • A P Is are both as s ets and liabilities . • Why would we want to v er s ion A P Is ? CP S C 310: Introduction to S oftware E ngineer ing V ersioning ○ P ath: GET /2017-01-01/customers/{id}/history ■ (E ncode date of A P I v er s ion) ○ P ath: GET /2/customers/{id}/history ■ (E ncode v er s ion in reques t) ○ P ath: GET /v2/customers/{id}/history ■ (E ncode v er s ion in reques t) ○ Quer y : GET /customers/{id}/history/?v=2 ■ (E ncode v er s ion in param) ○ S pecify the v er s ion in the header : APIVersion: 2 CP S C 310: Introduction to S oftware E ngineer ing RE S Tful Tak eaw ays • R es ources are nouns , not v er bs . • A ll res ources mus t elegantly handle: • G E T/P UT/P O S T/DE L • Mak e s ure G E T/P UT/DE L are id emp otent . • A ll behav ioural st ate must remain client -sid e. • Clients s hould not hav e to remember the inter nal s er v er s tr ucture — send b ack links in y our res pons es to help clients d iscover the other res ource location.","libVersion":"0.2.1","langs":""}