{"path":".obsidian/plugins/text-extractor/cache/6d582dcdf11ee4315aac6f2cfbee7974.json","text":"4 Recursive Permutation Generation In this problem you’ll show that the recursive permutation generation algorithm from the first tutorial does generate all permutations of the numbers in an array. Here is the algorithm again. 1: function GENERATE-ALL-PERMUTATIONS(p(1..n], i) 2 > p[1..n] contains n distinct integers, 1 <i<n 3: if i = 1 then 1 return p[l..n] 5: else 6: for j from i downto 1 do 7 swap(p[i],p[]) 8: GENERATE-ALL-PERMUTATIONS (p[L..n], i — 1) 9% swap(p[i],p[5]) For a set S of i distinct numbers and a sequence s of additional distinct numbers, let permut(S, s) be the set of all i! permutations obtained by permuting the numbers in S, and then appending the sequence of numbers s. For example, if n =4, S = {1,3} and s = 4,2 then permut(S,s) = {(1,3,4,2), (3,1,4,2)}. When the sequence s is empty we denote it by € and we’ll shorten the notation by writing permut({ay, az, ..., a;}) to mean permut({ay,as,...,a;},€). 1. (2 points) Give a short explanation as to why, for any i in the range 2 < i < n, permut({a1, az, ..., ai}, ais1,ait2, ..., an) is the same as the set Urgj<ipermut({a1, az, ..., @j-1,a41, ..., @i}, @j, Qit1, . . -, n)- 2. (5 points) Use induction on i to prove the following claim: Claim: Let a1,az,...,an be the sequence of distinct numbers in array p[1..n]. Then for any i,1 < i < n, GENERATE-ALL-PERMUTATIONS(p[1..n], i) returns exactly the i! permutations in the set permut({ay, ag, ..., @i}, Giy1, Qiya, - - Qn)-","libVersion":"0.2.1","langs":"eng"}