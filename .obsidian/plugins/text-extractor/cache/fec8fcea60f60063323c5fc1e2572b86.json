{"path":".obsidian/plugins/text-extractor/cache/fec8fcea60f60063323c5fc1e2572b86.json","text":"CPSC 320: NP-Completeness, or The Futility of Laying Pipe Solutions∗ 1 Steiner. . . Something-or-Others UBC recently replaced its aging steam heating system with a new hot water system. A set of locations needs water delivered and there’s another set of intermediate points through which we can deliver water. Some of these points can be connected—at varying costs—by laying new pipe, others cannot. You’d like to ﬁgure out the cheapest way to connect every delivery location to water. We can model the problem as a graph, by representing locations and intermediate points as nodes. Possible connections are represented as weighted edges, where the weight of an edge is the cost of laying pipe between its two endpoints. For simplicity, moving forward, we’ll assume that all costs are 1. 1. Build intuition through examples. Here’s an instance, where shaded nodes are in S. Indicate a solution to this problem, that is, a way to connect up all of the shaded nodes. Draw your own small examples. What are trivial instances? SOLUTION: We could use the edges (0, 3), (3, 4), (4, 7), (4, 6) to connect up the shaded nodes. Note that the shaded nodes, plus the chosen edges, form a tree. However, this tree does not span all nodes in the graph, so it is not a spanning tree. Some trivial examples include: • The empty graph, whose solution is the empty set of edges. • A graph with at most one shaded node, in which case the solution is also the empty set of edges. • Less trivially, any graph where all vertices are shaded, in which case the solution is any spanning tree (which we can ﬁnd eﬃciently with DFS or BFS). We should probably assume that the graph is connected, since a disconnected graph where two or more connected components contain a shaded vertex has no solution. And here are two small examples that don’t ﬁt in our trivial categories above yet remain simple. The ﬁrst shows that we may end up with a spanning tree, while the second shows that we need to be ready not to (since its solution is the one edge connecting nodes 0 and 2). ∗Copyright Notice: UBC retains the rights to this document. You may not distribute this document without permission. 1 2. Formalize the problem as an optimization problem, where the goal is to minimize or maximize some- thing. Also, formalize the problem as a decision problem, where the answer is Yes or No. We’ll call the decision problem the Steiner Tree (ST) problem. What is an instance of ST? A potential solution? A good solution? SOLUTION: An instance of the optimization problem is an undirected graph G = (V, E) and a subset S ⊆ V (the shaded nodes) to which we must deliver water. As usual we’ll assume that V = {1, 2, . . . , n} and |E| = m. A (potential) solution to the instance is a subset E′ ⊆ E of the edges A solution E′ is optimal if the edges of E′ connect all vertices in S, perhaps via intermediate vertices in V , and in addition the size of E′ is less than or equal to the size of any other solution for the instance. To make this a decision problem, the problem instance also includes a positive integer bound k, and we want to know whether or not there is a solution of size at most k. So in summary, an instance of the ST problem consists of G = (V, E), S ⊆ V , and k, where 1 ≤ k ≤ n. A solution E′ is good if the edges of E′ connect all vertices in S, perhaps via intermediate vertices in V , and in addition |E′| ≤ k. 3. Think about similar problems by considering what an optimal solution to ST looks like. Is it a path? A cycle? A tree? A graph? Can we reduce ST to a similar problem we’ve seen before? SOLUTION: It’s a tree. It is also, of course, a graph, since trees are graphs. It can be a path but need not necessarily be one, and it cannot be a cycle. That is, an optimal solution cannot be a cycle. There are problems that we’ve solved that are similar in various ways, mostly in the sense that they work with graphs (e.g., shortest path, or vertex cover, which is concerned with selecting particular nodes to cover the edges). However, the problem with what seems the greatest similarity is the minimum spanning tree problem. We can solve that in polynomial time (quite eﬃciently). Any spanning tree of the graph will connect all nodes in the graph and therefore is a solution to the ST instance, but it may not be a good solution. We could \"trim oﬀ unshaded leaf nodes\" repeatedly until there are none left, but there’s still no guarantee that we’ll get a good solution. So there’s no obvious way to reduce ST to MST. 4. Prove that the ST (Steiner Tree) problem is in NP. Remember: it’s in NP if it’s \"eﬃciently certiﬁable\". The \"certiﬁcate\" is usually what we’d think of as a solution. SOLUTION: The ST problem is in NP if there is an eﬃcient algorithm—called the certiﬁcation algorithm—that takes as input an instance I = ((V, E), S, k) of ST and a potential solution E′, and correctly determines if E′ is a good solution. The certiﬁcation algorithm should run in polynomial time. In polynomial time, we can check that (1) the set of edges in E′ has size at most k and (2) the edges connect all the shaded vertices. One way to handle (2) would be to DFS the subgraph of G formed by deleting all edges but the ones in the certiﬁcate, starting from any shaded node. During the DFS, we \"check oﬀ\" each shaded node as we reach it, including the starting point. If |E′| ≤ k and upon completion of the DFS, all shaded notes are checked oﬀ, then E′ is a good solution and the output is Yes. Otherwise the output is No. 2","libVersion":"0.2.1","langs":""}