{"path":".obsidian/plugins/text-extractor/cache/73595e6c4cb3f2f40766a9a39561b2bb.json","text":"R efactor ing CP S C 310: Introduction to S oftware E ngineer ing E xaminab le skills ● E x plain what technical debt and code s mells are. ○ B e able to des cr ibe how thes e challenges emerge as code ev olv es . ● E x plain the concept of refactor ing. ● E x plain when to refactor and when not to refactor. ● Identify code s mells and be able to identify and car r y out appropr iate refactor ings : ○ F eature env y /Law of Demeter v iolation → mov e method and where to put the new method. ○ Magic number s → Cons tants or v ar iables . ○ Comments → e x tract methods and pipe through parameter s . ○ S ame method in multiple s ubclas s es → pull up method. ○ A lmos t duplicate code → refactor to template. ○ S witch on ty pe → refactor to us e poly mor phis m. ○ Div ergent changes → e x tract clas s . ○ S hotgun s urger y → introduce clas s (s es ) and mov e methods . ○ L ong Methods → introduce s ub-methods . ○ L ong P arameter Lis t → introduce clas s for parameter s . ● E x plain that the under pinning pr inciple of des ign is that changes s hould be as localis ed as pos s ible. ● A chiev e well named methods , identify method aes thetics , and when they are v iolated. ● B e able to decreas e feature env y by mov ing a method and know where to put the new method(s ). ● B e able to identify and ﬁ x of v iolations of the Law of Demeter. Refacto ri n g Y ou s hould be able to… CP S C 310: Introduction to S oftware E ngineer ing A gile soft w are p rocess: A d eep er look Tes t dr iv en des ign (wr ite tes ts ﬁ r s t). E mergent d esign: S tar t at the Minimum V iab le P rod uct , then grow from there, identify ing duplication and introducing abs tractions as needed s o s olv e duplication. Refactor cod e : rather than doing big des ign ﬁ r s t (mak e pragmatic choices along the way -- this is not a licens e to wr ite ter r ible code) A ND the architectural s pik e mus t come ﬁ r s t. CP S C 310: Introduction to S oftware E ngineer ing Y ou want to mak e a change but…. Tes ts agains t s pec T echnical debt!!! Technical d eb t CP S C 310: Introduction to S oftware E ngineer ing “ Listening” to cod e CP S C 310: Introduction to S oftware E ngineer ing Cod e smell “ Listening” to cod e CP S C 310: Introduction to S oftware E ngineer ing Design p rincip le violates Cod e smell “ Listening” to cod e CP S C 310: Introduction to S oftware E ngineer ing Design p at tern Design p rincip le motivates violates Cod e smell “ Listening” to cod e RE F A C T O RING !!! CP S C 310: Introduction to S oftware E ngineer ing Design p at tern Design p rincip le mot ivates violates e x emp liﬁes Cod e smell “ Listening” to cod e CP S C 310: Introduction to S oftware E ngineer ing Refactoring t imeline ● NO T: ○ 2 weeks of ev er y 6 months . ○ When the tes ts are failing. ○ When y ou s hould jus t rewr ite the code. ○ When y ou ﬁ x a bug. ● Ins tead, oppor tunis tically dur ing dev elopment: ○ If y ou recogniz e a war ning s ign (s mell). ○ B efore y ou s tar t a new function. ○ A fter y ou ﬁ nis h a new function. ○ When y ou rev iew code/y our code is rev iewed. CP S C 310: Introduction to S oftware E ngineer ing W hat is refactoring? P red ict ab le and meaning* p reser ving cod e t ransformat ions. *meaning == s emantics == behav iour CP S C 310: Introduction to S oftware E ngineer ing Craft smanship manifesto Not only w orking s oftware, but als o w ell-crafted s oftware; Not only resp ond ing to change, but als o s teadily ad d ing value . CP S C 310: Introduction to S oftware E ngineer ing Brok en cod e Code mus t be able to do three things ; if any of thes e are mis s ing, it can be cons idered brok en: 1. Its job (e x ecute according to its pur pos e). 2. A ﬀ ord change. 3. B e under s tandable. // ex 1: q= ((p <1) ? (p ? 0:1) : (p = = -4) ? 2 : (p +1)); // ex 2: wh ile (* a ++ = * b --); // ex 3: wh ile (n— ) { f or (s= t,d = e; * s; s++) { f or (p = v+3; * p ; p ++) { // … a nd m ore } } CP S C 310: Introduction to S oftware E ngineer ing Miniﬁ ed Code https : //w w w .cloudﬂ are.com/lear ning/per for mance/why -minify -jav as cr ipt-code/#: ~: te x t=This %20includes %20the%20remov al%20of,res ults %20in%20compact%20ﬁ le%20s iz e.& te x t=Miniﬁ cation%20s peeds %20up%20webpage%20loading,v is itor s %20and%20s earch%20engines %20happy. CP S C 310: Introduction to S oftware E ngineer ing Technical d eb t Des ign choices that were made in the interes t of t ime or b ud get , rather than technical reasons . Thes e accr ue ov er time and often require broad s y s tem rest ruct uring to decreas e debt introduced by pas t poor decis ions . T echnical d eb t needs to be allocated on a diﬀ er ent “budget” or put into an engineer ing tas k and dis cus s ed with the cus tomer s o that they can decide about its v alue. A dditionally - s ome technical debt r elated us er s tor ies can e x is t, in which cas e y ou might s ee the “us er ” as a s ubs y s tem. “ A s the pay ment s y s tem, I need r efactor ing of the under ly ing code to facilitate the x change to the cos ting algor ithm” . This is s ometimes a neces s ity , but not the nor m. CP S C 310: Introduction to S oftware E ngineer ing Reckless P rud ent Delib erate Inad ver tent CP S C 310: Introduction to S oftware E ngineer ing Reckless P rud ent Delib erate “W e don’t hav e t ime to think about it” “Our deadline is ﬁ r m, but the risk is wor th it” Inad ver tent “It w ill w ork in production without any tes ting” “W e were lucky , but ne x t time we can do better ” CP S C 310: Introduction to S oftware E ngineer ing Reckless P rud ent Delib erate Irresp onsib le Intent ional Inad ver tent Incomp etent A ccid ent al CP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ing 2 Tricks of A gile: 1) TE S T S . W r ite tes ts that ens ure that y ou know that y our code is meeting s pec (or the tes ts fail until y ou meet s pec). 2) Fluency with R E F A C T OR ING. S y mptoms of technical debt CP S C 310: Introduction to S oftware E ngineer ing Mot ivat ion for refactoring … ● A s the code changes , code is s ues emerge. ● If it’s larger s cale it’s called Tech n ical Deb t. ● If it’s a cos metic is s ue y ou can s ee, it’s called a Co d e S m ell. ● Technical debt/s mells are e x pected in agile methodologies ! ● Technical Debt and Code S mells mak e the code hard to ev olv e. It’s diﬃcult to add new features when y ou hav e technical debt or code s mells that mak e s imple changes comple x to implement. ● Tech n ical d eb t an d co d e sm ells b o th r efer t o co d e th at n eed s b e r estru ctu r ed b efo r e ch an g es can b e safely m ad e. function statement(): string { let totalAmount = 0; let result = \"Rental Record for \" + this.getName() + \":\\n\"; for (const rental of this.rentals) { let rentalAmount = 0; switch (rental.getMovie().getPriceCode()) { case Movie.REGULAR: rentalAmount += 2; if (rental.getDaysRented() > 2) { rentalAmount += (rental.getDaysRented() - 2) * 1.5; } break; case Movie.NEW_RELEASE: rentalAmount += rental.getDaysRented() * 3; break; } totalAmount += rentalAmount; } result += \"Amount owed is \" + totalAmount.toFixed(2) + \".\\n\"; return result; } E mergent code s mells / tech. debt function statement(): string { let totalAmount = 0; let result = \"Rental Record for \" + this.getName() + \":\\n\"; for (const rental of this.rentals) { let rentalAmount = 0; // determine amounts for rental movie rented switch (rental.getMovie().getPriceCode()) { case Movie.REGULAR: rentalAmount += 2; if (rental.getDaysRented() > 2) { rentalAmount += (rental.getDaysRented() - 2) * 1.5; } break; case Movie.NEW_RELEASE: rentalAmount += rental.getDaysRented() * 3; break; case Movie.CHILDRENS: rentalAmount += 1.5; if (rental.getDaysRented() > 3) { rentalAmount += (rental.getDaysRented() - 3) * 1.5; } break; } totalAmount += rentalAmount; } result += \"Amount owed is \" + totalAmount.toFixed(2) + \".\\n\"; return result; } Jus t one more thing! function statement(): string { let totalAmount = 0; let frequentRenterPoints = 0; let result = \"Rental Record for \" + this.getName() + \":\\n\"; for (const rental of this.rentals) { let rentalAmount = 0; // determine amounts for rental movie rented switch (rental.getMovie().getPriceCode()) { case Movie.REGULAR: rentalAmount += 2; if (rental.getDaysRented() > 2) { rentalAmount += (rental.getDaysRented() - 2) * 1.5; } break; case Movie.NEW_RELEASE: rentalAmount += rental.getDaysRented() * 3; break; case Movie.CHILDRENS: rentalAmount += 1.5; if (rental.getDaysRented() > 3) { rentalAmount += (rental.getDaysRented() - 3) * 1.5; } break; } totalAmount += rentalAmount; frequentRenterPoints++; } result += \"Amount owed is \" + totalAmount.toFixed(2) + \".\\n\"; result += \"You earned \" + frequentRenterPoints.toFixed(0) + \" points.\"; return result; } I lied! Now a delocaliz ed feature. function statement(): string { let totalAmount = 0; let frequentRenterPoints = 0; let result = \"Rental Record for \" + this.getName() + \":\\n\"; for (const rental of this.rentals) { let rentalAmount = 0; // determine amounts for rental movie rented switch (rental.getMovie().getPriceCode()) { case Movie.REGULAR: rentalAmount += 2; if (rental.getDaysRented() > 2) { rentalAmount += (rental.getDaysRented() - 2) * 1.5; } break; case Movie.NEW_RELEASE: rentalAmount += rental.getDaysRented() * 3; break; case Movie.CHILDRENS: rentalAmount += 1.5; if (rental.getDaysRented() > 3) { rentalAmount += (rental.getDaysRented() - 3) * 1.5; } break; case Movie.SENIOR: rentalAmount += 1.5; if (rental.getDaysRented() > 2) { rentalAmount += (rental.getDaysRented() - 2) * 1; } break; } totalAmount += rentalAmount; frequentRenterPoints++; if ((rental.getMovie().getPriceCode() === Movie.SENIOR)) { frequentRenterPoints += rental.getDaysRented() -1; } } result += \"Amount owed is \" + totalAmount.toFixed(2) + \".\\n\"; result += \"You earned \" + frequentRenterPoints.toFixed(0) + \" points.\"; return result; } Tapping into new mar k ets . function statement(): string { let totalAmount = 0; let frequentRenterPoints = 0; let result = \"Rental Record for \" + this.getName() + \":\\n\"; for (const rental of this.rentals) { let rentalAmount = 0; // determine amounts for rental movie rented switch (rental.getMovie().getPriceCode()) { case Movie.REGULAR: rentalAmount += 2; if (rental.getDaysRented() > 2) { rentalAmount += (rental.getDaysRented() - 2) * 1.5; } break; case Movie.NEW_RELEASE: rentalAmount += rental.getDaysRented() * 3; break; case Movie.CHILDRENS: rentalAmount += 1.5; if (rental.getDaysRented() > 3) { rentalAmount += (rental.getDaysRented() - 3) * 1.5; } break; case Movie.SENIOR: rentalAmount += 1.5; if (rental.getDaysRented() > 2) { rentalAmount += (rental.getDaysRented() - 2) * 1; } break; } totalAmount += rentalAmount; frequentRenterPoints++; if ((rental.getMovie().getPriceCode() === Movie.SENIOR)) { frequentRenterPoints += rental.getDaysRented() -1; } } result += \"Amount owed is \" + totalAmount.toFixed(2) + \".\\n\"; result += \"You earned \" + frequentRenterPoints.toFixed(0) + \" points.\"; return result; } A nd then s tudent dis counts . Then more details about mov ies . How about mid-week deals ? Who does n’t lov e the clas s ics ?! … … function statement(): string { let totalAmount = 0; let frequentRenterPoints = 0; let result = \"Rental Record for \" + this.getName() + \":\\n\"; for (const rental of this.rentals) { let rentalAmount = 0; // determine amounts for rental movie rented switch (rental.getMovie().getPriceCode()) { case Movie.REGULAR: rentalAmount += 2; if (rental.getDaysRented() > 2) { rentalAmount += (rental.getDaysRented() - 2) * 1.5; } break; case Movie.NEW_RELEASE: rentalAmount += rental.getDaysRented() * 3; break; case Movie.CHILDRENS: rentalAmount += 1.5; if (rental.getDaysRented() > 3) { rentalAmount += (rental.getDaysRented() - 3) * 1.5; } break; case Movie.SENIOR: rentalAmount += 1.5; if (rental.getDaysRented() > 2) { rentalAmount += (rental.getDaysRented() - 2) * 1; } break; } totalAmount += rentalAmount; frequentRenterPoints++; if ((rental.getMovie().getPriceCode() === Movie.SENIOR)) { frequentRenterPoints += rental.getDaysRented() -1; } } result += \"Amount owed is \" + totalAmount.toFixed(2) + \".\\n\"; result += \"You earned \" + frequentRenterPoints.toFixed(0) + \" points.\"; return result; } Ov er time code is edited by many people and accumulates cr uft. • duplication • r igidity • coupling CP S C 310: Introduction to S oftware E ngineer ing E mergent ab st ract ion A ny time y ou are tr y ing to mak e a change, and it is diﬃcult becaus e either... ● Y ou hav e to mak e that change in more t han one p lace . ● Changes (y ou can tell) will res ult in merge conﬂict s or changes to the s ame ﬁ le as y our teammate. ● The code is too ob fuscated to be clear ly under s tood. ...y ou r un the r is k of introducing bugs ! CP S C 310: Introduction to S oftware E ngineer ing E mergent ab st ract ion To av oid this : R efactor b efore y ou mak e the change by int rod ucing an ab st ract ion to either : ● S olve duplication/clone/s catter ing that caus es the multiple change locations . ● Red uce tangling between the pieces of functionality by s plitting them up. ● Increase code readability to mak e it more under s tandable. CP S C 310: Introduction to S oftware E ngineer ing How to Refactor? 1. Mak e s ure all y our tes ts pas s . 2. E x amine the code s mell. 3. Deter mine how to refactor this code. 4. A pply the refactor ing. 5. R un tes ts to mak e s ure y ou didn’t break any thing. 6. R epeat until the s mell is gone. “ apply a r efactor ing” Change is des ir ed Don’t refactor... ● When the tes ts are failing. ● When y ou s hould jus t rewr ite the code. ● When y ou hav e impending deadlines . E xamine code smell S y mptoms of technical debtR efactor ing catalog CP S C 310: Introduction to S oftware E ngineer ing How Do W e Deal W it h Magic Numb ers? potentialEnergy(mass: number, height: number): number { return mass * 9.81 * height; } A ny use of an act ual numb er in t he cod e. Mayb e mak e t his a const ant and p ush your meanings into t he t yp e system. a) Y ou have to make that change in more than one place. b) Changes (you can tell) will result in merge conflicts. c) T he code is too obfuscated to be clearly understood. potentialEnergy(mass: number, height: number): number { const GRAVITATIONAL_CONSTANT = 9.81; return mass * GRAVITATIONAL_CONSTANT * height; } “ Rep lace magic numb er w it h symb ol” is a t yp ical ap p roach, b ut not t he only one! CP S C 310: Introduction to S oftware E ngineer ing Magic Numb er P roliferat ion What to do? F ee Days limit E xtra fee multiplier E xtra fee adjustment CP S C 310: Introduction to S oftware E ngineer ing Transforming Magic Numb ers let fee = 0; let daysLimit = 0; let extraFeeMultiplier = 0; let extraFeeAdjustment = 0; If t hese are not const ant s, w e could mak e t hem variab les. CP S C 310: Introduction to S oftware E ngineer ing Magic Numb ers Removed ! let fee = 0; let daysLimit = 0; let extraFeeMultiplier = 0; let extraFeeAdjustment = 0;","libVersion":"0.2.1","langs":""}