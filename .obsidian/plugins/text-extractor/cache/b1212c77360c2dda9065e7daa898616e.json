{"path":".obsidian/plugins/text-extractor/cache/b1212c77360c2dda9065e7daa898616e.json","text":"CPSC 320: Graph Play 1 Graph Diameter The diameter of a connected, undirected, unweighted graph is the largest possible value of the following quantity: the smallest number of edges on any path between two nodes. In other words, it’s the largest number of steps required to get between two nodes in the graph. Your task is to design an eﬃcient algorithm to ﬁnd the diameter. Step 1: Build intuition through examples. What is the diameter of the following graphs? Step 2: Develop a formal problem speciﬁcation Develop notation for describing a problem instance, a potential solution, a good solution. 1 Step 3: Identify similar problems. What are the similarities? Step 4: Evaluate brute force. 2 Step 5: Design a better algorithm. 1. Brainstorm some ideas, then sketch out an algorithm. Try out your algorithm on some examples. 2. Show that your algorithm is correct. 3. Analyze the running time of your algorithm. 3 2 Weighted Shortest Paths (WSP) Now we’ll turn to weighted undirected graphs. Finding shortest paths in such graphs has numerous appli- cations, such as ﬁnding the cheapest airfare between two cities, or ﬁnding the shortest route from where we are to where we want to get to in a maze of hiking trails. Step 1: Build intuition through examples. Step 2: Develop a formal problem speciﬁcation Step 3: Identify similar problems. What are the similarities? 4 Step 4: Evaluate simple algorithmic approaches. Here we’ll explore a way to solve WSP by “reducing” it to BFS. For this, we’ll assume that each weight is a positive integer. 1. How can we transform (i.e., “reduce”) our WSP example instance into an unweighted bfs input, while preserving distances? Fill in the corresponding bfs instance on the right. 2. Now, describe the more general “Transform instance algorithm” and “Transform solution algorithm” in the picture below, for arbitrary instances of WSP. Transform instance algorithm: Transform solution algorithm: 5 3. Explain why the reduction algorithm is correct. 4. What can you say about the running time of the reduction algorithm? (a) How many nodes does the graph G′ have, for the following WSP instance? (b) More generally, how many nodes does the graph G′ have? See if you can bound it as a function of n, the number of nodes of G, and the max edge weight W = max(u,v)∈E w(u, v). 6","libVersion":"0.2.1","langs":""}