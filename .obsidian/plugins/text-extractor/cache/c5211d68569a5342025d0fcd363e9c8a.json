{"path":".obsidian/plugins/text-extractor/cache/c5211d68569a5342025d0fcd363e9c8a.json","text":"2 A Greedy continuation For this problem, imagine that you are writing the software for a robot that is supposed to fight fires in hazardous environments, like a nuclear reactor or chemical plant. We consider the environment to be laid out in a rectangular grid that is w squares wide and h squares high. Your software should make the robot move from square to square until it reaches the square with the fire, whereupon the robot releases its fire extinguisher. For example (and this is only an example — your code should work in an arbitrary layout), consider this layout: | 1 ) i . Foeeg . ' i | i i | ' ! . i : | This grid is 7 squares wide and 5 squares high. The very light dotted lines mark the boundaries of the squares. The dark solid black lines are walls, which the robot cannot move through. (The walls also block smoke and chemicals from the fire. More on this in a moment.) The orange dashed line shows a path that the robot could take to get to the fire: this path entails moving up for 3 squares, then right for 1 square, then down for 3 squares, then right for 4 squares, then up for 2 squares, then left for 1 square, for a total of length of 14 squares (14 =3+1+43+4+4+2+1). A better path for the robot would be the dash-dotted green path, which has a total length of only 10 squares, and for this example, that’s the shortest path from the robot to the fire. To control the robot, the software relies on an API with only these 4 functions: sense() This function makes the robot use its chemical sensors to measure the presence of combustion products coming from the fire. It returns a positive real number that gets larger the closer the robot is to the fire. Note that “closer” is defined by the length of the shortest path to the fire, without going through walls (since the walls block the combustion products). Other than that, we don’t know anything about the numbers returned by the function. For example, for the layout above, this diagrams shows numbers that might be returned by sense() if called in each square: 0330 40 50 40 30 20 1.0 120]50([60[83 86 83 20 ([30]60]65 70 7482 30[40]65 70 74 75 80 40 50 6.0 65 70 74 75 move(direction) This causes the robot to move 1 square in the indicated direction. The legal directions are “up”, “down”, “left”, and “right”. The robot is fireproof and can move through the square with the fire without harm. However, if the robot tries to move through a wall, it crashes and fails.","libVersion":"0.2.1","langs":"eng"}