{"path":".obsidian/plugins/text-extractor/cache/9ca854a444f5d12264c4fd43b7bb738f.json","text":"Test ing CP S C 310 Nick B radley & K athar ine K er r F or per s onal us e only , pleas e do not dis tr ibute on non-UB C domains . CP S C 310: Introduction to S oftware E ngineer ing A ccommod at ions ● W ill only be accepted one week pas t the due date of the deliv erable (e.g. C0 accommodation reques ts are due this F r iday ) ● Fill out Qualtr ics F or m link ed from the Cour s e W ebs ite CP S C 310: Introduction to S oftware E ngineer ing C1 ● Team Creation and R epo prov is ioning will be liv e on W ednes day this week CP S C 310: Introduction to S oftware E ngineer ing Last t ime ● Why do we tes t? ● When do we wr ite tes ts ? ● How do we clas s ify tes ts ? ● How do we create an eﬀ ectiv e tes t s uite? CP S C 310: Introduction to S oftware E ngineer ing Last t ime ● Why do we tes t? ● When do we wr ite tes ts ? ● How do we clas s ify tes ts ? ● Ho w d o w e cr eat e an eﬀective t est su it e? CP S C 310: Introduction to S oftware E ngineer ing L ect ure L earning O ut comes B y the end of this lecture, y ou will be able to ans wer : ● How can we ev aluate the eﬀ ectiv enes s of our tes t s uite? What are the beneﬁ ts and drawbacks of thos e techniques ? ○ What is Tes t Cov erage, and what are the diﬀ erent kinds of tes t cov erage? ○ What is Mutation Tes ting? ● What is F uz z Tes ting, and how does it help us create an eﬀ ectiv e tes t s uite? L ect ure L earning O ut comes Glas s B o x Tes ting CP S C 310: Introduction to S oftware E ngineer ing Black Bo x Test ing ( S p ec.) Tes ts wr itten agains t the s peciﬁ cation. C an be wr itten pr ior to the implementation. Hard to reas on about how s trong y our tes ts are with res pect to the implementation. G lass Bo x Test ing ( Imp ’l) Tes ts wr itten agains t implementation. Checks the implementation its elf. Y ou can ev aluate the quality of y our tes t s uite through mut at ion test ing. E as y to ov er ﬁ t tes t s uite to the implementation, rather than the s pec. F uz z ing can decreas e ov er-ﬁ tting. CP S C 310: Introduction to S oftware E ngineer ing S t ages of test ing Get the requirements . Tur n into s tubs with s peciﬁ cations . W r ite black bo x tes ts to check s peciﬁ cations . Implement until all black bo x tes ts are pas s ing. Check how good y our tes t s uite is for this s peciﬁ c implementation. Check cov erage , Check mutants . W r ite glas s bo x tes ts to e x ercis e the full codebas e. S pec tes ts <<< ONLY TE S T what is in the s pec. CP S C 310: Introduction to S oftware E ngineer ing G lass Bo x test ing Once y ou hav e an implementation, y ou can tes t under the hood. G lass b o x test ing measures are aimed at checking t he comp leteness of your test suite: ● Co ver ag e of v ar ious kinds tells y ou how much code y ou cov er, or how many combinations of paths y ou cov er (y ou’v e s een this before in CP S C 210). ● Mu tatio n t estin g tells y ou whether y ou would pick up on randomly ins er ted ty pos (this is how we grade C0). Tes t Cov erage CP S C 310: Introduction to S oftware E ngineer ing Test coverage There are lots of kinds of cov erage; we focus on: ● L in e/S tat em en t cov erage. ● Br an ch cov erage. ● P ath cov erage. S t atement /Line coverage toolsE xamp le set up ( eval funct ion) eval(x: number, c1: boolean, c2: boolean): number{ if (c1) x++; if (c2) x--; return x; } CP S C 310: Introduction to S oftware E ngineer ing Line coverage w it h one test case: eval(0, false, false) eval(x: number, c1: boolean, c2: boolean): number{ if (c1) x++; if (c2) x--; return x; } CP S C 310: Introduction to S oftware E ngineer ing eval(0, false, false) eval(x: number, c1: boolean, c2: boolean): number{ if (c1) x++; if (c2) x--; return x; } Line coverage w it h one test case: CP S C 310: Introduction to S oftware E ngineer ing eval(0, false, false) eval(x: number, c1: boolean, c2: boolean): number{ if (c1) x++; if (c2) x--; return x; } Line coverage w it h one test case: CP S C 310: Introduction to S oftware E ngineer ing eval(0, false, false) eval(x: number, c1: boolean, c2: boolean): number{ if (c1) x++; if (c2) x--; return x; } Line coverage w it h one test case: CP S C 310: Introduction to S oftware E ngineer ing eval(0, false, false) eval(x: number, c1: boolean, c2: boolean): number{ if (c1) x++; if (c2) x--; return x; } Line coverage w it h one test case: CP S C 310: Introduction to S oftware E ngineer ing eval(0, false, false) eval(x: number, c1: boolean, c2: boolean): number{ if (c1) x++; if (c2) x--; return x; } Line coverage w it h one test case: CP S C 310: Introduction to S oftware E ngineer ing eval(0, false, false) eval(x: number, c1: boolean, c2: boolean): number{ if (c1) x++; if (c2) x--; return x; } 60% Line coverage w it h one test case: CP S C 310: Introduction to S oftware E ngineer ing eval(0, true, true) Line coverage w it h one test case: eval(x: number, c1: boolean, c2: boolean): number{ if (c1) x++; if (c2) x--; return x; } CP S C 310: Introduction to S oftware E ngineer ing eval(0, true, true) eval(x: number, c1: boolean, c2: boolean): number{ if (c1) x++; if (c2) x--; return x; } Line coverage w it h one test case: CP S C 310: Introduction to S oftware E ngineer ing eval(0, true, true) eval(x: number, c1: boolean, c2: boolean): number{ if (c1) x++; if (c2) x--; return x; } Line coverage w it h one test case: CP S C 310: Introduction to S oftware E ngineer ing eval(0, true, true) eval(x: number, c1: boolean, c2: boolean): number{ if (c1) x++; if (c2) x--; return x; } 100% Line coverage w it h one test case: CP S C 310: Introduction to S oftware E ngineer ing eval(x: number, c1: boolean, c2: boolean): number{ if (c1) x++; if (c2) x--; return x; } eval(0, true, true) 100% Line coverage w it h one test case: CP S C 310: Introduction to S oftware E ngineer ing eval(0, true, true) eval(x: number, c1: boolean, c2: boolean): number{ if (c1 || someOtherThing()) x++; if (c2) x--; return x; } S t atement coverage w it h one test case: < 100% CP S C 310: Introduction to S oftware E ngineer ing eval(0, false, true) eval(x: number, c1: boolean, c2: boolean): number{ if (c1 || someOtherThing()) x++; if (c2) x--; return x; } S t atement coverage w it h one test case: 100% CP S C 310: Introduction to S oftware E ngineer ing eval(x: number, c1: boolean, c2: boolean): number{ if (c1) x++; if (c2) x--; return x; } Branch coverage CP S C 310: Introduction to S oftware E ngineer ing eval(x: number, c1: boolean, c2: boolean): number{ if (c1) x++; if (c2) x--; return x; } eval(0, true, true) Branch coverage CP S C 310: Introduction to S oftware E ngineer ing eval(x: number, c1: boolean, c2: boolean): number{ if (c1) x++; if (c2) x--; return x; } eval(0, true, true) 50% Branch coverage CP S C 310: Introduction to S oftware E ngineer ing eval(x: number, c1: boolean, c2: boolean): number{ if (c1) x++; if (c2) x--; return x; } eval(0, true, true) eval(0, false, false) 100% Branch coverage CP S C 310: Introduction to S oftware E ngineer ing P at h coverage eval(0, false, false) eval(0, true, false) eval(0, false, true) eval(0, true, true) P at h cov er age often is n’ t feas ib le in p r act ice b ecaus e it w ould jus t t ak e *w ay * too long. F or ins t ance, p at h cov er age for loop s means ev aluat ing ev er y numb er of iter at ions t he loop could t ak e. + !Cor rectnes s 1993 1994 1994 1994 1994 1994 1994 1994 1994 1994 1994 1994 1994 A ctionable Cheap to compute Intuitiv e A r tiﬁ cial thres holds “If the program wor ks … on s peciﬁ ed data, then it will alway s wor k on any data. — Hoare tes ting tes ting Mutation CP S C 310: Introduction to S oftware E ngineer ing Mut at ion test ing ● The coupling hy pothes is on which mutation tes ting relies : ○ S tates that mutant v er s ions of programs are s imilar to the kinds of mis tak es dev eloper s mak e, and that thes e mis tak es alias to real faults . ● Mutation tes ting is appealing becaus e it prov ides a means to s imulate dev eloper mis tak es , which could lead to real bugs . ● E .g., if (s houldDelete) ins tead of if (!s houldDelete) CP S C 310: Introduction to S oftware E ngineer ing W ays to mak e mut ant s ( Mut at ion O p erators) • S tatement deletion. • S tatement duplication or ins er tion, e.g. goto fail. • R eplacement of boolean s ube x pres s ions with tr ue and fals e. • R eplacement of s ome ar ithmetic operations with other s , e.g. + with *, - with /. • R eplacement of s ome boolean relations with other s , e.g. > with >=, == and <=. • R eplacement of v ar iables with other s from the s ame s cope (v ar iable ty pes mus t be compatible). CP S C 310: Introduction to S oftware E ngineer ing P rogram public float avg(float[] data){ float sum = 0; for (float num : data){ sum += num; } return sum / data.length; } Generate Mutants CP S C 310: Introduction to S oftware E ngineer ing P rogram public float avg(float[] data){ float sum = 0; for (float num : data){ sum += num; } return sum / data.length; } Generate Mutants CP S C 310: Introduction to S oftware E ngineer ing P rogram public float avg(float[] data){ float sum = 0; for (float num : data){ sum += num; } return sum / data.length; } 18 3 public float avg(float[] data){ float sum = 1; for (float num : data){ sum += num; } return sum / data.length; } Generate Mutants Mutant CP S C 310: Introduction to S oftware E ngineer ing P rogram public float avg(float[] data){ float sum = 0; for (float num : data){ sum += num; } return sum / data.length; } 18 4 public float avg(float[] data){ float sum = 1; for (float num : data){ sum += num; } return sum / data.length; } public float avg(float[] data){ float sum = 0; for (float num : data){ sum += num; } return sum * data.length; } Generate Mutants Mutant Mutant CP S C 310: Introduction to S oftware E ngineer ing P rogram public float avg(float[] data){ float sum = 0; for (float num : data){ sum += num; } return sum / data.length; } 18 5 public float avg(float[] data){ float sum = 1; for (float num : data){ sum += num; } return sum / data.length; } public float avg(float[] data){ float sum = 0; for (float num : data){ sum += num; } return sum * data.length; } public float avg(float[] data){ float sum = 0; for (float num : data){ sum -= num; } return sum * data.length; } Generate Mutants Mutant Mutant Mutant CP S C 310: Introduction to S oftware E ngineer ing 18 6 public float avg(float[] data){ float sum = 1; for (float num : data){ sum += num; } return sum / data.length; } assertEq(avg[1],1) ✖ public float avg(float[] data){ float sum = 0; for (float num : data){ sum += num; } return sum / data.length; } CP S C 310: Introduction to S oftware E ngineer ing 18 7 assertEq(avg[1],1) public float avg(float[] data){ float sum = 0; for (float num : data){ sum += num; } return sum / data.length; } public float avg(float[] data){ float sum = 0; for (float num : data){ sum += num; } return sum * data.length; } ✔ CP S C 310: Introduction to S oftware E ngineer ing public float avg(float[] data){ float sum = 0; for (float num : data){ sum -= num; } return sum / data.length; } ✖ public float avg(float[] data){ float sum = 0; for (float num : data){ sum += num; } return sum / data.length; } 18 8 assertEq(avg[1],1) CP S C 310: Introduction to S oftware E ngineer ing ✔ return sum*length; sum -= num; ✖ int sum = 1; ✖ Mutants : K ill S core P rogram Tes t S uite E x ecute S uites Generate Mutants Mutant Mutant Mutant assertEq(avg[1],1) CP S C 310: Introduction to S oftware E ngineer ing assertEq(avg([1]), 1); T S -1: K S : 66% assertEq(avg([1]),1); assertEq(avg([1,1]),1); T S -2: K S : 100% ✖ P rogram Tes t S uite E x ecute S uites Generate Mutants Mutant Mutant Mutant K ill S core return sum / data.length; return sum * data.length; + Cor rectnes s focus P rogrammatic oracle R eally , really s low 1993 1994 1994 Coupling hy pothes is CP S C 310: Introduction to S oftware E ngineer ing K ill S core Our Impl Y our S uite A utotes t E x ecutes Generate Mutants Mutant Mutant Mutants C0 S tr ucture A utomated tes ting: F uz z ing CP S C 310: Introduction to S oftware E ngineer ing A utomated test ing ≠ test automat ion Bo rro w ed fro m Caro lin e L emieu x’ s CP S C 539L h ttp s://w w w .caro lemieu x.co m/teach in g /CP S C539L _2022w 1.h tml CP S C 310: Introduction to S oftware E ngineer ing Test automat ion https ://www .func tio niz e .c o m /a uto m a ted -tes ting https ://www .a tla s s ia n.c o m /d e v o ps /d e v o ps -to o ls /tes t-a uto m a tio n https ://en.wikiped ia .o r g /wiki/Tes t_ a uto m a tion CP S C 310: Introduction to S oftware E ngineer ing https ://www .func tio niz e .c o m /a uto m a ted -tes ting https ://www .a tla s s ia n.c o m /d e v o ps /d e v o ps -to o ls /tes t-a uto m a tio n https ://en.wikiped ia .o r g /wiki/Tes t_ a uto m a tion Test automat ion CP S C 310: Introduction to S oftware E ngineer ing A utomated test ing • Tes t-input generation: • Generate tes t inputs that e x pos e bugs in a program. • Tes t cas e / Tes t s uite generation: • Generate tes t s uites that e x pos e bugs in a program. CP S C 310: Introduction to S oftware E ngineer ing A utomated test ing • Tes t-input generation: • Generate tes t inputs that e x pos e bugs in a program. • Tes t cas e / Tes t s uite generation: • Generate tes t s uites that e x pos e bugs in a program. Fuz z i ng, Co nc o lic + Sy m bo lic Ex ec utio n CP S C 310: Introduction to S oftware E ngineer ing Test -Inp ut generat ion • A s s ume a program P which tak es an input i. CP S C 310: Introduction to S oftware E ngineer ing E xamp le p rogram P def cgi_decode(s: str) -> str: \"\"\"Decode the CGI-encoded string s by replacing '+' with ' ' and '%xx' with the character for hex number xx. Return the decoded string. Raise `ValueError` for invalid inputs.\"\"\" t = \"\" i = 0 while i < len(s): c = s[i] if c == '+’: t += ' ‘ elif c == '%’: digit_high, digit_low = s[i + 1], s[i + 2] i += 2 if digit_high in hex_values and digit_low in hex_values: v = hex_values[digit_high] * 16 + hex_values[digit_low] t += chr(v) else: raise ValueError(\"Invalid encoding\") else: t += c i += 1 return t CP S C 310: Introduction to S oftware E ngineer ing E xamp le p rogram P, inp ut i Hello%21+World%22 def cgi_decode(s: str) -> str: \"\"\"Decode the CGI-encoded string `s`: * replace '+' by ' ' * replace \"%xx\" by the character with hex number xx. Return the decoded string. Raise `ValueError` for invalid inputs.\"\"\" t = \"\" i = 0 while i < len(s): c = s[i] if c == '+’: t += ' ‘ elif c == '%’: digit_high, digit_low = s[i + 1], s[i + 2] i += 2 if digit_high in hex_values and digit_low in hex_values: v = hex_values[digit_high] * 16 + hex_values[digit_low] t += chr(v) else: raise ValueError(\"Invalid encoding\") else: t += c i += 1 return t CP S C 310: Introduction to S oftware E ngineer ing E xamp le p rogram P, inp ut i Hello%21+World%22 def cgi_decode(s: str) -> str: \"\"\"Decode the CGI-encoded string `s`: * replace '+' by ' ' * replace \"%xx\" by the character with hex number xx. Return the decoded string. Raise `ValueError` for invalid inputs.\"\"\" t = \"\" i = 0 while i < len(s): c = s[i] if c == '+’: t += ' ‘ elif c == '%’: digit_high, digit_low = s[i + 1], s[i + 2] i += 2 if digit_high in hex_values and digit_low in hex_values: v = hex_values[digit_high] * 16 + hex_values[digit_low] t += chr(v) else: raise ValueError(\"Invalid encoding\") else: t += c i += 1 return t CP S C 310: Introduction to S oftware E ngineer ing E xamp le p rogram P, inp ut i, result P (i) def cgi_decode(s: str) -> str: \"\"\"Decode the CGI-encoded string `s`: * replace '+' by ' ' * replace \"%xx\" by the character with hex number xx. Return the decoded string. Raise `ValueError` for invalid inputs.\"\"\" t = \"\" i = 0 while i < len(s): c = s[i] if c == '+’: t += ' ‘ elif c == '%’: digit_high, digit_low = s[i + 1], s[i + 2] i += 2 if digit_high in hex_values and digit_low in hex_values: v = hex_values[digit_high] * 16 + hex_values[digit_low] t += chr(v) else: raise ValueError(\"Invalid encoding\") else: t += c i += 1 return t Hello%21+World%22 Tha t input ex erc is ed the c o d e hig hlig hted g r een Retur ned no r m a lly CP S C 310: Introduction to S oftware E ngineer ing E xamp le p rogram P, inp ut i, result P (i) def cgi_decode(s: str) -> str: \"\"\"Decode the CGI-encoded string `s`: * replace '+' by ' ' * replace \"%xx\" by the character with hex number xx. Return the decoded string. Raise `ValueError` for invalid inputs.\"\"\" t = \"\" i = 0 while i < len(s): c = s[i] if c == '+’: t += ' ‘ elif c == '%’: digit_high, digit_low = s[i + 1], s[i + 2] i += 2 if digit_high in hex_values and digit_low in hex_values: v = hex_values[digit_high] * 16 + hex_values[digit_low] t += chr(v) else: raise ValueError(\"Invalid encoding\") else: t += c i += 1 return t Hello%2V+World%22 Tha t input ex erc is ed the c o d e hig hlig hted g r een Retur ned a V a lueEr ro r CP S C 310: Introduction to S oftware E ngineer ing Test -Inp ut generat ion • A s s ume a program P which tak es in input i. • Goal of automated tes t input generation: • Giv en P, generate inputs i which e x pos e bugs … or other interes ting behav ior s . CP S C 310: Introduction to S oftware E ngineer ing W hat is fu zzin g/fuz z test ing? A ims to s olv e the tes t-input generation problem: “Giv en program P generate inputs i which e x pos e bugs or other interes ting behav ior s ” F uz z ing algor ithms are tes t-input generation algor ithms where: - F uz z ing algor ithm has s ome elements of randomnes s . - F uz z ing algor ithm may us e feedback from program e x ecution: P ( i) or analy z e( P ( i) ) to guide the generation of the ne x t input. CP S C 310: Introduction to S oftware E ngineer ing S imp lest : Ran d o m fuz z ing Giv en a a program P, generate input i randomly. C alled “ b lackb o x fuz z ing” becaus e it is not us ing any feedback from the program under tes t [P ( i) or analy z e( P ( i) )] to guide input generation. CP S C 310: Introduction to S oftware E ngineer ing Rand om fuz z ing Random Sour c e $ bc [B. M iller , L. F r edriksen, B. So. A n E mpiric al S tud y o f the R eliability o f U nix U tilities. C ommunications o f the A CM, 1990 .] CP S C 310: Introduction to S oftware E ngineer ing ^[¹¨¥:õ;ã C<88> Random Sour c e $ bc [B. M iller , L. F r edriksen, B. So. A n E mpiric al S tud y o f the R eliability o f U nix U tilities. C ommunications o f the A CM, 1990 .] Rand om fuz z ing CP S C 310: Introduction to S oftware E ngineer ing Ö«¨..<78>àS2b Random Sour c e $ bc [B. M iller , L. F r edriksen, B. So. A n E mpiric al S tud y o f the R eliability o f U nix U tilities. C ommunications o f the A CM, 1990 .] Rand om fuz z ing CP S C 310: Introduction to S oftware E ngineer ing $Y &Ó<83>íy ø Random Sour c e $ bc [B. M iller , L. F r edriksen, B. So. A n E mpiric al S tud y o f the R eliability o f U nix U tilities. C ommunications o f the A CM, 1990 .] Rand om fuz z ing CP S C 310: Introduction to S oftware E ngineer ing ^\\®´b Ö«4^A·Þ Random Sour c e $ bc Segmentation Fault $ [B. M iller , L. F r edriksen, B. So. A n E mpiric al S tud y o f the R eliability o f U nix U tilities. C ommunications o f the A CM, 1990 .] Rand om fuz z ing CP S C 310: Introduction to S oftware E ngineer ing W hat if inp ut s are too rand om? ^\\®´b Ö«4^A·Þ Random Sour c e $ bc Segmentation Fault $ CP S C 310: Introduction to S oftware E ngineer ing W hat if inp ut s are too rand om? ^\\®´b Ö«4^A·Þ Random Sour c e XM L P a r s er CP S C 310: Introduction to S oftware E ngineer ing W hat if inp ut s are too rand om? ^\\®´b Ö«4^A·Þ Random Sour c e XM L P a r s er Hm m m … tha t lo o ks wro ng CP S C 310: Introduction to S oftware E ngineer ing How to have less rand om inp ut s? W rite a sp eciﬁcat ion, generate inp ut s b ased on t hat sp eciﬁcat ion: - G enerator-b ased fuz z ing - P rop er t y-b ased fuz z ing - G rammar-b ased fuz z ing - … CP S C 310: Introduction to S oftware E ngineer ing Rand om fuz z ing Sour c e o f Randomness I nput CP S C 310: Introduction to S oftware E ngineer ing G enerator-b ased fuz z ing I nput Generator I nput CP S C 310: Introduction to S oftware E ngineer ing def genXML(random): tag = random.choice(tags) node = XMLElement(tag) num_child = random.nextInt(0, MAX_CHILDREN) for i in range(0, num_child): node.addChild(genXML(random)) if random.nextBoolean(): node.addText(random.nextString()) return node $ xmllint G enerator-b ased fuz z ing CP S C 310: Introduction to S oftware E ngineer ing <a>bb</ a> def genXML(random): tag = random.choice(tags) node = XMLElement(tag) num_child = random.nextInt(0, MAX_CHILDREN) for i in range(0, num_child): node.addChild(genXML(random)) if random.nextBoolean(): node.addText(random.nextString()) return node $ xmllint G enerator-b ased fuz z ing CP S C 310: Introduction to S oftware E ngineer ing <go>x</ go> def genXML(random): tag = random.choice(tags) node = XMLElement(tag) num_child = random.nextInt(0, MAX_CHILDREN) for i in range(0, num_child): node.addChild(genXML(random)) if random.nextBoolean(): node.addText(random.nextString()) return node $ xmllint G enerator-b ased fuz z ing CP S C 310: Introduction to S oftware E ngineer ing <a><b></b></ a> def genXML(random): tag = random.choice(tags) node = XMLElement(tag) num_child = random.nextInt(0, MAX_CHILDREN) for i in range(0, num_child): node.addChild(genXML(random)) if random.nextBoolean(): node.addText(random.nextString()) return node $ xmllint G enerator-b ased fuz z ing CP S C 310: Introduction to S oftware E ngineer ing <bar>f</bar> def genXML(random): tag = random.choice(tags) node = XMLElement(tag) num_child = random.nextInt(0, MAX_CHILDREN) for i in range(0, num_child): node.addChild(genXML(random)) if random.nextBoolean(): node.addText(random.nextString()) return node $ xmllint G enerator-b ased fuz z ing CP S C 310: Introduction to S oftware E ngineer ing <go><b></b><x>spm< /x></ go> def genXML(random): tag = random.choice(tags) node = XMLElement(tag) num_child = random.nextInt(0, MAX_CHILDREN) for i in range(0, num_child): node.addChild(genXML(random)) if random.nextBoolean(): node.addText(random.nextString()) return node $ xmllint G enerator-b ased fuz z ing CP S C 310: Introduction to S oftware E ngineer ing How to have less rand om inp ut s? W rite a sp eciﬁcat ion, generate inp ut s b ased on t hat sp eciﬁcat ion: - G enerator-b ased fuz z ing - P rop er t y-b ased test ing - G rammar-b ased fuz z ing - … S t ar t from e xist ing inp ut s and alter t hem slight ly: - Mut at ional fuz z ing (note: not r elated to mut at ion tes t ing!) CP S C 310: Introduction to S oftware E ngineer ing Mut at ional fuz z ing <bar>f</bar> $ xmllint CP S C 310: Introduction to S oftware E ngineer ing <bar>f</bar> $ xmllint <baar>f</bar> m uta te (d uplic a te) Mut at ional fuz z ing CP S C 310: Introduction to S oftware E ngineer ing <bar>f</bar> $ xmllint <bar>a</bar> m uta te (o v er wr ite) Mut at ional fuz z ing CP S C 310: Introduction to S oftware E ngineer ing <bar>f</bar> $ xmllint <bar /bar> m uta te (d elete) Mut at ional fuz z ing CP S C 310: Introduction to S oftware E ngineer ing <bar>f</bar> $ xmllint <bar>qf</bar> m uta te (ins er t) Mut at ional fuz z ing CP S C 310: Introduction to S oftware E ngineer ing E xamp les of mut at ional fuz z ers zzuf M a inta ined 2006-2016 radamsa M a inta ined 2007-no w? CP S C 310: Introduction to S oftware E ngineer ing Mut at ional fuz z ing e xamp le CP S C 310: Introduction to S oftware E ngineer ing Mut at ional fuz z ing e xamp le CP S C 310: Introduction to S oftware E ngineer ing Us e this r a nd o m s eed when m uta ting Mut at ional fuz z ing e xamp le CP S C 310: Introduction to S oftware E ngineer ing Gener a te 4 inputs Mut at ional fuz z ing e xamp le CP S C 310: Introduction to S oftware E ngineer ing Gener a te 4 inputs Mut at ional fuz z ing e xamp le CP S C 310: Introduction to S oftware E ngineer ing Gener a te 4 inputs Mut at ional fuz z ing e xamp le CP S C 310: Introduction to S oftware E ngineer ing Gener a te 4 inputs Mut at ional fuz z ing e xamp le CP S C 310: Introduction to S oftware E ngineer ing Gener a te 4 inputs Mut at ional fuz z ing e xamp le CP S C 310: Introduction to S oftware E ngineer ing Gener a te 10000 inputs Mut at ional fuz z ing e xamp le CP S C 310: Introduction to S oftware E ngineer ing Fuz z Mut at ional fuz z ing e xamp le","libVersion":"0.2.1","langs":""}