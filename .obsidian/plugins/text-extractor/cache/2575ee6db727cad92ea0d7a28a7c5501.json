{"path":".obsidian/plugins/text-extractor/cache/2575ee6db727cad92ea0d7a28a7c5501.json","text":"The Master Theorem Here we’ll wrap up divide and conquer recurrences, and cover the Master Theorem. But first some handy math. Geometric Sums. Here are useful formulas, when summing up runtimes over levels of a recurrence tree. A geometric sum has the form Yz, where z > 0. Note that when z =1, Y7 j2* = n. When z # 1 we have that: N @ A —1 1 Zn+1 i_ _ Q_ ; l— z z z—1 1-z i=0 Now, for z < 1, take the limit as n — oo to get an expression for the infinite sum: o \\ Sa- =0 1~ 1. Section 5.5 of the text describes an integer multiplication algorithm, where the inputs are n-bit numbers. The runtime of this algorithm is given by the recurrence: c. ifn=1 T(n) = , ’ ) { 3T(n/2) + cn, otherwise. Draw out and label enough of the recurrence tree, so that you can express 7'(n) as a sum of the total work per level.","libVersion":"0.2.1","langs":"eng"}