{"path":".obsidian/plugins/text-extractor/cache/d196260b21330768d5f3000d6340e1e3.json","text":"Q3 Heavy Golf Balls 2 Points A well-known puzzle is to find a single heavy (\"fake\") golf ball, in a bucket of 12 balls. Here we generalize this to the problem of finding the single heavy ball in a set S of golf balls, when exactly one golf ball is heavy and the others all have identical weights. The following algorithm describes how to find the heavy ball, assuming that you can determine in O(1) time whether two subsets of balls have the same weight or if one is heavier than the other. You could do this using a balance scale. Assume also that you can split the bucket into approximately equal parts in O(1) time (the split step in the code). We use | S| to denote the number of items in a set S, and we let n denote the number of golf ballsin S. procedure FIND-HEAVY-GOLF-BALL(S) > S is a nonempty set of golf balls, exactly one of which is heavy if |S| == 1 then return the ball in S else split S into three subsets A, B, and C, where |A| = |B| = [n/3] and C'is S â€” (AU B) if set A is heavier than set B then > this takes O(1) time return FIND-HEAVY-GOLF-BALL(A) else if set B is heavier than set A then > this takes O(1) time return FIND-HEAVY-GOLF-BALL(B) else return FIND-HEAVY-GOLF-BALL(C)","libVersion":"0.2.1","langs":"eng"}