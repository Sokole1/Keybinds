{"path":".obsidian/plugins/text-extractor/cache/d4041ccaaaa217633805f16c003a2e2f.json","text":"4 Greedy Priorities The UBC Bike Kitchen has a backlog of repair roquests. Each of the n requests for bicycle repairs, wmbered from 1 to n, has an wssigoed priority plil,1 < i < n, which has positive value. (Details of the priority assignments don't matter, but imagine that vohunteers at the Kitchen get higher priority than other students, who get higher priority than non-students, and more.) One hour is allotted to repair each bike, with repairs happening around the clock, one per hour. Given the priorities p[1..n] the staff want to schedule the order in which bikes are repaired until the backlog it cleared, so as to winimize the total “priority-weighted cost”, in terms of hours that the bikes can't be used. If the chosen repair schedule is § = i, .y i, then this total cost is Cost(8) = Y plis) x 5. = The jth term accounts for the fact that the i;th bicyele, with priority pli;]. remains unrepaired for ' hours. £ n = 0 then the cost is zoro. Example: Suppose that the priorities of three requests are given by p[1] = 3, p[2] = 10, and p[3] = 8 respectively. IF the schedule of requests is § = 1,2,3 then use of bicycle 1 is delayed for onc hour, contributing 3 to the cost: bicyele 2 remains unrepaired for 2 hours, contributiug 20 to the cost. and bicyele 3 is not repaired for 3 hours, contributing 24 to the cost. So the total cost is 47 for this schedule, The following Greedy algorithm takes as input an unsorted array p{l..n], of priorities assigned to the repair requests. 1f n = 0 then no repairs are needed and the algorithm outputs an empty schedule. Otherwise. sort the requests in decreasing order of priority, and output this order as the schedule. (In our example above, the schedule would be 23,1, for a total cost of 35.) Here you will work though the steps of an exchange argument to show optimality of the Greedy algorithu—that is. the greedy schedulo miniwizes the total priority hours wasted. 1. (3 warks) Fix an input p{L.n]. Let S be a solution produced by the Greedy algorithu on this input, and let §* be an optimal schedule. Let iy and i, be the indexes of the last requests in the schedules § and S* respectively. Let j be such that in is the jth request in schedule $*, that is, i = i3, Finally, let 8 be the schedule obtained by swapping the positions of i, and i5 in schedule S* Explain why Cost(8') = Cost(87) = plin] x (n — ) — pliz] x (n— ).","libVersion":"0.2.1","langs":"eng"}