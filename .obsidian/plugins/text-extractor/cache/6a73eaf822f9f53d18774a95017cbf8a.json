{"path":".obsidian/plugins/text-extractor/cache/6a73eaf822f9f53d18774a95017cbf8a.json","text":"QPO.9. Structures with an Under-Byte Not all computers have used 8-bit bytes. In this problem, we imagine a computer with 7-bit bytes. We also invent natural C type names for this byte size. Now, consider the following structure: struct foo { int7_t x1; int1a_t x2l4l; int28t x3; ¥ Use the \"part” column to label each byte in this structure by the field or part of a field that it belongs to. If it belongs to no field, indicate whether it is padding but part of the structure's size or a byte beyond the end of the structure. Use next column to indicate which byte of that part this is on a little-endian machine. Byte 0is the lowest- order byte (i, the \"1s\" place of the numeric value); byte 11s the next-lowest-order byte (the \"2” or 1285 place\"); and so on. f the byte is padding or beyond the end of the struct, choose \"none\". In the final column, indicate which byte of that part this is on a big-endian machine. (Again, byte number 0 is the lowest-order byte, and choose \"none” if the byte is padding/beyond the end.) o Beyondend v none v none v B Beyondend v none v none v 2 Beyondend v none v none v A Beyondend v none v none v 4 Beyondend v none v none v 5 Beyondend v none v none v 6 Beyondend v none v none v B Beyondend v none v none v s Beyondend v none v none v o Beyondend v none v none v 0 Beyondend v none v none v “ Beyondend v none v none v 2 Beyondend v none v none v “ Beyondend v none v none v “ Beyondend v none v none v . Beyondend v none v none v","libVersion":"0.2.1","langs":"eng"}