{"path":".obsidian/plugins/text-extractor/cache/ad5e601faff8d362042248fc04dd6f1c.json","text":"procedure COUNT-SHORTEST-PATHS(G) > G is an undirected, connected graph with at least one node > compute ¢(z, v), the number of shortest paths, from z to v, for all pairs of nodes (z,v) for all z € V do for each v € [1..n] do cg[v] =0 clz] =1 call MODIFIED-BFS(z) procedure MODIFIED-BFS(s) for each v € [1..n] do ds[v] ¢+ oo Lo < {s}; ds[s] «- 0 d 1 while L4 # V do Lg + 0 for each u € Ly_; do for each v adjacent to u do if ds[v] == oo then add v to Lg; ds[v] + d; plv] «u else if ds[v] == d then csv] csfv] +1 d«—d+1 4. (2 points) Explain briefly why the runtime of Algorithm COUNT-SHORTEST-PATHS from part is O(nm).","libVersion":"0.2.1","langs":"eng"}