{"path":".obsidian/plugins/text-extractor/cache/8eea33d2b7f8374c24d7134cb3ed7f92.json","text":"CP S C 3 1 3 Y8 6 C o n t r o l Fl o w • To p i c • Us i n g c o n d i t i o n c o d e s t o d i r e c t e x e c u t i o n • Co n d i t i o n a l m o v e i n s t r u c t i o n s • Lear ni ng O bj ect i ves • Wr i t e C c o n d i t i o n a l a n d l o o p i n g c o n s t r u c t s i n y 8 6 . • Tr a n s l a t e c o n d i t i o n c o d e c o n f i g u r a t i o n s i n t o a c t i o n s f o r co n d i t i o n a l JM P a n d M O V E i n st r u ct i o n s. • Re a d i n g • 4. 1. 5 1 Th e J M P i n s t r u c t i o n s : • Jum p i nst r uct i ons: jmp , jle , jl , je, jne , jg , jge CP S C 3 1 3 2 JM P 7 0 De s t (a 6 4 - bi t addr ess) Va l ( a 6 4 - bi t val ue) JL E 7 1 De s t (a 6 4 - bi t addr ess) JL 7 2 De s t (a 6 4 - bi t addr ess) JE 7 3 De s t (a 6 4 - bi t addr ess) JN E 7 4 De s t (a 6 4 - bi t addr ess) JG E 7 5 De s t (a 6 4 - bi t addr ess) JG 7 6 De s t (a 6 4 - bi t addr ess) JM P <addr ess> JM P 0x1000 JM P l oop 7 0 00 10 00 00 00 00 00 00 PC < - Dest Co n d i t i o n a l J u m p s • Jum p based on t he st at e of t he condi t i on codes: CP S C 3 1 3 3 Co n d i t i o n Te s t Ze r o fl a g Si gn Fl a g g > 0 0 and 0 !Z F & !S F ge >= 0 0 !S F e == 0 1 ZF ne != 0 0 !Z F le <= 0 1 or 1 ZF | SF l < 0 1 SF • Bl a n k s m e a n t h a t t h e f l a g c a n b e e i t h e r 0 o r 1 Co d e E x a m p l e : J u m p # Using the conditional jump instructions # to compare two numbers. # Let's operate on our 'parameters' # in registers rsi and rdi and our result # in % rax irmovq 0xff, % rsi irmovq 0x1, % rdi # rax = rsi > rdi ? 1 : 0 irmovq 1, % rax # initialize the result rrmovq % rsi , %r10 subq % rdi , %r10 # if % rdi was greater than % rsi , we want # to return 1, which is what we already # set % rax to, so we can go on to the next # example jg next1 irmovq 0, % rax # Return 0 CP S C 3 1 3 4 # rax = rsi == rdi ? 1 : 0 next1: irmovq 1, % rax # Initialize % rax rrmovq % rsi , %r10 subq % rdi , %r10 # Once again, if the condition holds, we # are done, because we initialized % rax to 1 je next2 irmovq 0, % rax # Return 0 # rax = rsi >= 0 next2: irmovq 1, % rax # Initialize to 1 andq %r10, %r10 # if result should be 1, we're all set jge done # Jump if true irmovq 0, % rax # else, return 0 done: halt Th e N i f t y C o n d i t i o n a l M o v e • Re c a l l t h a t we h a d a fun fi e l d fo r R R M O V Q CP S C 3 1 3 5 2 - by t e i ns t r uc t i on 2 0 rA rB RR MOV Q %r8, %r9 2 0 8 9 • Th e CM O V x x in s t r u c t io n s u s e t h e c o n d it io n c o d e s t o pr ovi de condi t i onal m oves. #Compare rsi and rdi irmovq 1, % rax rrmovq % rsi , %r10 subq % rdi , %r10 jxx L1 irmovq 0, % rax L1: #Compare rsi and rdi irmovq 0, % rax irmovq 1, %r11 rrmovq % rsi , %r10 subq % rdi , %r10 cmovxx %r11, % rax Co d e E x a m p l e : CM OV # Using the conditional move instructions # to compare two numbers. irmovq 0xff, % rsi irmovq 0x1, % rdi irmovq 0x1, %r11 # for return 1 # rax = rsi > rdi ? 1 : 0 irmovq 0, % rax # Initialize result to 0 rrmovq % rsi , %r10 subq % rdi , % rsi cmovg %r11, % rax # Change result if condition is true # rax = rsi == rdi ? 1 : 0 irmovq 0, % rax # Initialize results to 0 rrmovq % rsi , %r10 subq % rdi , %r10 cmove %r11, % rax # Change result if condition is true # rax = rsi >= 0 irmovq 0, % rax # Initialize results to 0 andq %r10, %r10 # Sets flags based on value # if result should be 1, we're all set cmovge %r11, % rax # Change result if condition is true halt CP S C 3 1 3 6","libVersion":"0.2.1","langs":""}