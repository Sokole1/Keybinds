{"path":".obsidian/plugins/text-extractor/cache/48454b98dda00a6f4da125776e28b772.json","text":"CPSC 320 2023W2: Assignment 5 This assignment is due on Thursday Dec 7 at 10pm on Gradescope. Assignments submitted before noon on Friday will be accepted, but a penalty of 15% will be applied. Please follow the guidelines provided in Assignment 1. 1 List of names of group members (as listed on Canvas) Provide the list here. This is worth 1 mark. Include student numbers as a secondary failsafe if you wish. 2 Statement on collaboration and use of resources To develop good practices in doing homeworks, citing resources and acknowledging input from others, please complete the following. This question is worth 2 marks. 1. All group members have read and followed the guidelines for groupwork on assignments given on the website (see https://www.students.cs.ubc.ca/~cs-320/2021S2/coursework.html, under Assignments). Yes No 2. We used the following resources (list books, online sources, etc. that you consulted): 3. One or more of us consulted with course staﬀ during oﬃce hours. Yes No 4. One or more of us collaborated with other CPSC 320 students; none of us took written notes during our consultations and we took at least a half-hour break afterwards. Yes No If yes, please list their name(s) here: 5. One or more of us collaborated with or consulted others outside of CPSC 320; none of us took written notes during our consultations and we took at least a half-hour break afterwards. Yes No If yes, please list their name(s) here: 1 3 Weak Clique A weak clique of an undirected, unweighted graph G = (V, E) is a set S ⊆ V , such that the distance between any pair of distinct vertices in S is at most 2. The Weak Clique optimization problem is to ﬁnd the largest weak clique in G. The Weak Clique problem is closely related to the better-known Clique decision problem, which we’ll refer to as Clique. An instance I of Clique is an undirected, unweighted graph G = (V, E) and a nonnegative integer k, and the problem is to determine whether there is a subset S of nodes of V of size k such that every pair of nodes in S is connected by an edge of E. Here you’ll go through the steps of showing that the decision version of Weak Clique is NP-complete. 1. (1 mark) Describe a decision version of the Weak Clique problem. We’ll refer to this problem as WC. An instance of the WC problem is an undirected graph G = (V, E) and a nonnegative integer k. What is the Yes/No problem, or question? 2. (3 marks) Show that WC is in NP. 3. (4 marks) Here is a reduction that maps instances I of Clique, to instances I ′ of WC (Clique ≤p WC). For this reduction, show that I is a Yes-instance of Clique if and only if I ′ is a Yes-instance of SC. Reduction: Given instance I = (G = (V, E), k) of Clique, where |V | = n and |E| = m, instance I ′ = (G′ = (V ′, E′), k′) of WC is as follows. The set V ′ is V ∪ VE, where VE = {ue | e ∈ E} is a new set of m vertices, one per edge of G. There are two types of edges in E′: • Edges (v, ue), (x, ue) for each edge e = (v, x) of G. • Edges (ue, ue′) for each pair of nodes ue and ue′ of VE. Finally, we’ll set k′ = k + m. This completes our description of I ′. (a) Show that if I is a Yes-instance of Clique, then I ′ is a Yes-instance of WC. (b) Show that if I ′ is a Yes-instance of WC, then I is a Yes-instance of Clique. 4. (2 marks) Brieﬂy explain why the reduction can be computed in polynomial time. 2 4 From Decisions to Solutions Suppose that we have a procedure, Satisfiable(ϕ), that solves the SAT decision problem. That is, given an instance ϕ of SAT, Satisfiable(ϕ) outputs \"Yes\" if ϕ is satisﬁable, and \"No\" otherwise. It will be convenient to assume that this procedure outputs \"Yes\" if the SAT instance has no clauses. Can we use this to ﬁnd a satisfying assignment for ϕ, if one exists? In what follows, suppose that ϕ is indeed a satisﬁable instance of SAT, where the set of variables of ϕ is a subset of {x1, x2, . . . , xn}. 1. (1 mark) First suppose that ϕ has a clause in which all literals are xi, or they are all xi. We’ll call such clauses all-xi and all-xi clauses. For example, the clause (x5 ∨ x5 ∨ x5 ∨ x5) is an all-x5 clause. What can we say about the truth value of xi in a satisfying assignment for ϕ in such cases? (Your answer should not be just for the speciﬁc example given.) 2. Now, suppose that ϕ does not contain an all-xi clause. We could ﬁx the truth value of xi to T (True), call the Satisfiable() procedure on the smaller instance obtained by plugging in this truth value, and see what we can learn. This smaller instance, which we’ll call ϕxi=T , is the SAT instance returned by the following procedure when V = T : procedure Simplify(ϕ, i, V ) ▷ ϕ is a satisﬁable SAT instance such that: ▷ if V = T then ϕ contains no all-xi clause, and ▷ if V = F then ϕ contains no all-xi clause ϕ′ ← ϕ if V == T then remove any clause containing xi from ϕ′ remove all occurrences of literal xi from clauses of ϕ′ if V == F then remove any clause containing xi from ϕ′ remove all occurrences of literal xi from clauses of ϕ′ return the resulting SAT instance ϕ′ (which may be empty) Similarly, let ϕxi=F be the SAT instance returned by the procedure when V = F , assuming that ϕ has no all-xi clause. For example, if ϕ is (x1 ∨ x2 ∨ x3 ∨ x4) ∧ (x2 ∨ x3 ∨ x5) ∧ (x1 ∨ x2 ∨ x3), then when we plug in T for x1 we get: (T ∨ x2 ∨ x3 ∨ x4) ∧ (x2 ∨ x3 ∨ x5) ∧ (F ∨ x2 ∨ x3), and so ϕx1=T is (x2 ∨ x3 ∨ x5) ∧ (x2 ∨ x3). (a) (1 mark) Suppose that ϕ is satisﬁable, contains no all-xi clause, and Satisfiable(ϕ1,T ) returns True. Which, if any, of the following statements must be true? Check all that apply. There is a satisfying assignment for ϕ in which x1 is True. There is a satisfying assignment for ϕ in which x1 is False. (b) (1 mark) Suppose that ϕ is satisﬁable, contains no all-xi clause, and Satisfiable(ϕ1,T ) returns True. Which, if any, of the following statements must be true? Check all that apply. There is no satisfying assignment for ϕ in which x1 is True. There is no satisfying assignment for ϕ in which x1 is False. 3 (c) (1 mark) Suppose that ϕ is satisﬁable, contains no all-xi clause, and Satisfiable(ϕ1,T ) returns False. Which, if any, of the following statements must be true? Check all that apply. There is a satisfying assignment for ϕ in which x1 is True. There is a satisfying assignment for ϕ in which x1 is False. 3. (4 marks) Write an algorithm that uses the Satisfiable procedure to determine a truth assignment for instance ϕ of SAT, given that ϕ does have such a truth assignment. Your algorithm may make multiple calls to the Satisfiable procedure, and should run in polynomial time not counting the time for calls to the Satisfiable procedure. Your algorithm can also call the Simplfy procedure, which does run in polynomial time. You do not need to explain why your algorithm is correct, or explain its runtime. 4 5 Strategically Placed Krispy Kremes This SPKK problem is also in Tutorial 10. UBC Rec student leaders are planning their next fundraiser, and are seeking your help in identifying strategic locations to set up their stands of Krispy Kremes. They have a map showing n locations of buildings and outdoor spots on campus. Their k stands need to be set up in the outdoor spots. They want you to select k spots such that the maximum distance from any of the n locations to a stand is as small as possible. An instance of the Strategically Placed Krispy Kremes decision problem (SPKK) has a set V of size n, a subset S of V , an integer k, 1 ≤ k ≤ |S|, and a symmetric matrix d[1..n][1..n], plus an additional nonnegative integer b. The problem is to determine if there is a subset S′ ⊆ S of size k, such that max v∈V min s∈S′{d[v][s] | s ∈ S′} ≤ b. 1. (8 marks) Choose an NP-complete problem from those you’ve already seen, and show a re- duction from this problem to SPKK. Brieﬂy justify why the reduction is polynomial-time (one sentence is suﬃcient). Carefully explain why your reduction is correct (two paragraphs is suﬃcient). 5","libVersion":"0.2.1","langs":""}