{"path":".obsidian/plugins/text-extractor/cache/0b9e5c6f2c5069b7ec637a26ee256e27.json","text":"CPSC 320 2023W1: Tutorial 9 1 Edit distance Let X = x1x2...xn and Y = y1y2...ym be strings over some ﬁxed alphabet Σ. • An insertion of “a” in X at position i yields the string x1x2...xiaxi+1...xn (of length n + 1). • A deletion at position i of X yields x1...xi−1xi+1...xn (of length n − 1). For example, if X = “tree” then an insertion of “h” at positions 0 or 1 yield “htree” or “three” respectively, and a deletion at position 2 of X yields “tee”. The edit distance between X and Y is the minimum number of insertions and deletions to get string Y from string X (or vice versa). 1. What is the edit distance between X = “fence” and Y = “wicked”? 2. Let ED(n, m) be the edit distance between strings X[1..n] and Y [1..m]. Express ED(n, m) as a recurrence. Make sure to include appropriate base cases. Hint: think about the longest common subsequence problem discussed in class. 3. We already have eﬃcient algorithms to ﬁnd the LLCS of two strings. Can we use that algorithm to ﬁnd the edit distance between X and Y ? That is, can you ﬁnd a reduction from the Edit Distance problem to the LLCS problem? 1 2 Hospitals and Residents A group of residents each needs a residency in some hospital. A group of hospitals H each need some number (one or more) of residents from some set R, with some hospitals needing more and some fewer. Each group has preferences over which member of the other group they’d like to end up with. The total number of slots in hospitals is exactly equal to the total number of residents. Our problem, which we’ll call RPH, is to ﬁll the hospitals slots with residents in such a way that no resident and hospital that weren’t matched up will collude to get around our suggestion (and give the resident a position at that hospital instead). Let n = |R| (the size of the set of residents). Note that |H| ≤ |R|, but H may be much smaller. Let s(h) denote the number of slots in hospital h, where n = ∑ h∈H s(h). That is, there are exactly enough slots for the residents. In a valid solution, each resident must appear in exactly one tuple (be paired with one hospital), while each hospital h must appear in exactly s(h) tuples (be paired with as many residents as it has slots). An instability arises when some hospital h is matched with residents Hh = {r′ 1, r′ 2, ...r′ s(h)} and some resident r is matched with h′, such that r prefers h to h′ and h prefers r to its lowest-ranked member in Hh. Describe an approach to solve RHP by reducing it to some problem B that you know already has an eﬃcient algorithm. 1. Choose a problem B to reduce to. 2. Design an algorithm to transform any instance I of RHP into an instance I ′ of B. 3. Design an algorithm to transform a solution S′ for I ′ of B into a solution S for instance I of. RHP. 4. Explain why your reduction produces a correct solution for any RHP instance: if S′ is a good solution for the instance I ′ produced by part (i) of your reduction, then part (ii) of your reduction transforms S′ info to a good (i.e., valid and stable) solution S for the original instance I of RHP. 2","libVersion":"0.2.1","langs":""}