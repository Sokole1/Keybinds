{"path":".obsidian/plugins/text-extractor/cache/5e5bde61c690e5fafbae1b16b3ba0409.json","text":"7. Show, by filling in the blanks below, how you would transform a clause with k£ > 3 literals (Vi Vv... Vi) into clauses with three literals (keeping in mind overall reduction correctness). You can use new variables that have not already been \"used up\", starting with z;41 (where i > n). How many clauses do you get? What would be the runtime of an algorithm to do this, as a function of k? (LWViVzi) AN (@i VBV )A(Ziqa Vi Vrgs)A. .. A (Elur(j,g) Vv lj \\ Zl-Jr(j,l)) A AN @ity V-2V YA @iy-3) Vi1V ___ ). 4 8. Let’s use the name TRANSFORM-CLAUSE to refer to the algorithm for transforming a clause, as described in part [7} Suppose that I’ is obtained from I by transforming clause (I1 Vlz...V l;) using algorithm TRANSFORM-CLAUSE. Explain why I is satisfiable if and only if I’ is satisfiable.","libVersion":"0.2.1","langs":"eng"}