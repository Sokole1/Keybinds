{"path":".obsidian/plugins/text-extractor/cache/37b0b3d6eb0ad9d9177cc84252842792.json","text":"8. Give a dynamic programming solution that produces the same table as the memoized solution. SOLUTION: We need to find an order to traverse the table such that by the time we require the value of any table cell, it has already been calculated. There are many working orders, but we’ll fill in the table column by column, from top to bottom. We don’t need to initialize the table entries in this algorithm, we fill them in directly as we go. procedure DP-LLCS(A[1..n], B[1..m]) create a 2-dimensional array Soln|0..n|[0..m] > fill in the base cases for ¢ from 0 to n do Soln[#][0] « 0 for j from 1 to m do Soln[0][5] « 0 > fill in the recursive cases column-by-column, top-to-bottom for i from 1 to n do for j from 1 to m do if A[i] = B[j] then Soln[i][j] + Soln[i —1][j —1] + 1 else Soln[i][j] + max{ Soln[i — 1][;], Soln[é][j — 1] } return Soln|n|[m|","libVersion":"0.2.1","langs":"eng"}