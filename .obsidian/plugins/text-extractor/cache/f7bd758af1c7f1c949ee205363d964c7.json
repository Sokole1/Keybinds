{"path":".obsidian/plugins/text-extractor/cache/f7bd758af1c7f1c949ee205363d964c7.json","text":"5. This problem concerns return times of simple random walk on Z¢ in dimensions d = 1,2. Let So,S1,... denote d-dimensional symmetric simple random walk started at the origin. Let 7@ = min{n > 1: S, = 0} be the first return time to the origin. Since the random walk is recurrent for d = 1,2, 7(9) is a finite random variable. It is know that, as n — oo, 9\\1/2 Z 2 ifd=1 P(r®>n) ~ () @ n(logn)™' ifd=2. We will observe this result through simulations in Python. Submit your code and plots and answers to the questions. Parts (b) and (c) involve performing linear regression in Python. This is explained in the tutorial file available at: http://waw.math.ubc. ca/~geoff/courses/W2019T2/LR_tutorial.pdf. (a) Write a function tau(t,d) that receives as inputs ¢ > 0 and d € {1,2} and runs a simulation of So, ..., Sr, where 7' = min(r(?, t), and returns: 7(d) if the random walk returns to the origin before or at time t float('inf’) otherwise. Notes (i) “float(inf’)” is a Python command that behaves like \"infinity”. It is bigger than z for any real number . (ii) For the sake of efficiency, it is important that the above function only generates the random walk until time 7 = min(7(¥,¢), rather than always generating it until time ¢. If necessary, you can use the command break to interrupt a loop.","libVersion":"0.2.1","langs":"eng"}