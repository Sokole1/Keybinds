{"path":".obsidian/plugins/text-extractor/cache/f52ad6688b6040ce8955673fb3f26166.json","text":"CPSC 340: Machine Learning and Data Mining More Linear Classifiers Last Time: Classification using Regression and SVMs • Binary classification using sign of linear models: • We considered different training “error” functions: – Squared error: (oi – yi)2. • If yi = +1 and oi = +100, then squared error (oi – yi)2 is huge. – 0-1 classification error: (sign(oi) = yi)? • Non-convex and hard to minimize in terms of ‘w’ (unless optimal error is 0). – Degenerate convex approximation to 0-1 error: max{0,-yioi}. • Has a degenerate solution of 0. – Hinge loss: max{0,1-yioi}. • Convex upper bound on number of classification errors. • With L2-regularization, it’s called a support vector machine (SVM). Logistic Loss • We can alternately smooth the degenerate loss with log-sum-exp: • Summing over all examples gives: • This is the “logistic loss” and model is called “logistic regression”. – It’s not degenerate: w=0 now gives an error of log(2) instead of 0. – Convex and differentiable: minimize this with gradient descent. – You should also add regularization. – We will see later that it has a probabilistic interpretation. Convex Approximations to 0-1 LossLogistic Regression and SVMs • Logistic regression and SVMs are used EVERYWHERE! – Fast training and testing. • Training on huge datasets using “stochastic” gradient descent (next week). • Prediction is just computing wTxi and then taking sign. – Weights wj are easy to understand. • It’s how much wj changes the prediction and in what direction. – We can often get a good good test error. • With low-dimensional features using RBFs and regularization. • With high-dimensional features and regularization. – Smoother predictions than random forests. Comparison of “Black Box” Classifiers • Fernandez-Delgado et al. [2014]: – “Do we Need Hundreds of Classifiers to Solve Real World Classification Problems?” • Compared 179 classifiers on 121 datasets. • Random forests are most likely to be the best classifier. • Next best class of methods was SVMs (L2-regularization, RBFs). • “Why should I care about logistic regression if I know about deep learning?” Next Topic: Maximizing the Margin Maximum-Margin Perspective • Consider a linearly-separable dataset. Maximum-Margin Perspective • Consider a linearly-separable dataset. – Perceptron algorithm finds some classifier with zero error. – But are all zero-error classifiers equally good? Maximum-Margin Perspective • Consider a linearly-separable dataset. – Maximum-margin classifier: choose the farthest from both classes. Maximum-Margin Perspective • Consider a linearly-separable dataset. – Maximum-margin classifier: choose the farthest from both classes. Maximum-Margin Perspective • Consider a linearly-separable dataset. – Maximum-margin classifier: choose the farthest from both classes. Maximum-Margin Perspective • For linearly-separable data: • With small-enough λ > 0, SVMs find the maximum-margin classifier. – Need λ small enough that hinge loss is 0 in solution. – Origin of the name: the “support vectors” are the points closest to the line (see bonus). • Recent result: logistic regression also finds maximum-margin classifier. – With λ=0 and if you fit it with gradient descent (not true for many other optimizers). Next Topic: Converting to Probabilities Previously: Identifying Important E-mails • Recall problem of identifying ‘important’ e-mails: • We can do binary classification by taking sign of linear model: – Convex loss functions (hinge/logistic loss) let us find an appropriate ‘w’. • But what if we want a probabilistic classifier? – Want a model of p(yi = “important” | xi) for use in decision theory. Predictions vs. Probabilities • With oi = wTxi, linear classifiers make prediction using sign(oi): • For predictions, “sign” maps from oi to the elements {-1,+1}. – If oi is positive we predict +1, if oi negative we predict -1. • For probabilities, we want to map from oi to the range [0,1]. – If oi is very positive, we output a value close to +1 (confident yi=1). – If oi is very negative, we output a value close to 0 (confident yi=-1). – If oi is close to 0, we output a value close to 0.5 (classes equally likely). • So we want a transformation of oi = wTxi that looks like this: • The most common choice is the sigmoid function: • Values of h(oi) match what we want: Sigmoid FunctionProbabilities for Linear Classifiers using Sigmoid • Using sigmoid function, we output probabilities for linear models using: • Visualization for 2 features: https://www.youtube.com/watch?v=Zc7ouSD0DEQ Probabilities for Linear Classifiers using Sigmoid • Using sigmoid function, we output probabilities for linear models using: • By rules of probability: • We then use these for “probability that e-mail is important”. • This may seem heuristic, but later we’ll see that: – Minimizing logistic loss does “maximum likelihood estimation” in this model. Next Topic: Multi-Class Linear Classifiers Multi-Class Linear Classification • We have been considering linear models for binary classification: • E.g., is there a cat in this image or not? https://www.youtube.com/watch?v=tntOCGkgt98 Multi-Class Linear Classification • Today we will discuss linear models for multi-class classification: • For example, classify image as “cat”, “dog”, or “person”. – This was natural for methods of Part 1 (decision trees, naïve Bayes, KNN). – For linear models, we need some new notation. “One vs All” Classification • Suppose you only know how to do binary classification: – “One vs all” is a way to turn a binary classifier into a multi-class method. • Training phase: – For each class ‘c’, train binary classifier to predict whether example is a ‘c’. • For example, train a “cat detector”, a “dog detector”, and a “human detector”. • If we have ‘ℓ’ possible labels/classes, this gives ‘ℓ’ binary classifiers . • Prediction phase: – Apply the ‘ℓ’ binary classifiers to get a “score” for each class ‘c’. – Predict the ‘c’ with the highest score. “One vs All” Linear Classification • “One vs all” logistic regression for classifying as cat/dog/person. – Train a separate classifier for each class. • Classifier 1 tries to predict +1 for “cat” images and -1 for “dog” and “person” images. • Classifier 2 tries to predict +1 for “dog” images and -1 for “cat” and “person” images. • Classifier 3 tries to predict +1 for “person” images and -1 for “cat” and “dog” images. – This gives us a weight vector wc for each class ‘c’. • Trained to have output oic = wcTxi having sign(oic)= +1 for true class ‘c’. – And sign(oic’)=-1 for other classes c’. “One vs All” Linear Classification • With ℓ classes, one vs. all trains ℓ binary classifiers w1, w2,…, wℓ • To make predictions with these classifiers: – Ideally, sign(oic) = +1 for one ‘c’ and sign(oic’) = -1 for all other classes c’. • In practice, it might be +1 for multiple classes or no class. – To predict class, we take maximum value of oic (“highest score”). • In the example above, predict “human” (0.9 is higher than -0.8 and 0.1). Digression: Multi-Label Classification • A related problem is multi-label classification: • Which of the ‘ℓ’ objects are in this image? – There may be more than one “correct” class label. – Here we can also fit ‘ℓ’ binary classifiers. • But we would take all the sign(oic)=+1 as the labels. http://image-net.org/challenges/LSVRC/2013/ Multi-Class Linear Classification (MEMORIZE) • Notation for multi-class linear classifiers: • We’ll use ‘ ’ as classifier where c=yi (weights of correct class). – So if yi=2 then = w2, and = oic. • Similar matrix ‘W’ used in k-means (here k=ℓ, number of classes). “One vs All” Multi-Class Linear Classification • Problem: We didn’t train the wc so that c=yi would maximize oic. – Each classifier is just trying to get the sign right. – Here the classifier incorrectly predicts “dog”. • “One vs All” doesn’t try to put oi2 and oi3 on same scale for decisions like this. • We should try to make oi3 positive and oi2 negative relative to each other. • The multi-class hinge losses and the multi-class logistic loss do this. https://laughingsquid.com/pug-mask-a-latex-mask-so-you-can-look-like-a-dog/ Multi-Class SVMs • Can we define a loss that encourages c=yi to maximize oic? – So when we maximizing over oic, we choose correct label yi. • Recall our derivation of the hinge loss (SVMs) with one output oi. – We wanted yioi > 0 for all ‘i’ to classify correctly. – We avoided non-degeneracy by aiming for yioi ≥ 1. – We used the constraint violation as our loss: max{0,1-yioi}. • We can derive multi-class SVMs using the same steps… Multi-Class SVMs • Can we define a loss that encourages c=yi to maximize oic? • For here, there are two ways to measure constraint violation: Multi-Class SVMs • Can we define a loss that encourages c=yi to maximize oic? • For each training example ‘i’: – “Sum” rule penalizes for each ‘c’ that violates the constraint. – “Max” rule penalizes for one ‘c’ that violates the constraint the most. • “Sum” gives a penalty of ‘k-1’ for W=0, “max” gives a penalty of ‘1’. • If we add L2-regularization, both are called multi-class SVMs: – “Max” rule is more popular, “sum” rule usually works better. – Both are convex upper bounds on the 0-1 loss. Multi-Class Logistic Regression • We derived binary logistic loss by smoothing a degenerate ‘max’. – A degenerate constraint in the multi-class case can be written as: • We want the right side to be as small as possible. • Let’s smooth the max with the log-sum-exp: – This is no longer degenerate: with W=0 this gives a loss of log(ℓ). • Called the softmax loss, the loss for multi-class logistic regression. Multi-Class Logistic Regression • We sum the loss over examples and add regularization: • This objective is convex (should be clear for 1st and 3rd terms). – It is differentiable so you can use gradient descent. • When ℓ=2, equivalent to using binary logistic loss. – Not obvious at the moment. Multi-Class Linear Prediction in Matrix Notation • In multi-class linear classifiers our weights are: • To predict on all training examples, we first compute all wcTxi. – Or in matrix notation: – So predictions are maximum column indices of XWT (which is ‘n’ by ‘ℓ’). Digression: Frobenius Norm • The Frobenius norm of a (‘ℓ’ by ‘d’) matrix ‘W’ is defined by: • We can use this to write regularizer in matrix notation: Summary • Logistic loss uses a smooth convex approximation to the 0-1 loss. • SVMs and logistic regression are very widely-used. – A lot of ML consulting: “find good features, use L2-regularized logistic/SVM”. – Under certain conditions, can be viewed as “maximizing the margin”. – Both are just linear classifiers (a hyperplane dividing into two halfspaces). • Sigmoid function is a way to turn linear predictions into probabilities. • One vs all turns a binary classifier into a multi-class classifier. • Multi-class SVMs measure violation of classification constraints. • Softmax loss is a multi-class version of logistic loss. • Next time: what makes good features? Hinge-Loss Perceptron • A perceptron-like algorithm for minimizing the hinge loss: – Start with any w0. – Go through examples until you find an example with yiwTxi > 1. • Set wt+1 = wt + 1−𝑦𝑖(𝑤𝑡)𝑇𝑥𝑖 𝑥𝑖 𝑇𝑥𝑖 yixi (minimum change to wt that satisfies constraint). • If a classifier with hinge loss of 0 exists, this converges to one. – Looks like perceptron, but with a step size added to update (green term). • Get perceptron algorithm if you replace green term with ‘1’. – A special case of the “projection onto convex sets” (POCS) algorithm. Maximum-Margin Classifier • Consider a linearly-separable dataset. – Maximum-margin classifier: choose the farthest from both classes. Maximum-Margin Classifier • Consider a linearly-separable dataset. – Maximum-margin classifier: choose the farthest from both classes. Maximum-Margin Classifier • Consider a linearly-separable dataset. – Maximum-margin classifier: choose the farthest from both classes. Support Vector Machines • For linearly-separable data, SVM minimizes: – Subject to the constraints that: (see Wikipedia/textbooks) • But most data is not linearly separable. • For non-separable data, try to minimize violation of constraints: Support Vector Machines • Try to maximizing margin and also minimizing constraint violation: • We typically control margin/violation trade-off with parameter “λ”: • This is the standard SVM formulation (L2-regularized hinge). – Some formulations use λ = 1 and multiply hinge by ‘C’ (equivalent). Support Vector Machines for Non-Separable • Non-separable case: Support Vector Machines for Non-Separable • Non-separable case: Support Vector Machines for Non-Separable • Non-separable case: Support Vector Machines for Non-Separable • Non-separable case: Discussion of Various Linear Classifiers • Perceptron vs. logistic vs. SVM: – These linear classifiers are all extremely similar. They are basically just variations on reasonable methods to learn a classifier that uses the rule $$\\hat{y}_i = \\text{sign}(w^Tx_i)$$. (The online vs. offline issue is a red herring, you can train logistic/SVMs online using stochastic gradient and you can write a linear program that will give you a minimizer of the perceptron objective). – If you want to explore the small differences, these are some of the usual arguments: • The perceptron has largely been replaced by logistic/SVM, except in certain subfields like theory (it is easy to prove things about perceptrons) and natural language processing (mostly historical reasons). Perceptrons have the potential disadvantages of non-regularized models (non-uniqueness and potential non-existence of the solution, potential high sensitivity to small changes in the data, and non-robustness to irrelevant features). However, perceptrons do not interact well with regularization: if you add L2-regularization and the dataset is linearly-separable, then the solution only exists as a limit and it is actually $$w=0$$ (although it may still work in practice). • A usual criticism of logistic regression by people that favour SVMs is that, if the data is linearly separable, then the solution only exists as a limit as some elements $$w$$ go to plus or minus $$\\infty$$. However, this argument disappears if you add regularization. A second argument traditionally made by SVM people is that you can't kernelize logistic regression, but this is now known to be incorrect (we'll cover a general kernelization strategy for L2- regularized linear classifiers in one of the next two classes). • The remaining differences between logistic and SVMs is that logistic regression is smooth while SVMs have support vectors. This means that the logistic regression training problem is easier from an optimization perspective (we'll get to this next class). But if you have very few support vectors, you can only take advantage of this with SVMs (or perceptrons), and this is especially important if you are using kernels. • Regarding other linear predictors for binary classification, there are a few more: – Probit regression uses the Gaussian CDF in place of the logistic sigmoid function. This has very similar properties to logistic regression, but it's harder to generalize to the multi-class case (while probit regression is better if you are using a “Bayesian” estimator). You could actually use any CDF as your sigmoid function, and if there is some asymmetry between the classes using an extreme value distribution is sometimes advocated in statistics. – In neural networks, they sometimes use tanh in place of the logistic sigmoid function, and the reason to do this is to get values into the interval [-1,1] instead of [0,1]. – If you want to keep support vectors but get a smooth optimization problem, you can square the hinge loss (making it once but not twice differentiable), and this is called smooth SVMs. Alternately, you could replace the non-differentiable kink with a small smooth part, and this is called Huberized SVMs. – Finally, some people actually just apply least squares to classification problems. If you use a flexible enough basis/kernel, then the 'bad' errors may not actually be that harmful. Robustness and Convex Approximations • Because the hinge/logistic grow like absolute value for mistakes, they tend not to be affected by a small number of outliers. Robustness and Convex Approximations • Because the hinge/logistic grow like absolute value for mistakes, they tend not to be affected by a small number of outliers. • But performance degrades if we have many outliers. Non-Convex 0-1 Approximations • There exists some smooth non-convex 0-1 approximations. – Robust to many/extreme outliers. – Still NP-hard to minimize. – But can use gradient descent. • Finds “local” optimum. “Robust” Logistic Regression • A recent idea: add a “fudge factor” vi for each example. • If wTxi gets the sign wrong, we can “correct” the mis-classification by modifying vi. – This makes the training error lower but doesn’t directly help with test data, because we won’t have the vi for test data. – But having the vi means the ‘w’ parameters don’t need to focus as much on outliers (they can make |vi| big if sign(wTxi) is very wrong). “Robust” Logistic Regression • A recent idea: add a “fudge factor” vi for each example. • If wTxi gets the sign wrong, we can “correct” the mis-classification by modifying vi. • A problem is that we can ignore the ‘w’ and get a tiny training error by just updating the vi variables. • But we want most vi to be zero, so “robust logistic regression” puts an L1-regularizer on the vi values: • You would probably also want to regularize the ‘w’ with different λ. Support Vector Regression • Support vector regression objective (with hyper-parameter 𝜖): – Looks like L2-regularized robust regression with the L1-loss. – But have loss of 0 if ො𝑦𝑖 within 𝜖 of ෤𝑦𝑖. • So doesn’t try to fit data exactly. – This can help fight overfitting. – Support vectors are points with loss>0. • Points outside the “epsilon-tube”. – Example with Gaussian-RBFs as features: 1-Class SVMs • 1-class SVMs for outlier detection. – Variables are ‘w’ (vector) and ‘w0’ (scalar). – Only trains on “inliers”. • Tries to make wTxi bigger than w0 for inliers. • At test time: says “outlier” if wTxi < w0. • Usually used with RBFs. – The above is one possible 1-class formulation, but there are many more. https://scikit-learn.org/stable/auto_examples/svm/plot_oneclass.html","libVersion":"0.2.1","langs":""}