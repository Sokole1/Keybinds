{"path":".obsidian/plugins/text-extractor/cache/78bdf808de5652ec43fff4314659afce.json","text":"4 Dealing with NP-Completeness Most Computer Scientists think \"P ̸= NP\". If that’s true, then there is no correct, deterministic algorithm for any NP-complete problem that runs in polynomial time. Speciﬁcally: if a problem is NP-complete, it’s hopeless to write an algorithm that scales to arbitrarily large problem sizes and deﬁnitely, precisely solves every possible instance of those sizes correctly for exactly that problem. Should we throw our hands up in the air and give up on solving NP-complete problems? List as many ways as you can think of to \"get around\" an NP-complete problem. SOLUTION: We’ll likely discuss things like: solving only \"small\" cases being sometimes good enough, solving (scalable) special cases quickly, approximating the optimal solution (for non-decision problems), and altering the problem to something similar that isn’t NP-complete. 8 5 Sample Final Exam Problems 5.1 Super Mario Brothers is Hard! Determining whether or not a generalized level of the Super Mario Brothers game can be successfully completed (Mario reaches the ﬂag) is NP-hard. That is, if we refer to this decision problem as MARIO, then it is a fact that for any problem X in NP, X ≤p MARIO. (If you’re not familiar with the Super Mario Brothers game, no worries, this fact is all you need. Details of the game are irrelevant for completing this question.) 1. Let’s assume that P ̸= NP. What can we conclude from the fact provided above? Check all that apply. SOLUTION: [X] 3D-Matching ≤p MARIO [ ] MARIO ≤p 3D-Matching 2. Again assume that P ̸= NP. What can we conclude? Check all that apply. Note that the 2D matching problem (which is a decision version of the bipartite matching problem) is in P. SOLUTION: [X] 2D-Matching ≤p MARIO [ ] MARIO ≤p 2D-Matching 3. Finally, let’s consider what happens if P = NP. Again, based on the fact above, what can we conclude? Select all that apply. SOLUTION: [X] 2D-Matching ≤p MARIO [ ] MARIO ≤p 2D-Matching [X] 3D-Matching ≤p MARIO [ ] MARIO ≤p 3D-Matching 5.2 Kindergarten Assignment With schools reopening in the fall, the Vancouver School Board urgently needs to assign each incoming kindergartner to a school. The number of kindergartners that can attend school i is capped at C[i]. The family of each child has provided an unranked set of preferred schools. The Kindergarten Assignment problem is to determine whether all children can be assigned to one of their preferred schools, while ensuring that each school i is assigned at most C[i] kindergartners. Assuming that P ̸= NP, is this problem in P or is it NP-complete? SOLUTION: The problem is in P. It can be reduced to the 2D matching problem described above. 9 5.3 Exam Breakout Rooms A new university rule during COVID-19 stipulates that students who have been collaborating on classwork must be placed in diﬀerent breakout rooms for the ﬁnal exam, and each breakout room must get a diﬀerent version of the exam. Anne and the TAs would like to minimize the number of breakout rooms (and diﬀerent exams that need to be prepared). An instance of the Exam Assignment optimization problem is n lists, where n is the number of students in the class and the ith list provides the classmates that have collaborated with the ith student in the class. The problem is to determine the minimum number of breakout rooms needed, so as to satisfy the university rule. 1. Describe a decision version of the Exam Assignment optimization problem. SOLUTION: Given n lists as above, and a nonnegative integer k, is there a way to assign students to k breakout rooms while satisfying the university rule. 2. Assuming that P ̸= NP, is your decision problem in P or is it NP-complete? SOLUTION: The Graph Colouring problem can be reduced to the Exam Assignment decision problem, and so the problem is NP-complete. 5.4 Weighted 3D Matching This problem is very similar to 3D Matching, except that triples are weighted. An instance of the Weighted 3D-Matching optimization problem consists of three disjoint sets of equal size, namely A = {a1, a2, . . . , an} B = {b1, b2, . . . , bn} C = {c1, c2, . . . , cn} and a collection S of triples of the form (ai, bj, ck). Each triple s ∈ S has an associated weight w(s). The problem is to determine max S′⊆S ∑ s∈S′ w(s), where the max is taken over subsets S′ of S such that no two triples of S′ share a common element. 1. Describe a decision version of the Weighted 3D-Matching optimization problem. SOLUTION: Given three disjoint sets A, B, and C, a collection S of weighted triples as above, plus a nonnegative weight w, is there a subset of S’ of size k such that no two triples in the subset share a common element, and such that ∑ s∈S′ w(s) ≥ w? 2. Assuming that P ̸= NP, is your decision problem in P or is it NP-complete? SOLUTION: The problem is NP-complete, since the unweighted 3D matching problem can be reduced to the weighted one. 10","libVersion":"0.2.1","langs":""}