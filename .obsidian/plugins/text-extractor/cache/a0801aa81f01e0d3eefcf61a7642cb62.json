{"path":".obsidian/plugins/text-extractor/cache/a0801aa81f01e0d3eefcf61a7642cb62.json","text":"2. (2 points) An instance of the Graph Isomorphism (GI) problem is a pair of undirected, con- nected graphs G = (V, E) and G’ = (V, E’). The output is “yes” if the graphs are isomorphic, and “no” if not. For many decades, researchers have sought efficient algorithms for Graph Isomorphism. One breakthrough, back in 1983, was Eugene Luks’ algorithm with runtime L(n) = exp(©(y/nlogn)), where n is the number of nodes of the graph. Here, exp(z) is e®. That is, for some constants cr, > 0 and ¢}, > 0, and sufficiently large n, exp(cy,v/nlogn) < L(n) < exp(cry/nlogn). More recently, Lazlo Babai has found an algorithm with runtime B(n) = exp((logn)®™). Explain this notation by writing down upper and lower bounds for Babai’s runtime B(n), similar to the bounds for Luk’s algorithm above. exp ((log n)CIB) < B(n) < exp ((logn)°2) for some constants cg > 0 and c¢jz > 0. So B(n) is bounded by logn raised to some powers raised to the power of e. 3. (4 points) Show that Babai’s algorithm beats Luk’s algorithm, by showing that B(n) = o(L(n)).","libVersion":"0.2.1","langs":"eng"}