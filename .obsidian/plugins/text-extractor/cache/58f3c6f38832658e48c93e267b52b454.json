{"path":".obsidian/plugins/text-extractor/cache/58f3c6f38832658e48c93e267b52b454.json","text":"3 Evaluate brute force. As is often the case, this approach will lead us to even better approaches later on. It will be helpful to write our brute force algorithm recursively. We’ll build up to that in several steps. 1. To make the change, you must start by handing the customer some coin. What are your options? 2. Imagine that in order to make n = 81 cents of change using the minimum number of coins, you can start by handing the customer a quarter. Clearly describe the subproblem you are left with (but don’t solve it). You can use the notation above in the formal problem specification. 3. Even if we're not sure that a quarter is an optimal move, we can still get an upper bound on the number of coins by considering the subproblem we are left with when we start with a quarter. What upper bound do we get on C(81)? 4. What other upper bounds on C(81) do we get if we consider each of the other \"first coin\" options (besides a quarter), and the corresponding subproblem? 5. There are three choices of coin to give first. Can you express C(81) as the minimum of three options?","libVersion":"0.2.1","langs":"eng"}