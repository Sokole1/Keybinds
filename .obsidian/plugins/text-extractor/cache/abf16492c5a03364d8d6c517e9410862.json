{"path":".obsidian/plugins/text-extractor/cache/abf16492c5a03364d8d6c517e9410862.json","text":"Des ign P r inciples Topics CP S C 310: Introduction to S oftware E ngineer ing E xaminab le S kills The ability to: ● Under s tand the core tens ions which des ign pr inciples tr y to enable. ● Identify des ign pr inciple v iolations . ● Identify how code s mells ar is e and how they v iolate des ign pr inciples . ● E x plain how the pres ence of a v iolation of one pr inciple may lead to the v iolation of other pr inciples (for ins tance, by v iolating the inter face s egregation pr inciple, y ou’ re s etting y our s elf up to v iolate LS P ). ● Fix des ign problems to tak e a s y s tem from v iolating a pr inciple to no longer v iolating that pr inciple, us ually through refactor ing and other code res tr uctur ing. ● Y ou do NO T need to remember each kind of coupling/cohes ion. R emember the names of the bes t and wor s t one of each, and be able to look at code and dis tinguis h between better and wor s e coupling/cohes ion. High L evel Design CP S C 310: Introduction to S oftware E ngineer ing Design p at tern Design p rincip le mot ivates violates e x emp liﬁes Cod e smell “ Listening” to Cod e Refact o rin g CP S C 310: Introduction to S oftware E ngineer ing Design p at tern Design p rincip le mot ivates violates e x emp liﬁes Cod e smell “ Listening” to Cod e Hig h L evel Desig n CP S C 310: Introduction to S oftware E ngineer ing Design p at tern Design p rincip le mot ivates violates e x emp liﬁes Cod e smell “ Listening” to Cod e L o w L evel Desig n CP S C 310: Introduction to S oftware E ngineer ing S oft w are Design P rincip les P r ag m atic P r o g r am m er: E liminate eﬀect s b et w een unrelated t hings b y d esigning comp onent s t hat are: s elf-contained, independent, and hav e a s ingle, well-deﬁ ned pur pos e. CP S C 310: Introduction to S oftware E ngineer ing This was the s ame thing we noted when talking about refactor ing! O r: 1) L ocaliz e changes. 2) E liminate change collisions. P r ag m atic P r o g r am m er: E liminate eﬀect s b et w een unrelated t hings b y d esigning comp onent s t hat are: s elf-contained, independent, and hav e a s ingle, well-deﬁ ned pur pos e. CP S C 310: Introduction to S oftware E ngineer ing CO DE S ME L L S RE F A C T O RING S P RINCIP L E D CO DE ! P rin cip led co d e ARIS E S an d E ME RG E S . W e will e x amine each des ign pr inciple in the conte x t of which code s mells and refactor ings would lead us to attaining that pr inciple in our code. DE S IRE D CHANG E Law of DemeterF eature env y ?! Mov e method refactor ing CHANG E CO MP L E T E CP S C 310: Introduction to S oftware E ngineer ing W hy P rincip led Cod e? Fle xib le ● S hould handle change (lik e new features ). Und erst and ab le ● Code is s hared. Maint ainab le ● E ndure ov er time (eas ily ﬁ nd and ﬁ x bugs ). S ound familiar ? Think back to B rok en Code deﬁ nition. Des ign Guidance Ab str actio n (high lev el concept at the root of all that follows ) • Manage comple x ity by focus ing on k ey as pects for giv en tas k and s tak eholder. • B oth too much abs traction or too little abs traction inhibit under s tanding. • Us eful for dis cus s ing v iewpoints that mak es s ens e for indiv idual s tak eholder s . D ecomp osit ion (mechanis m for ideating about abs tractions ) • Mechanis m for breaking down comple x des cr iption into more manageable pieces . • Goal is to mak e common tas ks s imple while not prohibiting e x ceptional tas ks . • C an be done both top down or bottom up (or both). Informat ion hid ing (how programs lev erage abs traction) • Hides implementation details from high lev el inter faces . • S eparate that which v ar ies from that which s tay s the s ame. • S eparate names from implementations (aka A P I from impl). E ncap sulat ion (language approach for implementing infor mation hiding) • Mechanis m for implementing abs tractions in a program. • Us ually through the us e of language inter faces . • C aptures data and behav iour and s eparate thes e from their implementation. A b st ract ion (high lev el concept at the root of all that follows ) • Manage comple x ity by focus ing on k ey as pects for giv en tas k and s tak eholder. • B oth too much abs traction or too little abs traction inhibit under s tanding. • Us eful for dis cus s ing v iewpoints that mak es s ens e for indiv idual s tak eholder s . D eco m p o sitio n (mechanis m for ideating about abs tractions ) • Mechanis m for breaking down comple x des cr iption into more manageable pieces . • Goal is to mak e common tas ks s imple while not prohibiting e x ceptional tas ks . • C an be done both top down or bottom up (or both). Informat ion hid ing (how programs lev erage abs traction) • Hides implementation details from high lev el inter faces . • S eparate that which v ar ies from that which s tay s the s ame. • S eparate names from implementations (aka A P I from impl). E ncap sulat ion (language approach for implementing infor mation hiding) • Mechanis m for implementing abs tractions in a program. • Us ually through the us e of language inter faces . • C aptures data and behav iour and s eparate thes e from their implementation. A b st ract ion (high lev el concept at the root of all that follows ) • Manage comple x ity by focus ing on k ey as pects for giv en tas k and s tak eholder. • B oth too much abs traction or too little abs traction inhibit under s tanding. • Us eful for dis cus s ing v iewpoints that mak es s ens e for indiv idual s tak eholder s . D ecomp osit ion (mechanis m for ideating about abs tractions ) • Mechanis m for breaking down comple x des cr iption into more manageable pieces . • Goal is to mak e common tas ks s imple while not prohibiting e x ceptional tas ks . • C an be done both top down or bottom up (or both). In fo rm atio n h id in g (how programs lev erage abs traction) • Hides implementation details from high lev el inter faces . • S eparate that which v ar ies from that which s tay s the s ame. • S eparate names from implementations (aka A P I from impl). E ncap sulat ion (language approach for implementing infor mation hiding) • Mechanis m for implementing abs tractions in a program. • Us ually through the us e of language inter faces . • C aptures data and behav iour and s eparate thes e from their implementation. A b st ract ion (high lev el concept at the root of all that follows ) • Manage comple x ity by focus ing on k ey as pects for giv en tas k and s tak eholder. • B oth too much abs traction or too little abs traction inhibit under s tanding. • Us eful for dis cus s ing v iewpoints that mak es s ens e for indiv idual s tak eholder s . D ecomp osit ion (mechanis m for ideating about abs tractions ) • Mechanis m for breaking down comple x des cr iption into more manageable pieces . • Goal is to mak e common tas ks s imple while not prohibiting e x ceptional tas ks . • C an be done both top down or bottom up (or both). Informat ion hid ing (how programs lev erage abs traction) • Hides implementation details from high lev el inter faces . • S eparate that which v ar ies from that which s tay s the s ame. • S eparate names from implementations (aka A P I from impl). E n cap su latio n (language approach for implementing infor mation hiding) • Mechanis m for implementing abs tractions in a program. • Us ually through the us e of language inter faces . • C aptures data and behav iour and s eparates thes e from their implementation. coupling & cohes ion Topics CP S C 310: Introduction to S oftware E ngineer ing • Co u p lin g is the relations hip between modules : • If we mak e a change in one module, what will the impact be on other modules within the s y s tem? • Modules s hould not depend on each other ’ s inter nals . • E as y to couple modules in a way that v iolates architecture. Coup ling Int uit ion CP S C 310: Introduction to S oftware E ngineer ing Coup ling T ight coupling CP S C 310: Introduction to S oftware E ngineer ing Coup ling L oos e coupling T ight coupling CP S C 310: Introduction to S oftware E ngineer ing Coup ling No coupling L oos e coupling T ight coupling CP S C 310: Introduction to S oftware E ngineer ing K ind s of Coup ling CP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ing • Co h esio n is the relations hip between elements within a module: • Modules s hould only contain functions that belong t oget her. • Often obs er v able by the data modiﬁ ed by the functions . • Commonly v iolated ov er time as code ev olv es . • If we mak e a change in one module, what will the impact be on other modules within the s y s tem? • Modules s hould not depend on each other ’ s inter nals . • E as y to couple modules in a way that v iolates architecture. Cohesion Int uit ion CP S C 310: Introduction to S oftware E ngineer ing Cohesion Util L ow cohes ion F eature A F eature B F eature C F eature C F eature A F eature C F eature C CP S C 310: Introduction to S oftware E ngineer ing A Controller Cohesion Util Moderate cohes ion L ow cohes ion F eature A F eature B F eature C F eature C F eature A F eature C F eature C F eature B CController F eature C F eature C F eature C F eature C F eature A F eature A CP S C 310: Introduction to S oftware E ngineer ing A Controller CController Cohesion Util High cohes ion Moderate cohes ion L ow cohes ion F eature A F eature B F eature C F eature C F eature A F eature C F eature C F eature C F eature C F eature C A Controller F eature A F eature A F eature C B Controller F eature B CController F eature C F eature C F eature C F eature C F eature A F eature A F eature B CP S C 310: Introduction to S oftware E ngineer ing K ind s of Cohesion CP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ing Balancing Coup ling and Cohesion CP S C 310: Introduction to S oftware E ngineer ing Module A Module B [https://www .linkedin.com/pulse/software-engineering-principle-coupling-cohesion-mohammad-quanit] CP S C 310: Introduction to S oftware E ngineer ing Module A Module B ● L ots of within-module collaboration. ● Controlled between-module collaboration. ▼ Coup ling ▲ Cohesion CP S C 310: Introduction to S oftware E ngineer ing Module A Module B ● L ots of within-module collaboration. ● Controlled between-module collaboration. ● Little within-module collaboration. ● Common between-module collaboration. ▼ Coup ling ▲ Cohesion ▲ Coup ling ▼ Cohesion ▼ coupling ▲ cohes ion","libVersion":"0.2.1","langs":""}