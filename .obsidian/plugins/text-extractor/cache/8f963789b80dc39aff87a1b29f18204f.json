{"path":".obsidian/plugins/text-extractor/cache/8f963789b80dc39aff87a1b29f18204f.json","text":"CPSC 340: Machine Learning and Data Mining MLE and MAP Last Time: Maximum Likelihood Estimation (MLE) • Maximum likelihood estimation (MLE) for fitting probabilistic models. – We have a dataset D. – We want to pick parameters ‘w’. – We define the likelihood as a probability mass/density function p(D | w). – We choose the model ෝ𝑤 that maximizes the likelihood: • Appealing “consistency” properties as n goes to infinity (take STAT 4XX). – “This is a reasonable thing to do for large data sets”. • Gives naïve Bayes “counting” estimates we used. Least Squares is Gaussian MLE • It turns out that most objectives have an MLE interpretation: – For example, consider minimizing the squared error: – This gives MLE of a linear model with IID noise from a normal distribution: • “Gaussian” is another name for the “normal” distribution. – Remember that least squares solution is called the “normal equations”. Least Squares is Gaussian MLE • It turns out that most objectives have an MLE interpretation: – For example, consider minimizing the squared error: Minimizing the Negative Log-Likelihood (NLL) • To compute maximize likelihood estimate (MLE), usually we equivalently minimize the negative “log-likelihood” (NLL): • “Log-likelihood” is short for “logarithm of the likelihood”. • Why are these equivalent? – Logarithm is strictly monotonic: if α > β, then log(α) > log(β). • So location of maximum doesn’t change if we take logarithm. – Changing sign flips max to min. • See Max and Argmax notes if this seems strange. Minimizing the Negative Log-Likelihood (NLL) • We use log-likelihood because it turns multiplication into addition: • More generally: Least Squares is Gaussian MLE (Gory Details) • Let’s assume that yi = wTxi + εi, with εi following standard normal: • This leads to a Gaussian likelihood for example ‘i’ of the form: • Finding MLE (minimizing NLL) is least squares: Digression: “Generative” vs. “Discriminative” • Notice, that we maximized conditional p(y | X, w), not the likelihood p(y, X | w). – We did MLE “conditioned” on the features ‘X’ being fixed (no “likelihood of X”). – This is called a “discriminative” supervised learning model. – A “generative” model (like naïve Bayes) would optimize p(y, X | w). • Discriminative probabilistic models: – Least squares, robust regression, logistic regression. – Can use complicated features because you don’t model ‘X’. • Example of generative probabilistic models: – Naïve Bayes, linear discriminant analysis (makes Gaussian assumption). – Often need strong assumption because they model ‘X’. • “Folk” belief: generative models are often better with small ‘n’. Loss Functions and Maximum Likelihood Estimation • So least squares is MLE under Gaussian likelihood. • With a Laplace likelihood you would get absolute error. • Other likelihoods lead to different errors (“sigmoid” -> logistic loss). “Heavy” Tails vs. “Light” Tails • We know that L1-norm is more robust than L2-norm. – What does this mean in terms of probabilities? – Gaussian has “light tails”: assumes everything is close to mean. – Laplace has “heavy tails”: assumes some data is far from mean. – Student ‘t’ is even more heavy-tailed/robust, but NLL is non-convex. http://austinrochford.com/posts/2013-09-02-prior-distributions-for-bayesian-regression-using-pymc.html • Recall we got probabilities from binary linear models with sigmoid: 1. The linear model wTxi gives us a number in oi in (-∞, ∞). 2. We mapped oi=wTxi to a probability with the sigmoid function. • We can show that MLE with this model gives logistic loss. Sigmoid: transforming wTxi to a ProbabilitySigmoid: transforming oi to a Probability • We’ll define p(yi = +1 | oi) = h(oi), where ‘h’ is the sigmoid function. • With yi in {-1,+1}, we can write both cases as p(yi | oi) = h(yioi). • So we convert oi=wTxi into “probability of yi” using: • MLE with this likelihood is equivalent to minimizing logistic loss. MLE Interpretation of Logistic Regression • For IID regression problems the conditional NLL can be written: • Logistic regression assumes sigmoid(wTxi) conditional likelihood: • Plugging in the sigmoid likelihood, the NLL is the logistic loss: MLE Interpretation of Logistic Regression • We just derived the logistic loss from the perspective of MLE. – Instead of “smooth convex approximation of 0-1 loss”, we now have that logistic regression is doing MLE in a probabilistic model. – The training and prediction would be the same as before. • We still minimize the logistic loss in terms of ‘w’. – But MLE justifies sigmoid for “probability that e-mail is important”: – Similarly, NLL under the softmax likelihood is the softmax loss (for multi-class). Next Topic: MAP Estimation Maximum Likelihood Estimation and Overfitting • In our abstract setting with data D the MLE is: • But conceptually MLE is a bit weird: – “Find the ‘w’ that makes ‘D’ have the highest probability given ‘w’.” • And MLE often leads to overfitting: – Data could be very likely for some very unlikely ‘w’. – For example, a complex model that overfits by memorizing the data. • What we really want: – “Find the ‘w’ that has the highest probability given the data D.” Maximum a Posteriori (MAP) Estimation • Maximum a posteriori (MAP) estimate maximizes the reverse probability: – This is what we want: the probability of ‘w’ given our data. • MLE and MAP are connected by Bayes rule: • So MAP maximizes the likelihood p(D|w) times the prior p(w): – Prior is our “belief” that ‘w’ is correct before seeing data. – Prior can reflect that complex models are likely to overfit. MAP Estimation and Regularization • From Bayes rule, the MAP estimate with IID examples Di is: • By again taking the negative of the logarithm as before we get: • So we can view the negative log-prior as a regularizer: – Many regularizers are equivalent to negative log-priors. L2-Regularization and MAP Estimation • We obtain L2-regularization under an independent Gaussian assumption: • This implies that: • So we have that: • With this prior, the MAP estimate with IID training examples would be MAP Estimation and Regularization • MAP estimation gives link between probabilities and loss functions. – Gaussian likelihood (σ = 1) + Gaussian prior gives L2-regularized least squares. – Laplace likelihood (σ = 1) + Gaussian prior gives L2-regularized robust regression: – As ‘n’ goes to infinity, effect of prior/regularizer goes to zero. – Unlike with MLE, the choice of σ changes the MAP solution for these models. Summarizing the past few slides • Many of our loss functions and regularizers have probabilistic interpretations. – Laplace likelihood leads to absolute error. – Laplace prior leads to L1-regularization. • The choice of likelihood corresponds to the choice of loss. – Our assumptions about how the yi-values can come from the xi and ‘w’. • The choice of prior corresponds to the choice of regularizer. – Our assumptions about which ‘w’ values are plausible. Regularizing Other Models • We can view priors in other models as regularizers. • Remember the problem with MLE for naïve Bayes: • The MLE of p(‘lactase’ = 1| ‘spam’) is: count(spam,lactase)/count(spam). • But this caused problems if count(spam,lactase) = 0. • Our solution was Laplace smoothing: – Add “+1” to our estimates: (count(spam,lactase)+1)/(counts(spam)+2). – This corresponds to a “Beta” prior so Laplace smoothing is a regularizer. Why do we care about MLE and MAP? • Unified way of thinking about many of our tricks? – Probabilitic interpretation of logistic loss. – Laplace smoothing and L2-regularization are doing the same thing. • Remember our two ways to reduce overfitting in complicated models: – Model averaging (ensemble methods). – Regularization (linear models). • “Fully”-Bayesian methods (CPSC 440) combine both of these. – Average over all models, weighted by posterior (including regularizer). – Can use extremely-complicated models without overfitting. Losses for Other Discrete Labels • MLE/MAP gives loss for classification with basic labels: – Least squares and absolute loss for regression. – Logistic regression for binary labels {“spam”, “not spam”}. – Softmax regression for multi-class {“spam”, “not spam”, “important”}. • But MLE/MAP lead to losses with other discrete labels (bonus): – Ordinal: {1 star, 2 stars, 3 stars, 4 stars, 5 stars}. – Counts: 602 ‘likes’. – Survival rate: 60% of patients were still alive after 3 years. – Unbalanced classes: 99.9% of examples are classified as +1. • Define likelihood of labels, and use NLL as the loss function. • We can also use ratios of probabilities to define more losses (bonus): – Binary SVMs, multi-class SVMs, and “pairwise preferences” (ranking) models. Summary • Maximum likelihood estimate viewpoint of common models. – Objective functions are equivalent to maximizing p(y, X | w) or p(y | X, w). • MAP estimation directly models p(w | X, y). – Gives probabilistic interpretation to regularization. • Losses for weird scenarios are possible using MLE/MAP: – Ordinal labels, count labels, censored labels, unbalanced labels. • Next time: – What ‘parts’ are your personality made of? Loss vs. Objective vs. Error vs. CostDiscussion: Least Squares and Gaussian Assumption • Classic justifications for the Gaussian assumption underlying least squares: – Your noise might really be Gaussian. (It probably isn't, but maybe it's a good enough approximation.) – The central limit theorem (CLT) from probability theory. (If you add up enough IID random variables, the estimate of their mean converges to a Gaussian distribution.) • I think the CLT justification is wrong as we've never assumed that the xij are IID across ‘j’ values. We only assumed that the examples xi are IID across ‘i’ values, so the CLT implies that our estimate of ‘w’ would be a Gaussian distribution under different samplings of the data, but this says nothing about the distribution of yi given wTxi. • On the other hand, there are reasons *not* to use a Gaussian assumption, like it's sensitivity to outliers. This was (apparently) what lead Laplace to propose the Laplace distribution as a more robust model of the noise. • The \"student t\" distribution (published anonymously by Gosset while working at the Guiness beer company) is even more robust, but doesn't lead to a convex objective. Binary vs. Multi-Class Logistic • How does multi-class logistic generalize the binary logistic model? • We can re-parameterize softmax in terms of (k-1) values of oc: – This is due to the “sum to 1” property (one of the oc values is redundant). – So if k=2, we don’t need a o2 and only need a single ‘o’. – Further, when k=2 the probabilities can be written as: – Renaming ‘2’ as ‘-1’, we get the binary logistic regression probabilities. Ordinal Labels • Ordinal data: categorical data where the order matters: – Rating hotels as {‘1 star’, ‘2 stars’, ‘3 stars’, ‘4 stars’, ‘5 stars’}. – Softmax would ignore order. • Can use ‘ordinal logistic regression’. Count Labels • Count data: predict the number of times something happens. – For example, yi = “602” Facebook likes. • Softmax requires finite number of possible labels. • We probably don’t want separate parameter for ‘654’ and ‘655’. • Poisson regression: use probability from Poisson count distribution. – Many variations exist, a lot of people think this isn’t the best likelihood. Censored Survival Analysis (Cox Partial Likelihood) • Censored survival analysis: – Target yi is last time at which we know person is alive. • But some people are still alive (so they have the same yi values). • The yi values (time at which they die) are “censored”. – We use vi=0 is they are still alive and otherwise we set vi = 1. • Cox partial likelihood assumes “instantaneous” rate of dying depends on xi but not on total time they’ve been alive (not that realistic). Leads to likelihood of the “censored” data of the form: • There are many extensions and alternative likelihoods. Other Parsimonious Parameterizations • Sigmoid isn’t the way to model a binary p(yi | xi, w): – Probit (uses CDF of normal distribution, very similar to logistic). – Noisy-Or (simpler to specify probabilities by hand). – Extreme-value loss (good with class imbalance). – Cauchit, Gosset, and many others exist… Unbalanced Training Sets • Consider the case of binary classification where your training set has 99% class -1 and only 1% class +1. – This is called an “unbalanced” training set • Question: is this a problem? • Answer: it depends! – If these proportions are representative of the test set proportions, and you care about both types of errors equally, then “no” it’s not a problem. • You can get 99% accuracy by just always predicting -1, so ML can only help with the 1%. – But it’s a problem if the test set is not like the training set (e.g. your data collection process was biased because it was easier to get -1’s) – It’s also a problem if you care more about one type of error, e.g. if mislabeling a +1 as a -1 is much more of a problem than the opposite • For example if +1 represents “tumor” and -1 is “no tumor” 33 Unbalanced Training Sets • This issue comes up a lot in practice! • How to fix the problem of unbalanced training sets? – Common strategy is to build a “weighted” model: • Put higher weight on the training examples with yi=+1. • This is equivalent to replicating those examples in the training set. • You could also subsample the majority class to make things more balanced. • Boostrap: create a dataset of size ‘n’ where n/2 are sampled from +1, n/2 from -1. – Another approach is to try to make “fake” data to fill in minority class. – Another option is to change to an asymmetric loss function (next slides) that penalizes one type of error more than the other. – Some discussion of different methods here. 34 Unbalanced Data and Extreme-Value Loss • Consider binary case where: – One class overwhelms the other class (‘unbalanced’ data). – Really important to find the minority class (e.g., minority class is tumor). Unbalanced Data and Extreme-Value Loss • Extreme-value distribution: Unbalanced Data and Extreme-Value Loss • Extreme-value distribution: Loss Functions from Probability Ratios • We’ve seen that loss functions can come from probabilities: – Gaussian => squared loss, Laplace => absolute loss, sigmoid => logistic. • Most other loss functions can be derived from probability ratios. – Example: sigmoid => hinge. Loss Functions from Probability Ratios • We’ve seen that loss functions can come from probabilities: – Gaussian => squared loss, Laplace => absolute loss, sigmoid => logistic. • Most other loss functions can be derived from probability ratios. – Example: sigmoid => hinge. Loss Functions from Probability Ratios • We’ve seen that loss functions can come from probabilities: – Gaussian => squared loss, Laplace => absolute loss, sigmoid => logistic. • Most other loss functions can be derived from probability ratios. – Example: sigmoid => hinge. Loss Functions from Probability Ratios • We’ve seen that loss functions can come from probabilities: – Gaussian => squared loss, Laplace => absolute loss, sigmoid => logistic. • Most other loss functions can be derived from probability ratios. – Example: sigmoid => hinge. Loss Functions from Probability Ratios • General approach for defining losses using probability ratios: 1. Define constraint based on probability ratios. 2. Minimize violation of logarithm of constraint. • Example: softmax => multi-class SVMs. Supervised Ranking with Pairwise Preferences • Ranking with pairwise preferences: – We aren’t given any explicit yi values. – Instead we’re given list of objects (i,j) where yi > yj.","libVersion":"0.2.1","langs":""}