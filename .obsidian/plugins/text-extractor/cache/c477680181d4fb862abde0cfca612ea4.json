{"path":".obsidian/plugins/text-extractor/cache/c477680181d4fb862abde0cfca612ea4.json","text":"Example 1: Fulfilling an order ﬂ 1. The customer N 2. The cashier gives the é orders. w order to the barista. —_— (2 — =3 3. The barista makes the A drink and gives it to the customer. ) Suppose that the coffee shop has an ordering process in which a cashier takes orders, and a barista makes the orders. Think of the cashier and the barista as two separate components of an application. First, the cashier takes an order and writes it down on a piece of paper. Next, the cashier delivers the paper to the barista. Finally, the barista makes the drink and gives it to the customer. When the next order comes in, the process repeats. This process runs smoothly as long as both the cashier and the barista are coordinated. What might happen if the cashier took an order and went to deliver it to the barista, but the barista was out on a break or busy with another order? The cashier would need to wait until the barista is ready to accept the order. This would cause delays in the ordering process and require customers to wait longer to receive their orders. As the coffee shop has become more popular and the ordering line is moving more slowly, the owners notice that the current ordering process is time consuming and inefficient. They decide to try a different approach that uses a queue. ®: -","libVersion":"0.2.1","langs":"eng"}