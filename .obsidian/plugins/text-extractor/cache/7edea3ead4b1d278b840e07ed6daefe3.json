{"path":".obsidian/plugins/text-extractor/cache/7edea3ead4b1d278b840e07ed6daefe3.json","text":"S OLID Topics CP S C 310: Introduction to S oftware E ngineer ing Three P riz es: 1% G rad e Bonus A warded dur ing the ﬁ nal lecture The B rain Whomev er ans wer s the mos t ques tions on piaz z a. The S peed Demons The team that reaches E x tending ﬁ r s t dur ing C1, C2 and C3. The Creativ es The team with the cooles t UI for C3 as v oted by y our TA s . CP S C 310: Introduction to S oftware E ngineer ing Q uiz V iew ings for Q 0-Q 3 V iew Q0, Q1, Q2 and Q3 in CB TF: ● R es er v ations : Monday March 24th at 6am ● Duration: 50 minutes ● Dates : W ednes day A pr il 9th - S aturday A pr il 12th CP S C 310: Introduction to S oftware E ngineer ing Final E xam ● **IN P E R S ON, ON P A P E R ** ● When: Thur s day A pr il 24th at 2:30pm ● Where: TB D ● What: Cumulativ e (cov er s mater ial from entire ter m) ● How L ong: 2.5 Hour s ● F or mat: Identical to Quiz z es but ON P A P E R ○ Tr ue/F als e Ques tions grouped into s ections ○ 1 for cor rect, 0 for blank and -0.5 for incor rect ans wer s CP S C 310: Introduction to S oftware E ngineer ing ● SOLID (one nice s et of pr inciples ) ○ S ingle R es pons ibility P r inciple ○ Open/Clos ed P r inciple ○ L is k ov S ubs titution P r inciple ○ Inter face S egregation P r inciple ○ D ependency Inv er s ion P r inciple Mod ular Design P rincip les & Heurist ics http://en.wikipedia.org/wiki/S OLID_%28object-or iented_des ign%29 D I L O S CP S C 310: Introduction to S oftware E ngineer ing A clas s s hould hav e only a s ingle r es pons ibility. S peciﬁ cally , only one potential change in the s y s tem’ s s peciﬁ cation s hould be able to aﬀ ect the implementation of the clas s . http://en.wikipedia.org/wiki/S ingle_res pons ibility _pr inciple E lisa’ s E dX video on Y outube on the S ingle Responsibility P rinciple Divergent changes often s ignal S R P v iolations becaus e they s ugges t that one clas s is doing the wor k of two (or more). S ingle Resp onsib ilit y P rincip le DILOS CP S C 310: Introduction to S oftware E ngineer ing ● Be ab le to: ○ E valuate w het her/how S RP p rincip le is b eing ad hered to. ○ S p ot glaring S RP violat ions. ○ Und erst and d iﬀerent kind s of coup ling and cohesion to reason ab out how t hey imp ed e or enab le evolut ion. ● Cod e smells t hat violate S RP : ○ Diver g en t ch an g es: O ne class d oing w ork of t w o. ○ F eatu r e en v y: E nvious cod e relies too heavily on t he ot her class’ s internals. ● Link cod e smells to refactorings t hat lead to and imp rove S RP. ○ E xtr act class ( use d elegat ion) . ○ Mo ve m eth o d ( red uce feat ure env y b y re-homing met hod s) . ○ Id ent ify and e xp lain how p rincip les are connected ( t he violat ion of one may lead to t he violat ion of anot her) . ● Be ab le to rep air p rincip le violat ions t hrough refactoring. S RP : L earning O ut comes DILOS CP S C 310: Introduction to S oftware E ngineer ing A clas s mus t be closed for internal change. B ut mus t be op en for e x tens ion . W hen d esigning classes, d o not p lan for b rand new funct ionalit y to b e ad d ed b y mod ify ing t he cor e of t he class. Instead , d esign your class s o t hat e x tens ions can b e mad e in a mod ular w ay, to p rovid e new funct ionalit y b y leveraging t he p ow er of t he inherit ance facilit ies of t he language, or t hrough p re-accommod ated ad d it ion of met hod s. O p en/Closed P rincip le DILOS CP S C 310: Introduction to S oftware E ngineer ing W e would hav e to ov er r ide the entire method. What if y ou only wanted to s pecialis e this bit? O CP p ub lic init(): v oid { th is . b p = new Beep er P a nel(); th is . v a lid a te(); tr y { const sa m p leRa te = th is . g etP a ra m eter (\"sa m p leRa te \" ); if (sa m p leRa te != = null) { const sR = Num b er. p a r seInt(sa m p leRa te); th is . b p . setS a m p leRa te(sR); } } ca tch (er r ) { } tr y { const f ra m esP er W a v e = th is . g etP a ra m eter (\"f p w\" ); if (f ra m esP er W a v e != = null) { const f p w = Num b er. p a r seInt(f ra m esP er W a v e); const slid er = th is . b p . g etF P WS lid er (); slid er. setV a lue(f p w); } } ca tch (er r ) { } tr y { const h a r m onic = (th is . g etP a ra m eter (\"h a r m onic \" ) != = null) th is . b p . setup S ound (); } ca tch (er r ) { } tr y { if ( th is . g etP a ra m eter (\"a utoloop \" ) != = null) { const loop C ount = th is . g etP a ra m eter (\"a utoloop \" ); if (loop C ount != = null) { const lc = Num b er. p a r seInt(loop C ount); th is . b p . loop (lc); } } } ca tch (er r ) { } } DILOS CP S C 310: Introduction to S oftware E ngineer ing p ub lic init(): v oid { th is . setup P a nel(); th is . g etS a m p leRa te(); th is . g etF ra m esP er W a v e(); th is . setup Ha r m onicsAnd S ound (); th is . setL oop C ount(); } If thes e methods are protected not pr iv ate, we can ov er r ide indiv idual por tions of the behav iour. This giv es us another motiv ation for decompos ing long methods : to facilitate the Open/Clos ed pr inciple! Why is this refactor ing better ? public enough E x tract method refactor ing: O CP E xamp le DILOS CP S C 310: Introduction to S oftware E ngineer ing V iolat ion: Open for modiﬁ cation (no!). S ubty pes mus t ov er r ide/re-implement method entirely to s pecialis e. O CP -G uid ed Refactoring DILOS CP S C 310: Introduction to S oftware E ngineer ing This ar rangement achiev es the OCP. S ite is clos ed for modiﬁ cation (no need to change its code), and open for e x tens ion (s ubclas s es can s pecialis e s traightfor wardly ). O CP -G uid ed Refactoring DILOS V iolat ion: Open for modiﬁ cation (no!). S ubty pes mus t ov er r ide/re-implement method entirely to s pecialis e. CP S C 310: Introduction to S oftware E ngineer ing • Whenev er y our code is making behav ioural changes bas ed on inter nal ﬂ ag s or in stan ceo f y ou are lik ely v iolating Open/Clos e. E .g., O CP Red Flag class BillingService { public chargeOrder(order: PizzaOrder, cc: CreditCard): Receipt { if (cc instanceof VisaCard) { //… } else if (cc instanceof MasterCard) { //… } } } DILOS CP S C 310: Introduction to S oftware E ngineer ing ● Be ab le to: ○ E valuate w het her/how O CP p rincip le is b eing ad hered to. ○ S p ot glaring O CP violat ions. ○ Describ e how smells can arise in d esigns t hat d o not follow O CP ● Cod e smells t hat violate O CP : ○ S h o tg u n su r g er y BE TW E E N sup er t yp e and sub t yp e, or across several sub t yp es all overrid ing t he same met hod . ● Link cod e smells to refactorings t hat lead to and imp rove O CP : ○ Refact o r t o t em p lat e; e xtr act m eth o d. ○ F or e xamp le, you are faced w it h a class t hat has a met hod t hat is ver y long, w it h mult ip le st ages t he ord er of w hich mat ters, and your sub t yp e need s to change one p ar t . W hat p rincip le violat ion am I? ● Be ab le to rep air p rincip le violat ions t hrough refactoring. O CP : L earning O ut comes DILOS CP S C 310: Introduction to S oftware E ngineer ing S ubty pe R equirement: L et ϕ(x ) be a proper ty prov able about objects x of ty pe T. Then ϕ(y ) s hould be tr ue for objects y of ty pe S where S is a s ubty pe of T. [http://en.wikipedia.org/wiki/Lis k ov _s ubs titution_pr inciple] Y outube video on LS P B ar bara Lis k ov Lisk ov S ub st it ut ion P rincip le [B ar bara Lis k ov and Jeanette W ing, A B ehav ioral Notion of S ubty ping, A CM T OP LA S , 1811-1841, 1994.] Jeanette W ing DILOS CP S C 310: Introduction to S oftware E ngineer ing S ubty pe R equirement: L et ϕ( x) b e a p r o p er ty p r o vab le ab o u t o b jects x o f typ e T. Then ϕ(y ) s hould be tr ue for objects y of ty pe S where S is a s ubty pe of T. [http://en.wikipedia.org/wiki/Lis k ov _s ubs titution_pr inciple] Y outube video on LS P B ar bara Lis k ov Jeanette W ing F o r a g iven p r o p er ty, ϕ( x) , o f a S u p er typ e, T, ... DILOS Lisk ov S ub st it ut ion P rincip le CP S C 310: Introduction to S oftware E ngineer ing S ubty pe R equirement: L et ϕ(x ) be a proper ty prov able about objects x of ty pe T. T h en ϕ( y) sh o u ld b e tru e fo r o b jects y o f typ e S w h er e S is a su b typ e o f T. [http://en.wikipedia.org/wiki/Lis k ov _s ubs titution_pr inciple] Y outube video on LS P B ar bara Lis k ov Jeanette W ing F or a giv en proper ty , ϕ(x ), of a S uper ty pe, T, th at p r o p er ty m u st h o ld fo r all S u b typ es o f T. DILOS Lisk ov S ub st it ut ion P rincip le CP S C 310: Introduction to S oftware E ngineer ing S ubty pe R equirement: L et ϕ(x ) be a proper ty prov able about objects x of ty pe T. Then ϕ(y ) s hould be tr ue for objects y of ty pe S where S is a s ubty pe of T. If S is a sub t yp e of T, t hen ob ject s of t yp e T ( sup er t yp e) in a p rogram may b e rep laced w it h ob ject s of t yp e S ( sub t yp e) w it hout altering any of t he d esirab le p rop er t ies of t hat p rogram. [http://en.wikipedia.org/wiki/Lis k ov _s ubs titution_pr inciple] Y outube video on LS P const c: Cookie = new OatmealCookie(); c.eat() B ar bara Lis k ov Jeanette W ing DILOS Lisk ov S ub st it ut ion P rincip le CP S C 310: Introduction to S oftware E ngineer ing S ub st it ut ab ilit y: A s ubclas s s hould not break the e x pectations s et by its s uperclas s ! class GoodPerson { public freeBird(b: Bird) { b.flyFromHeight(100); // ... watch bird fly! } } class Seagull extends Bird { // all heights work! public flyFromHeight(height: number) { // … some implementation } } class Penguin extends Bird { // heights under 50cm only! public flyFromHeight(input: number) { // … another implementation } } ! class Bird { // all heights work! public flyFromHeight(height: number) { // … some implementation } } W hat is LS P ? DILOS CP S C 310: Introduction to S oftware E ngineer ing P recond it ion Rule P reconditions s hould not be s trengthened (for the s ame inputs ) Ok to widen! P ost cond it ion Rule P os tconditions s hould not be weak ened (for the s ame inputs ) Ok to nar row! R es iz e only lets y ou s pecify one dimens ion. Changing width will als o change height. B ad: widened pos tcondition! A dditional eﬀ ect: P enguin per is hes B ad: W idened pos tcondition! C an ﬂ y. F acet s of LS P : Met hod s Rule DILOS S ub st it ut ab ilit y: A s ubclas s s hould not break the e x pectations s et by its s uperclas s ! CP S C 310: Introduction to S oftware E ngineer ing S u p erT yp e S u p erT yp eBlackBo xT ests Tests on spec only sup = new S uperT ype blackB oxTests(sup) S u b T yp e S u b T yp eBlackBo xT ests sub = new S ubT ype su p er. b lackBo xT ests(su b ) Tes ts within the s peciﬁ cation of the s uperclas s s hould s till pas s if the s ubclas s is s ubs tituted. ✓ ✓ LS P & Test ing DILOS CP S C 310: Introduction to S oftware E ngineer ing S u p erT yp e S u p erT yp eBlackBo xT ests Tests on spec only sup = new S uperT ype blackB oxTests(sup) S u b T yp e S u b T yp eBlackBo xT ests sub = new S ubT ype su p er. b lackBo xT ests(su b ) F or a clas s to be s ubs titutable for its s uper ty pe, A ll the su p er typ e b lack b o x t ests m u st p ass, when r un on an ins tance of the s ubty pe. Tes ts within the s peciﬁ cation of the s uperclas s s hould s till pas s if the s ubclas s is s ubs tituted. LS P & Test ing DILOS","libVersion":"0.2.1","langs":""}