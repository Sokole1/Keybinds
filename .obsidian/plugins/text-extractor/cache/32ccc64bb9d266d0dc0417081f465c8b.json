{"path":".obsidian/plugins/text-extractor/cache/32ccc64bb9d266d0dc0417081f465c8b.json","text":"CPSC 320 2023W1: Tutorial 3 1 Snakes and Ladders This classic board game consists of a g ×g grid of squares, numbered consecutively from 1 to g2, starting in the bottom left corner and proceeding row by row from bottom to top, with rows alternating to the left and right. Certain pairs of squares in this grid, always in diﬀerent rows, are connected by either “snakes” (leading down) or “ladders” (leading up). Each square can be an endpoint of at most one snake or ladder. You start with a token in cell 1, in the bottom left corner. In each move, you advance your token up to k positions, for some ﬁxed constant k (like a dice roll). If the token ends the move at the top end of a snake, it slides down to the bottom of that snake. Similarly, if the token ends the move at the bottom end of a ladder, it climbs up to the top of that ladder. Describe and analyze an algorithm to compute the smallest number of moves required for the token to reach the last square of the grid. 1 2 Interpreters and Graphs Several modern programming languages, including JavaScript, Python, Perl, and Ruby, include a feature called parallel assignment, which allows multiple assignment operations to be encoded in a single line of code. For example, the Python code x,y = 0,1 simultaneously sets x to 0 and y to 1. The values of the right-hand side of the assignment are all determined by the old values of the variables. Thus, the Python code a, b = b, a swaps the values of a and b, and the following Python code computes the nth Fibonacci number: def ﬁb(n): prev, curr = 1, 0 while n > 0: prev, curr, n = curr, prev+curr, n−1 return curr Suppose the interpreter you are writing needs to convert every parallel assignment into an equivalent sequence of individual assignments. For example, the parallel assignment a,b = 0,1 can be serialized in either order – either a=0; b=1 or b=1;a=0 – but the parallel assignment x,y = x+1,x+y can only be serialized as y=x+y; x=x+1. Serialization may require one (or even more) additional temporary variables. For example, serializing a,b = b,a requires a temporary variable. Your task is to design an algorithm to determine whether a given parallel assignment can be serialized without additional temporary variables. To formalize this, say there are n parallel assignments. The ith assignment is of the form “vi ← Ri”, where vi is a single variable and Ri is an expression involving many variables. For simplicity, you may assume the following: • Each variable can only appear on the left-hand side of one assignment. • Computing a right-hand side Ri doesn’t have any “side eﬀects”. That is, computing Ri does not involve functions that modify variables. 2","libVersion":"0.2.1","langs":""}