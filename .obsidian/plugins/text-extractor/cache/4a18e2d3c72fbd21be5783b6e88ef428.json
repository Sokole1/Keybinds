{"path":".obsidian/plugins/text-extractor/cache/4a18e2d3c72fbd21be5783b6e88ef428.json","text":"‘Example 1.11. Consider the task of evaluating the integrals - = [ e forn = 0,1,2,...., 30. Figure 18 showsthe firs twenty , values. o1, 008 E‘ 0.08) § ool * ¢ . 002 I . MEARE YT YT o s 0 15 2 n Figure 8. The exact values of o, s, . i in Example 111 En route to solving tis task, observe at frst thatanalytically * g 4 10am-1 t 1 ot 10y —/q e [ Also Y \"“’/.. e = 1) - n10), An algorithm which may come to mind i threfore as folows: 22 Chapter 1. Numerical Algorthms: 1. Evaluste go = In(11) ~ 1n(10). 2. Forn =1,...,30, evaluate Yn = % = 10yn-1 Note that applying the above recurson formala would give exact values if oundoffertrs were not present. However, this algorithm is in fact unstable, s the magnitude of roundoff errors gets mul- tiplied by 10 (like compound interest on a shark loan, or so it feels) each time the recursion i applicd. Thus, there is exponential rror growth with ¢y — 10. In MATLAB (which au- tomatically employs double precision floating point arithmetic) we obizin iy — 9.3310e—02, Yis = —9.1694¢+0L, yig = 9.16940-+02,...., yp = —9.1694e+13. See Figure 19. The 0, 5 o 5 10 s 2 n Figure 19, Computed values (n ed)fo o, ... 1 in Exampl 1.1, For compison, the exact values(n blu) are givn as well. Notethe diffrent y-scale i Fiures 19 and 1.5, Approximte and exact values of 1, appar 0 the cye 1o be clos up 0.1 = 15 But from there on rapid divergence i clea. Note the valuesofthe computed 1 and 1o gven n the et computed solution, at least for > 16, meaningless! . “Thankfuly, such extreme instances of instabiltyssillustrated n Example 111 will ot oceur i any ofthe algorithms developed in this text from here on.","libVersion":"0.2.1","langs":"eng"}