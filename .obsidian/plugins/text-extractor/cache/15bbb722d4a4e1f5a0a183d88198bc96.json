{"path":".obsidian/plugins/text-extractor/cache/15bbb722d4a4e1f5a0a183d88198bc96.json","text":"Question 1.32 (a) The exact solution is N 10° £ V100 =4 p=—— \" 2 The problem in the computation is that |b] is very large and a and ¢ are small. As a result we will get cancellation error, since |b| ~ /b2 — 4ac. In this case there is no need to worry about overflow, as b? can be represented by the floating point system. A way to resolve this is to compute z, using z, = —2+vVFidac Vz’i’““, and then z_ = z£-. This actually gives a maximally accurate result in this floating point system. (b) The problem is overflow. We will be computing 106 during our calculations, which cannot be represented in our floating point system (B, t, L, U) = (10,8, —50,50). A way to resolve this is to scale a, b and ¢ by 10% since 6-10%°22+5-10%2—4-10%° = 0 is the same as 622 +5z—4 = 0. Now we can use the standard quadratic formula to calculate the roots. The idea in a general setting is to divide a, b, and ¢ by max(a, b, c) as a first step in the computation. Once we have done this, it is sufficient to use the standard formulas for .. in this case. 4 (c) The exact solution of the quadratic equation is 10%0 + V1050 =4 Ty = 9.10-90 There are two problems here. The first is that z; ~ 10°°, which means it is larger than the largest number that can be represented by this floating point system. This will cause overflow. There is nothing we can do about it. This is just the way it is; it’s the exact solution, not the algorithm, that causes a difficulty. The second problem is that due to the large numbers involved, there will be a cancellation error and we will get z_ = 0. Using Taylor expansions, we have vI—z ~ 1 — £, which is valid for z < 1, and then we rewrite 4o 1—V1-4-10-50 — 1% z- = 107 2.10-30 o g 0 =~ 10-30 = 1 This is in fact the exact solution on this floating point system.","libVersion":"0.2.1","langs":"eng"}