{"path":".obsidian/plugins/text-extractor/cache/53fddee7f6cc969806193bd83973cc8a.json","text":"Code S mells CP S C 310: Introduction to S oftware E ngineer ing Code S mells Cod e smells w e w ill cover 1. Magic Number s 2. L ong Methods 3. L ong P arameter s 4. Comments 5. S witch on Ty pe 6. Duplicate Code 7. F eature E nv y 8. Div ergent Changes 9. S hotgun S urger y CP S C 310: Introduction to S oftware E ngineer ing 2. L ong Met hod CP S C 310: Introduction to S oftware E ngineer ing ● P ractically impos s ible to under s tand what’s going on. ● Tes ts cannot help with fault localiz ation becaus e code blocks are not is olatable. ● Does n’t facilitate conv enient e x tens ion by s ubty pes . The P rob lem W it h L ong Met hod s… CP S C 310: Introduction to S oftware E ngineer ing L ook for clusters of b ehaviour New met hodNew met hod L engt h and maint ainab ilit y CP S C 310: Introduction to S oftware E ngineer ing L ong Met hod in P ract ice ● Or iginal change: rev iewer comment ● Fix : ﬁx CP S C 310: Introduction to S oftware E ngineer ing L ong Met hod in P ract ice ● Or iginal change: rev iewer comment ● Fix : ﬁx CP S C 310: Introduction to S oftware E ngineer ing Met hod Design A est het ics A ll the s ame lev el of abs traction. Diﬀ er ing lev els of abs traction. CP S C 310: Introduction to S oftware E ngineer ing Hap p ens to shor ter met hod s too! Methods s hould do jus t one thing… at the r ight abs traction lev el. function getMoviesForStoreAndReorder(store: string) { const databaseConnection = new DatabaseConnection(); const movies = databaseConnection.getMovies(store); for (const movie of movies) { if (movie.count < 1) { this.reorderMovie(movie); } } return movies; } CP S C 310: Introduction to S oftware E ngineer ing function getMoviesForStoreAndReorder(store: string) { const databaseConnection = new DatabaseConnection(); const movies = databaseConnection.getMovies(store); for (const movie of movies) { if (movie.count < 1) { this.reorderMovie(movie); } } return movies; } Hap p ens to shor ter met hod s too! Methods s hould do jus t one thing… at the r ight abs traction lev el. Gets mov ies for the s tore Order s mov ies low in s tock Filter s low s tock mov ies CP S C 310: Introduction to S oftware E ngineer ing function getMoviesForStoreAndReorder(store: string) { const databaseConnection = new DatabaseConnection(); const movies = databaseConnection.getMovies(store); for (const movie of movies) { if (movie.count < 1) { this.reorderMovie(movie); } } return movies; } Hap p ens to shor ter met hod s too! Methods s hould do jus t one thing… at the r ight abs traction lev el. public orderLowStockMovies(store: string) { const movies = this.getMoviesForStore(store); const lowStockMovies = this.getLowStockMovies(movies); for (const movie of lowStockMovies) { this.reorderMovie(movie); } } CP S C 310: Introduction to S oftware E ngineer ing public addMovieToDatabase( title: string, directors: string[], length: number, genre: GENRE, stars: string[], description_short: string, description_long: string, ) { // } L ong p arameter list CRE A TE P A RA ME TE R O BJE C T ● R eplace the parameter s with an object. Hard to understand, annoying to use. public addMovieToDatabase(movie: Movie) { // } CP S C 310: Introduction to S oftware E ngineer ing Good: Comment technology. ● Comment technology is neces s ar y for s peciﬁ cation and documentation (e.g. requires , modiﬁ es , eﬀ ects ). B ad: Comments that e x plain code. ● Comments needed to e x plain code do not refer to s peciﬁ cation or documentation. Thes e are nor mally anti-patter ns . ● S pecial e x ception for comments that des cr ibe why . Comment misuse CP S C 310: Introduction to S oftware E ngineer ing Need ing e xp lanator y comment s “... comments often are us ed as a d eod or ant . It’s s ur pr is ing how often y ou look at thickly commented code and notice that the comments ar e t her e b ecaus e t he cod e is b ad.” [F owler & B eck, R efactor ing] “A good time to us e a comment is when y ou don’t know what to do. In addition to des cr ibing what is going on, comments can indicate areas in w hich you aren’t sure . A comment is a good place to say w hy y ou did s omething. This kind of infor mation helps future modiﬁ er s , esp ecially forget ful ones .” [F owler ] CP S C 310: Introduction to S oftware E ngineer ing Need ing e xp lanator y comment s // convert to cents let a = x * 100; // avg cents per customer let avg = a / n; // add to list if (avgs < avg) { t.push(1) } const cents = cost * 100; const centsPerCustomer = cents / numCustomers; if (avgs < avg) { bigSpenders.push(1) } These comment s are act ually okay! They are “ T O DO ” s, not e xp lanator y . CP S C 310: Introduction to S oftware E ngineer ing W hy are e xp lanator y comment s b ad ? ● P eople don’t res pect e x planator y comments ! ● Y ou can change code, and not change the e x planator y comments - this leads to documentation dr ift. ● E x planator y comments don’t neces s ar ily mov e with code! ● Y ou could accidentally : ○ Copy and pas te code but forget an e x planator y comment. ○ A dd new code between the e x planator y comment and the implementation it refer s to. ○ Mak e a change that mak es the comment mis leading. Comment s often signal clusters of b ehaviour - and ind icate a met hod is d oing more t han it should . CP S C 310: Introduction to S oftware E ngineer ing Fixing e xp lanator y comment s ● E x tract method and giv e that method a us eful name. ● Named elements become the documentation. ● P eople res pect names : people generally will not willingly change the contract of a clas s /method/ﬁ eld. ● Documentation “env elopes ” mov e with code: when y ou ins tantiate a clas s , reference a ﬁ eld, or call a method y ou implicitly acces s the documentation through its name. CP S C 310: Introduction to S oftware E ngineer ing public statement(): string { // generate header let result = \"Rental Record for \" + this.getName() + \":\\n\"; for (const rental of this.rentals) { let rentalAmount = 0; // determine amounts for rental movie rented switch (rental.getMovie().getPriceCode()) { case Movie.REGULAR: rentalAmount += 2; if (rental.getDaysRented() > 2) { rentalAmount += (rental.getDaysRented() - 2) * 1.5; } break; case Movie.NEW_RELEASE: rentalAmount += rental.getDaysRented() * 3; break; } // add frequent renter points frequentRenterPoints++; // add bonus for a multi-day new release rental if ((rental.getMovie().getPriceCode() === Movie.NEW_RELEASE) && rental.getDaysRented() > 1) { frequentRenterPoints++; } // show figures for this rental result += \"\\t\" + rental.getMovie().getTitle() + \"\\t\" + rentalAmount.toFixed(2) + \"\\n\"; totalAmount += rentalAmount; } // generate footer result += \"Amount owed is \" + totalAmount.toFixed(2) + \".\\n\"; result += \"You earned \" + frequentRenterPoints.toFixed(0) + \" frequent renter points.\"; console.log(result); return result; } V id eo S tore comment s CP S C 310: Introduction to S oftware E ngineer ing public statement(): string { // generate header let result = \"Rental Record for \" + this.getName() + \":\\n\"; for (const rental of this.rentals) { let rentalAmount = 0; // determine amounts for rental movie rented switch (rental.getMovie().getPriceCode()) { case Movie.REGULAR: rentalAmount += 2; if (rental.getDaysRented() > 2) { rentalAmount += (rental.getDaysRented() - 2) * 1.5; } break; case Movie.NEW_RELEASE: rentalAmount += rental.getDaysRented() * 3; break; } // add frequent renter points frequentRenterPoints++; // add bonus for a multi-day new release rental if ((rental.getMovie().getPriceCode() === Movie.NEW_RELEASE) && rental.getDaysRented() > 1) { frequentRenterPoints++; } // show figures for this rental result += \"\\t\" + rental.getMovie().getTitle() + \"\\t\" + rentalAmount.toFixed(2) + \"\\n\"; totalAmount += rentalAmount; } // generate footer result += \"Amount owed is \" + totalAmount.toFixed(2) + \".\\n\"; result += \"You earned \" + frequentRenterPoints.toFixed(0) + \" frequent renter points.\"; console.log(result); return result; } G uid e e xt ract ion w it h cod e comment s private simplifiedStatement(): string { let statement = this.getHeader(); for (const rental of this.rentals) { const rentalAmount = this.getRentalAmount(rental); this.addRenterPoints(rental); this.addBonuses(rental); statement += this.generateStatementLine(rental, rentalAmount); totalAmount += rentalAmount; } statement += this.getFooter(totalAmount); return statement; } CP S C 310: Introduction to S oftware E ngineer ing public statement(): string { // generate header let result = \"Rental Record for \" + this.getName() + \":\\n\"; for (const rental of this.rentals) { let rentalAmount = 0; // determine amounts for rental movie rented switch (rental.getMovie().getPriceCode()) { case Movie.REGULAR: rentalAmount += 2; if (rental.getDaysRented() > 2) { rentalAmount += (rental.getDaysRented() - 2) * 1.5; } break; case Movie.NEW_RELEASE: rentalAmount += rental.getDaysRented() * 3; break; } // add frequent renter points frequentRenterPoints++; // add bonus for a multi-day new release rental if ((rental.getMovie().getPriceCode() === Movie.NEW_RELEASE) && rental.getDaysRented() > 1) { frequentRenterPoints++; } // show figures for this rental result += \"\\t\" + rental.getMovie().getTitle() + \"\\t\" + rentalAmount.toFixed(2) + \"\\n\"; totalAmount += rentalAmount; } // generate footer result += \"Amount owed is \" + totalAmount.toFixed(2) + \".\\n\"; result += \"You earned \" + frequentRenterPoints.toFixed(0) + \" frequent renter points.\"; console.log(result); return result; } Refactoring is usually iterat ive private simplifiedStatement(): string { let statement = this.getHeader(); statement += this.getStatementRows(); const totalAmount = this.getTotalAmount(); statement += this.getFooter(totalAmount); return statement; } private simplifiedStatement(): string { let statement = this.getHeader(); for (const rental of this.rentals) { const rentalAmount = this.getRentalAmount(rental); this.addRenterPoints(rental); this.addBonuses(rental); statement += this.generateStatementLine(rental, rentalAmount); totalAmount += rentalAmount; } statement += this.getFooter(totalAmount); return statement; } CP S C 310: Introduction to S oftware E ngineer ing S w it ch on t yp e A conditional v ar y ing behav iour bas ed on an object’s ty pe: Clas s B ird: public getSpeed(obj:BirdContainer ): number { switch (obj.kind) { case Bird.EUROPEAN: return this.getBaseSpeed(); case Bird.AFRICAN: return this.getBaseSpeed() - this.getLoad() * this.coconutCount; case Bird.NORWEGIAN_BLUE: return (this.isNailed) ? 0 : this.getBaseSpeed(); } throw new Error(\"Unknown kind of bird\"); CP S C 310: Introduction to S oftware E ngineer ing Refactoring: Rep lace cond it ional w it h p olymorp hism b.getSpeed() https: //refactoring.guru/replace-conditional-with-polymorphism public getSpeed(obj:any ): number { switch (obj.kind) { case Bird.EUROPEAN: return this.getBaseSpeed(); case Bird.AFRICAN: return this.getBaseSpeed() - this.getLoad() * this.coconutCount; case Bird.NORWEGIAN_BLUE: return (this.isNailed) ? 0 : this.getBaseSpeed(); } throw new Error(\"Unknown kind of bird\"); Bird class E ach class get s it s ow n version of t he met hod return getBaseSpeed(); E ach case get s it s ow n class private calcProperties(): void { const bird: Bird = new African(); const speed = bird.getSpeed(); // … use speed } Inst ant iate t he sub t yp e C all t he met hod on t he inst ance E ach met hod get s t he content s of t he case b od y CP S C 310: Introduction to S oftware E ngineer ing Id ent ical met hod s in t w o classes S al esp erso n S al esp erso n P ull up Met hod Refactoring: 1) Create method in s uperclas s . 2) R emov e from s ubclas s es . CP S C 310: Introduction to S oftware E ngineer ing A lmost id ent ical met hod s in t w o classes S T A R T E R & S O LUT IO N P ull up Met hod Refactoring: 1) Create method in s uperclas s . 2) R emov e from s ubclas s es . 3) A dd e x tens ion points in s ubclas s es . a b stra ct cla ss C ollectionsRep or t { p ub lic a b stra ct p r intRep or t(): v oid ; } cla ss V er b oseRep or t extend s C ollectionsRep or t { p ub lic p r intRep or t(): v oid { console.log ( \"= = = S ta r t= = = \"); console.log ( \"W e a re so sor r y to tell y ou...\"); console.log ( \"Here 's th e th ing \"); console.log ( \"W e m ig h t need th a t m one y b a ck \"); console.log ( \"I k now , we 're sor r y \"); console.log ( \"= = = End = = = \"); } } cla ss C onciseRep or t extend s C ollectionsRep or t { p ub lic p r intRep or t(): v oid { console.log ( \"= = = S ta r t= = = \"); console.log ( \"Giv e us our m one y \"); console.log ( \"= = = End = = = \"); } } CP S C 310: Introduction to S oftware E ngineer ing S T A R T E R & S O LUT IO N a b stra ct cla ss C ollectionsRep or t { p ub lic a b stra ct p r intRep or t(): v oid ; } cla ss V er b oseRep or t extend s C ollectionsRep or t { p ub lic p r intRep or t(): v oid { console.log ( \"= = = S ta r t= = = \"); console.log ( \"W e a re so sor r y to tell y ou...\"); console.log ( \"Here 's th e th ing \"); console.log ( \"W e m ig h t need th a t m one y b a ck \"); console.log ( \"I k now , we 're sor r y \"); console.log ( \"= = = End = = = \"); } } cla ss C onciseRep or t extend s C ollectionsRep or t { p ub lic p r intRep or t(): v oid { console.log ( \"= = = S ta r t= = = \"); console.log ( \"Giv e us our m one y \"); console.log ( \"= = = End = = = \"); } } Unique to this clas s Unique to this clas s 1) Id ent ify w hat is common and uniq ue CP S C 310: Introduction to S oftware E ngineer ing S T A R T E R & S O LUT IO N a b stra ct cla ss C ollectionsRep or t { p ub lic a b stra ct p r intRep or t(): v oid ; } cla ss V er b oseRep or t extend s C ollectionsRep or t { p ub lic p r intRep or t(): v oid { console.log ( \"= = = S ta r t= = = \"); console.log ( \"W e a re so sor r y to tell y ou...\"); console.log ( \"Here 's th e th ing \"); console.log ( \"W e m ig h t need th a t m one y b a ck \"); console.log ( \"I k now , we 're sor r y \"); console.log ( \"= = = End = = = \"); } } cla ss C onciseRep or t extend s C ollectionsRep or t { p ub lic p r intRep or t(): v oid { console.log ( \"= = = S ta r t= = = \"); console.log ( \"Giv e us our m one y \"); console.log ( \"= = = End = = = \"); } } 2) P ull up d up licate b ehaviour CP S C 310: Introduction to S oftware E ngineer ing S T A R T E R & S O LUT IO N a b stra ct cla ss C ollectionsRep or t { p ub lic p r intRep or t(): v oid { console.log ( \"= = = S ta r t= = = \"); th is.p r intC ontents(); console.log ( \"= = = End = = = \"); } p ub lic a b stra ct p r intC ontents(): v oid ; } cla ss V er b oseRep or t extend s C ollectionsRep or t { p ub lic p r intC ontents(): v oid { console.log ( \"W e a re so sor r y to tell y ou...\"); console.log ( \"Here 's th e th ing \"); console.log ( \"W e m ig h t need th a t m one y b a ck \"); console.log ( \"I k now , we 're sor r y \"); } } cla ss C onciseRep or t extend s C ollectionsRep or t { p ub lic p r intC ontents(): v oid { console.log ( \"Giv e us our m one y \"); } } 3) Mak e an ab st ract met hod t hat calls uniq ue funct ionalit y . CP S C 310: Introduction to S oftware E ngineer ing A lmost Dup licate Cod e ( A gain) CP S C 310: Introduction to S oftware E ngineer ing Create Temp late Met hod Template Method R efactor ing: 1) P ull up the duplicate code (or duplicated logic) into the s uper method. 2) The s uper method calls an abs tract helper method that ins er ts the contents . 3) The s ubclas s es prov ide the implementations for the contents method. CP S C 310: Introduction to S oftware E ngineer ing F eat ure E nv y ( Behaviour in W rong P lace) When y ou ﬁ nd y our s elf wis hing y ou had acces s to lots of ﬁ elds from another clas s , the method y ou’re implementing s hould probably liv e in that clas s . Law of Demeter : Too many dereferences mean the method is probably in the wrong s pot. cla ss Cat { p r iv a te ﬁd o = new Dog (); p ub lic ch a seDog () { th is.ﬁd o.ta il.wa g (); th is.ﬁd o.m outh .sm ile(); // ... etc } } Why is C at telling Dog how to behav e? Objects s hould deﬁ ne their own behav iour. th is .d b .stud ents[sNum].cour ses[‘ cs310’].g etC 2().p ush (); CP S C 310: Introduction to S oftware E ngineer ing E xp erient ial Cod e S mell S ymp toms (Issues you not ice w hile changing cod e) The is s ues that we hav e s een up to this point are all s tatic , they can be readily identiﬁ ed jus t by looking at the code. In reality , code s mells are identiﬁ ed e x per ientially : as y ou tr y to change or under s tand code. Two e x per iential s y mptoms that point to more elus iv e (and problematic) code s mells are d ivergent changes and shot gun surger y . Thes e s mells often highlight the need for a new clas s to abs tract the tangled or s cattered des ign elements . a) Y ou hav e to mak e a change in more than one location. b) Changes ( y ou can tell) will r es ult in dev elopment collis ions . c) The code is too obfus cated to be clear ly under s tood. CP S C 310: Introduction to S oftware E ngineer ing Divergent Changes If y ou look at a clas s and s ay , \"W ell, I will hav e to change t hese t hree met hod s ever y t ime I get a new databas e connection; I hav e to change t hese four met hod s ever y t ime there is a new ﬁ nancial ins tr ument,\" y ou lik ely hav e a s ituation in which t w o classes are b et ter t han one . That way each ob ject is changed only as a result of one kind of change . Of cour s e, y ou often dis cov er this only after y ou'v e added a few databas es or ﬁ nancial ins tr uments . Divergent changes occur when one clas s is commonly changed in diﬀ erent way s for diﬀ erent reas ons . A ny change to handle a v ar iation s hould change only a s ingle clas s , and that clas s s hould capture the unique v ar iation. CP S C 310: Introduction to S oftware E ngineer ing Divergent Changes W ill need to change whenev er the inv es tments implementation is changed. W ill need to change whenev er the loans implementation is changed. W ill need to change ev er y time the pr inting implementation is changed. CP S C 310: Introduction to S oftware E ngineer ing E xt ract Behaviours Into Their O w n Classes Delegate as ap p rop riate. CP S C 310: Introduction to S oftware E ngineer ing S ymp tom: Diver g en t Ch an g es Cod e smell: O n e Cl ass is Actu al l y T w o There is more than one ﬁ eld related to the telephone number, which giv es it more weight. There might be additional methods s uppor ting the phone number. CP S C 310: Introduction to S oftware E ngineer ing Cod e S mell: O n e Cl ass is Actu al l y T w o Refactoring: E xtr act Cl ass A nd delegate! ! ! P erson p = new P erson() p.getTelephoneNumber() CP S C 310: Introduction to S oftware E ngineer ing Cod e S mell: O n e Cl ass is Actu al l y T w o Refactoring: E xtr act Cl ass S eems to be about billing, not about being a cus tomer ! CP S C 310: Introduction to S oftware E ngineer ing Cod e S mell: O n e Cl ass is Actu al l y T w o Refactoring: E xtr act Cl ass // custom er.p r intS ta tm ent(); → const inv oice = new Inv oice(custom er ); inv oice.p r intS ta tem ent(); The approach here is ty pically to mak e the clas s , then copy the methods ov er, then get them to compile, then alter the inv ocation s o the new methods are being called, and r un tes ts . Only then do y ou delete the old methods . CP S C 310: Introduction to S oftware E ngineer ing S hot gun S urger y C atchy s y nony m for Delocaliz ed or S cat tered change. Y ou whiﬀ this when ev er y time y ou mak e a kind of change y ou hav e to mak e lots of little changes in lots of diﬀ erent places . When changes are s cattered they ’re hard to ﬁ nd and eas y to mis s . CP S C 310: Introduction to S oftware E ngineer ing Divergent Changes and S hot gun S urger y Refactoring (T he Ruby E dition) by F ields, Harvie and F owler Divergent change is one clas s that s uﬀ er s many kinds of changes , and shot gun surger y is one change that alter s many clas s es . E ither way y ou want to ar range things s o that, ideally , there is a one-to-one link between common changes and clas s es . [Fields , Har v ie, & F owler ] CP S C 310: Introduction to S oftware E ngineer ing Und erp inning P rincip le of Design Mak es an imp or t ant st atement on O O d esign: That clas s es not jus t be cons idered in ter ms of their apparent res pons ibility , but mus t als o be centered around their empir ically obs er v ed relev ance! S y s tems s hould be decompos ed to s uppor t ev olution.","libVersion":"0.2.1","langs":""}