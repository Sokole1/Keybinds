{"path":".obsidian/plugins/text-extractor/cache/a709e073e34ced45a9b2d0d764da26fc.json","text":"CPSC 320: Steps in Algorithm Design and Analysis Part b ∗ Step 5: Design a better algorithm. 1. Brainstorm some ideas, then sketch out an algorithm. Try out your algorithm on some examples. You may have lots of ideas. For example, you might have noticed that if a employer and a applicant both most-prefer each other, we must match them; that might form the kernel of some kind of algorithm. For our algorithm, we’ll work with the Gale-Shapley algorithm, also in textbook and on part b of this worksheet. 1: function Gale-Shapley(n, PE, PA) 2: ▷ n ≥ 1 is the number of employers and also the number of applicants 3: ▷ PE is the collection of complete preference lists (>e) of the employers 4: ▷ PA is the collection of complete preference lists (>a) of the applicants 5: ▷ return a stable matching M for the stable matching instance (n, PE, PA) 6: 7: M ← ∅ ▷ matching M is initially empty 8: while some employer is unmatched and has not considered every applicant do 9: choose any such employer e 10: let a be the highest-ranked applicant in e’s list that e has not yet considered 11: ▷ e now considers a (i.e., \"makes an oﬀer\" to a) as follows: 12: if a is unmatched then 13: add match (e, a) to M ▷ a accepts e’s oﬀer 14: else ▷ a is matched 15: let a be currently matched to e′ 16: if e >a e′ then ▷ a prefers e to e′ 17: remove match (e′, a) from M ▷ a rejects e′’s oﬀer 18: add match (e, a) to M ▷ a accepts e’s oﬀer 19: else ▷ a prefers e′ to e, in which case M does not change 20: return M ∗Copyright Notice: UBC retains the rights to this document. You may not distribute this document without permission. 1 2. Analyze the running time of your algorithm. Using big-O notation, can you bound the number of iterations of the while loop? How much time does each iteration take? 2 3. Is your bound of part 2 tight in the worst case? 3 4. Show that your algorithm is correct. It’s always good to start by writing down what it means for the algorithm to be correct. For the SMP problem, it means that the algorithm outputs a perfect matching with no instabilities. • Show that the output is a perfect matching. We’ll break this down further: – Every applicant has been considered at least once upon termination. – Every applicant is matched upon termination. – Every employer is matched upon termination. 4 • Show that the output has no instabilities. Recall that a pair (e, a′) is an instability if (e, a) and (e′, a′) are distinct pairs in M , and also e prefers a′ to a, and a′ prefers e to e′. That is, e and a′ would prefer to be matched with each other than with their matches in M . One natural approach is to show that the (partial) matching constructed after each iteration of the While loop avoids instabilities. Let Mk be the matching at the end of iteration k ≥ 0 of the While loop, and let Ek and Ak be the set of employers and the set of applicants, respectively, that are matched in Mk. Show by induction that there is no instability in Ek × Ak with respect to Mk. Claim: There is no instability in Ek × Ak with respect to Mk. Base case: Inductive step: 5 Challenge problems These are just for fun, some are easier than others. 1. Design an algorithm to generate each possible perfect matching between n employers and n applicants. (As always, it will help tremendously to start by giving your algorithm and its parameters names! Your algorithm will almost certainly be recursive.) 2. A \"local search\" algorithm might pick a matching and then \"repair\" instabilities one at a time by matching the pair causing the instability and also matching their partners. Use the smallest possible instance to show how bad this algorithm can get. 3. Design a scalable SMP instance that forces the Gale-Shapley algorithm to take its maximum possible number of iterations. How many is that? (A \"scalable instance\" is really an algorithm that takes a size and produces an instance of that size, just like the \"input\" in worst case analysis is scalable to any n.) 6","libVersion":"0.2.1","langs":""}