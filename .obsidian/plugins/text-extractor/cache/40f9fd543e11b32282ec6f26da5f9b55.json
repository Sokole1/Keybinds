{"path":".obsidian/plugins/text-extractor/cache/40f9fd543e11b32282ec6f26da5f9b55.json","text":"William Kang Mathematics 318 Homework 8 77253938 Question 1 1 William Kang Mathematics 318 Homework 8 77253938 Question 2 2 William Kang Mathematics 318 Homework 8 77253938 3 William Kang Mathematics 318 Homework 8 77253938 Question 3 4 William Kang Mathematics 318 Homework 8 77253938 Question 4 5 William Kang Mathematics 318 Homework 8 77253938 Question 5 import random def tau_1d ( t : int ) -> float : if t == 0 : # Impossible to return to origin in zero steps return float ( ' inf ' ) position = 0 # on a line 0 is the origin time = 0 while time < t : time += 1 directions = [ - 1 , 1 ] # Left or Right move = random . choice ( directions ) position += move if position == 0 : return time return float ( ' inf ' ) def tau_2d ( t ) : if t == 0 : # Impossible to return to origin in zero steps return float ( ' inf ' ) 6 William Kang Mathematics 318 Homework 8 77253938 position = [ 0 , 0 ] # Origin in 2D time = 0 while time < t : time += 1 directions = [ [ - 1 , 0 ] , [ 1 , 0 ] , [ 0 , 1 ] , [ 0 , - 1 ] ] move = random . choice ( directions ) position [ 0 ] += move [ 0 ] position [ 1 ] += move [ 1 ] if position == [ 0 , 0 ] : return time return float ( ' inf ' ) def tau ( t , d ) : if d == 1 : return tau_1d ( t ) elif d == 2 : return tau_2d ( t ) else : raise Exception ( \" d must be 1 or 2 \" ) 7 William Kang Mathematics 318 Homework 8 77253938 import numpy as np import matplotlib . pyplot as plt repeats = 4000 max_time = 5000 rs = [ ] an = [ 0 ] * max_time for _ in range ( repeats ) : time = tau ( max_time , 1 ) # Just in case tau returned infinity take min for i in range ( min ( time , max_time ) ) : an [ i ] += 1 X = np . log ( list ( range ( 1 , max_time + 1 ) ) ) Y = np . log ( np . array ( an ) / 4000 ) p = np . polyfit ( X , Y , 1 ) line = p [ 1 ] + p [ 0 ] * X plt . plot ( X , Y ) plt . plot ( X , line ) plt . title ( \" Linear regression with intercept = \" + str ( round ( p [ 1 ] , ndigits = 3 ) ) + \" and slope = \" + str ( round ( p [ 0 ] , ndigits = 3 ) ) ) plt . xlabel ( \" Value of X \" ) plt . ylabel ( \" Value of Y and line \" ) 8 William Kang Mathematics 318 Homework 8 77253938 9 William Kang Mathematics 318 Homework 8 77253938 import numpy as np import matplotlib . pyplot as plt repeats = 4000 max_time = 5000 rs = [ ] an = [ 0 ] * max_time for _ in range ( repeats ) : time = tau ( max_time , 2 ) # Just in case tau returned infinity take min for i in range ( min ( time , max_time ) ) : an [ i ] += 1 X = np . log ( list ( range ( 1 , max_time + 1 ) ) ) Y = 1 / ( np . array ( an ) / 4000 ) p = np . polyfit ( X , Y , 1 ) line = p [ 1 ] + p [ 0 ] * X plt . plot ( X , Y ) plt . plot ( X , line ) plt . title ( \" Linear regression with intercept = \" + str ( round ( p [ 1 ] , ndigits = 3 ) ) + \" and slope = \" + str ( round ( p [ 0 ] , ndigits = 3 ) ) ) plt . xlabel ( \" Value of X \" ) plt . ylabel ( \" Value of Y and line \" ) 10 William Kang Mathematics 318 Homework 8 77253938 11","libVersion":"0.2.1","langs":""}