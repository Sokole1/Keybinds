{"path":".obsidian/plugins/text-extractor/cache/7d603b16bfc873b6f11cf50a0449acd3.json","text":"6. Modify the QuickSort algorithm so that it finds the element of rank k. Just cross out or change parts of the code below as you see fit. Change the function’s name! Add a parameter! Feel the power! SOLUTION: The key difference is that we no longer need the recursive calls on both sides, only on the side with the element we seek. function QUICKSELECT(A[L..n], k) // returns the element of rank k in an array A of n distinct numbers, where 1 <k <n if n > 1 then Choose pivot element p = A[1] Let Lesser be an array of all elements from A less than p Let Greater be an array of all elements from A greater than p if |Greater| = k - 1 then return p else if |Greater| > k - 1 then // all larger elts are in Greater; k is unchanged return QuickSelect(Greater, k) else// |Greater| < k —1 // subtract from k the number of larger elts removed return QuickSelect(Lesser, k— |Greater| —1) else return A[l]","libVersion":"0.2.1","langs":"eng"}