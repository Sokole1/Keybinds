{"path":".obsidian/plugins/text-extractor/cache/301d38525481317e2aec9c263ceffdd0.json","text":"GUI Des ign P atter ns Topics CP S C 310: Introduction to S oftware E ngineer ing 310 Course S ur veys Cour s e Components : ● Jour nals - enjoy ed? Us eful for lear ning cour s e concepts ? ● Mandator y Labs - was it us eful to meet with y our TA ? L ectures : ● A ctiv ities - more in-clas s programming? ● P acing - too s low? Too fas t? ● Content - I wis h I lear ned x ? F av our ite/L eas t F av our ite topic https: / / seoi. ubc. ca/ surveys CP S C 310: Introduction to S oftware E ngineer ing 310 Course S ur veys Cour s e Components : ● Jour nals - enjoy ed? Us eful for lear ning cour s e concepts ? ● Mandator y Labs - was it us eful to meet with y our TA ? L ectures : ● A ctiv ities - more in-clas s programming? ● P acing - too s low? Too fas t? ● Content - I wis h I lear ned x ? F av our ite/L eas t F av our ite topic https: / / seoi. ubc. ca/ surveys CP S C 310: Introduction to S oftware E ngineer ing Deﬁ nition: A visual w ay of interacting with a computer. G UI ( G rap hical User I nter face) Des ktop A pplications W eb A pplications A b st ract ion (high lev el concept at the root of all that follows ) D ecomp osit ion (mechanis m for ideating about abs tractions ) I nformat ion hid ing (how programs lev erage abs traction) E ncap sulat ion (language approach for implementing infor mation hiding) ▼ coupling ▲ cohes ion Design P rincip les S t ill A p p ly DILOS CP S C 310: Introduction to S oftware E ngineer ing GUIs (Clients ) Thin Thick S imple, bas ic webs ites IDE in the brows er… E xamp les of G UI P at terns MV C Topics CP S C 310: Introduction to S oftware E ngineer ing • K now what the main MV C components are and what behav iour s each s hould prov ide. • B e able to des cr ibe the control ﬂ ow as updates ar is e from the model or v iew in a MV C-bas ed s y s tem. • Under s tand the beneﬁ ts and tradeoﬀ s of MV C and how the patter n lev erages other des ign patter ns . • Des cr ibe the MV C des ign choices and how they s uppor t they s uppor t s peciﬁ c S OLID pr inciples . E xaminab le s kills MV C CP S C 310: Introduction to S oftware E ngineer ing Mod el- V iew -Cont roller ( MV C) Model Controller Manages Data and B us ines s L ogic R outes Commands to Model and V iew V iew Handles Lay out and Dis play A pplication CP S C 310: Introduction to S oftware E ngineer ing Mod el- V iew -Cont roller ( MV C) Model Controller Manages Data and B us ines s L ogic V iew Handles Lay out and Dis play R outes Commands to Model and V iew HTML/CS S Databas e Jav as cr ipt A pplication CP S C 310: Introduction to S oftware E ngineer ing Mod el- V iew -Cont roller ( MV C) Model Controller Manages Data and B us ines s L ogic V iew Handles Lay out and Dis play R outes Commands to Model and V iew HTML/CS S Databas e HTML/ Jav as cr ipt InsightFacade.ts class InsightFacade implements IInsightFacade { … } sections.json QuerySender.js xhr.open(\"POST\", \"query\"); xhr.setRequestHeader(\"Content -Type\", contentType); A pplication Server.ts get(\"/datasets\",listDatasets()) post(\"/query\",performQuery(..)) put(\"/dataset/:id\", addDataset(..)) CP S C 310: Introduction to S oftware E ngineer ing A pplication Mod el- V iew -Cont roller ( MV C) Model ControllerV iew UP D A T E S S E NDS INP UT F RO M US E R MANIP UL A T E S S O ME T I ME S UP D A T E S DI RE C T LY Manages Data and B us ines s L ogic Handles Lay out and Dis play R outes Commands to Model and V iew CP S C 310: Introduction to S oftware E ngineer ing Mod el • Contains application data. • This is often per s is ted to a backing s tore. • Deﬁ nes the data s tr ucture. • Contains bus ines s logic (r ules of the application). • Does not: • K now how to pres ent its elf, but is able to ens ure its own integr ity. • C are what is dis play ed and when. CP S C 310: Introduction to S oftware E ngineer ing V iew ( G UI ) • R ender s the Model for the us er. • A llows the us er to manipulate the data (change v iews , CR UD). • C an be reus ed (conﬁ gurable to dis play diﬀ erent data). • Contains P res entation L ogic (knows a bit about what it is dis play ing). • Does not: • Decide when to update its elf. • V alidate data. CP S C 310: Introduction to S oftware E ngineer ing Cont roller • Glues Model and View together. • R es ponds to Us er Interactions : • Updates the model when the us er manipulates the View. • S ometimes updates the v iew when the Model changes . F or e x ample, when the us er reorder s e x is ting data. • C an contain v alidation logic. CP S C 310: Introduction to S oftware E ngineer ing • Concer ns are often par titioned to manage comple x ity. • The ﬁ delity of a concer n will v ar y for diﬀ erent lev els of abs traction. • S R P & IS P are both direct der iv ations of the impor tance of identify ing and is olating concer ns in a des ign. • ModelV iewController (MV C) is a compound des ign patter n that is commonly us ed to s eparate concer ns in us er-facing s y s tems . • While well des igned objects can s eparate concer ns , MV C prov ides a well-under s tood lay er of organiz ation on a des ign. S ep arat ion of Concerns CP S C 310: Introduction to S oftware E ngineer ing MV C Mot ivat ion Main Goal: S ep ar ati o n o f Co n cern s ● S eparates the bus ines s logic from the dis play. ● UI Changes more frequently than bus ines s logic. ● The s ame data is often dis play ed in diﬀ erent way s and the s ame bus ines s logic can dr iv e both. ● Des igner s and dev eloper s are often (us ually ) diﬀ erent people. ● Tes ting UI code can be diﬃcult and e x pens iv e. CP S C 310: Introduction to S oftware E ngineer ing Mod el- V iew -Cont roller ( MV C) Model ControllerV iew C C C C C C C C C C G O O D! ! A pplication CP S C 310: Introduction to S oftware E ngineer ing Mod el- V iew -Cont roller ( MV C) Model ControllerV iew C C C C C C C C C BAD! ! A pplication CP S C 310: Introduction to S oftware E ngineer ing W hat P rincip les d oes t his up hold ? Model ControllerV iew UP D A T E S S E NDS INP UT F RO M US E R MANIP UL A T E S S O ME T I ME S UP D A T E S DI RE C T LY C C C C C C C C C C A pplicationA pplication Model ControllerV iew UP D A T E S S E NDS INP UT F RO M US E R MANIP UL A T E S S O ME T I ME S UP D A T E S DI RE C T LY CP S C 310: Introduction to S oftware E ngineer ing 1 2 3 4 C anonical rep resent at ion CP S C 310: Introduction to S oftware E ngineer ing I nteract ion mechanism • Us er interacts with the UI (View). • UI (View) notiﬁ es controller of changes . • Controller handles notiﬁ cations , proces s ing them into actions that can be per for med on the Model. • Controller modiﬁ es the Model as required. • If the Model changes , it ﬁ res modiﬁ cation ev ents . • Ty pically implemented with pull-bas ed Obs er v er patter n. • The View res ponds to the modiﬁ cation ev ents . CP S C 310: Introduction to S oftware E ngineer ing Comp ound P at tern • MV C (and other s imilar patter ns ) rely upon s ev eral more bas ic des ign patter ns . • In MV C: • View & Controller lev erage the s trategy patter n. • View often us es a compos ite patter n (for nes ted v iews ). • View (obs er v er ) / Model (s ubject) us e the obs er v er patter n. • Other meta-patter ns rely upon s imilar des ign patter ns . CP S C 310: Introduction to S oftware E ngineer ing Beneﬁt s and Trad eoﬀs • P ro: • Decouple v iew from model. • S uppor t multiple v iews [collaborativ e v iews ]. • Maintainability [add new v iews ]. • S plit teams [reliev e cr itical path]. • Tes tability [reduce UI tes ting]. • Con: • Comple x ity [indirection, ev ents ]. • E ﬃciency [frequent updates , large models ]. MV P Topics CP S C 310: Introduction to S oftware E ngineer ing • K now what the main MV P components are and what behav iour s each s hould prov ide. • B e able to des cr ibe the control ﬂ ow as updates ar is e from the model or v iew in a MV P -bas ed s y s tem. • Under s tand the beneﬁ ts of MV P ov er MV C and des cr ibe how thes e improv e the ov erall ev olv ability. • Des cr ibe the MV P des ign choices and how they s uppor t they s uppor t s peciﬁ c S OLID pr inciples . E xaminab le skills MV P CP S C 310: Introduction to S oftware E ngineer ing MV P mot ivat ion • Moder niz e MV C: • Improv e decoupling with e x plicit inter faces . • E nhance tes tability by s implify ing v iews . • F ur ther s eparate des igner s from dev eloper s . • L ev eraged by Jav a S wing, and .NE T CP S C 310: Introduction to S oftware E ngineer ing Mod el- V iew -P resenter ( MV P ) Model P res enter A pplication V iew’s P res entation L ogic V iew (P as s iv e) Handles Lay out and Dis play S E NDS INP UT F RO M US E R UP D A T E S MO DE L UP D A T E S V IE W S TA T E -CHANG E E V E NT S Manages Data and B us ines s L ogic CP S C 310: Introduction to S oftware E ngineer ing Mod el • Contains application data. • This is often per s is ted to a backing s tore. • Does not know how to pres ent its elf. • Is domain independent. • Often ﬁ res ev ents to an E v ent B us . • Thes e are es s entially controller s for aggregating notiﬁ cations . • P rov ides publis h/s ubs cr ibe: • C an notify general ev ents without object regis tration. CP S C 310: Introduction to S oftware E ngineer ing V iew • Thin UI Controller front-end. • Does not s tore data. • C an be interchanged eas ily. • S ometimes refer red to as a ‘pas s iv e’ v iew . • Never acces s es or manipulates Model objects . • Only interacts with pr imitiv es . • e.g., ( setUserName(String) ins tead of setUser(User) ). CP S C 310: Introduction to S oftware E ngineer ing P resenter • Glues Model and View together. • Updates the View when the Model changes . • Updates the Model when the us er manipulates the View. • Trans lates between the pr imitiv es the View knows about and the domain-s peciﬁ c proper ties of the Model. • This prov ides a much nicer tes ting s ur face: • E as y to assert / expect pr imitiv e v alues . • Hous es the pres entation logic. CP S C 310: Introduction to S oftware E ngineer ing V iew s & p resenters are t ight ly coup led inter f a ce I V iew { setP resenter (p : I P resenter): v oid ; sh owMa in(): v oid ; } inter f a ce I P resenter { onC a ncel(): v oid ; onAction(a ction: str ing ): b oolea n; crea teV iew(): I V iew; } const p : I P resenter = new C oncreteP resenter (); const v: I V iew = p .crea teV iew(); v.setP resenter (p ); // could b e d one in crea teV iew too ( t hrough inter faces) CP S C 310: Introduction to S oftware E ngineer ing A b st ract top ology 1 2 3 4 CP S C 310: Introduction to S oftware E ngineer ing Beneﬁt s and t rad eoﬀs • S ame as MV C with improv ed: • Decoupling of Views and Model. • S plit teams . • Tes tability [reduce UI tes ting]. • Clearer s eparation of concer ns between V iews and P res enter s . • DIP us ed to decreas e coupling between lay er s . • S R P and OCP better enforced by clearer roles . • A little les s comple x than MV C [fewer ev ents ]. CP S C 310: Introduction to S oftware E ngineer ing A pplication Mod el- V iew - V iew Mod el ( MV V M) Model V iewModelV iew Handles Lay out and Dis play UP D A T E S MO DE L D A TA BINDING S TA T E -CHANG E E V E NT S Manages Data and B us ines s L ogic V iew’s B us ines s L ogic CP S C 310: Introduction to S oftware E ngineer ing MV V M • Data B inding links the V iew and V iewModel. • (V iewModel has no reference to the V iew) • B inder, framewor k-managed communication automation. • R educes coupling between the V iew and V iewModel. • Improv es s eparation of concer ns . • UX des igner s can focus on V iews . • Dev eloper s can focus on V iewModels & Models . Component B as ed Topics CP S C 310: Introduction to S oftware E ngineer ing • K now what a component is and how components relate to each other in thick-client web des ign. • K now the k ey par ts of a component and how components communicate with each other. • K now the diﬀ erence between S mar t (Container ) Components and Dumb (P res entational) Components . • K now the beneﬁ ts (and tradeoﬀ s ) of component des ign compared to MV C, MV P and MV V M. E xaminab le s kills Comp onent Based Design CP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ingCP S C 310: Introduction to S oftware E ngineer ing ● “E ncaps ulate indiv idual pieces of a larger us er inter face into s elf-s us taining, independent micros y s tems ”[1] ● R eus able ‘piece’ of the UI. ● Hierarchical s tr ucture. Comp onent Based A rchitect ure [ 1] [ https : //medium.com/@ dan.s hapiro1210/under s tanding-component-bas ed-architecture-3ﬀ 48ec0c238] CP S C 310: Introduction to S oftware E ngineer ing E ach component contains : ● V iew: ○ HTML Template with data binding. ● Controller (is h): ○ P res entation logic neces s ar y to render v iew . ○ S ometimes bus ines s r ules s neak in here as well (but hopefully not). Comp onent Based A rchitect ure CP S C 310: Introduction to S oftware E ngineer ing ● Open S ource Components (Drag and Drop UIs ) ○ E as y to maintain. ○ Quick to s et-up (add librar y ). ○ Cons is tent: wor k acros s diﬀ erent brows er s (les s tes ting). ○ A cces s ibility. ○ P olis hed UI components . ● E .g. A ntDes ign, Mater ialUI. Comp onent Lib raries Mater ial Lis t CP S C 310: Introduction to S oftware E ngineer ing Comp onent Communicat ion P arent Component Child Component Data B inding (Model Updates ) Us er E v ents (C allback F unctions ) CP S C 310: Introduction to S oftware E ngineer ing Beneﬁt s and t rad eoﬀs • V iew is is olated, encaps ulated, and s mall: • Improv es tes ting. • S av es dev elopment time. • Increas ed per for mance when updating the UI. • E ncourages S R P. • Increas es cons is tency acros s the application. • E nhanced reus ability. • A dds comple x ity. • E as y to ov er-engineer (create unneces s ar y components ). CP S C 310: Introduction to S oftware E ngineer ing P atter ns are reus able s olutions to commonly occur r ing des ign problems that generally improv e on: • E x tens ibility • R eus ability • E v olv ability The mos t impor tant as pect of patter ns to under s tand is the problem they are tr y ing to s olv e. B y under s tanding their intents , we can generally der iv e the pr inciples that motiv ated them and how their implementations are s tr uctur ed . P atter ns did not emerge on their own. They aros e as concrete mechanis ms to s uppor t des ign pr inciples . Design P at tern S ummar y","libVersion":"0.2.1","langs":""}