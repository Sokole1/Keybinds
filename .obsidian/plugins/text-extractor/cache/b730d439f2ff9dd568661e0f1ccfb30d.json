{"path":".obsidian/plugins/text-extractor/cache/b730d439f2ff9dd568661e0f1ccfb30d.json","text":"1 A spanning algorithm Let G = (V,E) be a connected, undirected graph with n > 2 nodes and m weighted edges, where w(e) denotes the weight of edge e. The following algorithm is similar but not identical to Kruskal’s minimum spanning tree algorithm (if you have not read that yet, you should still be able to complete these problems). procedure SPANNING(G = (V, E), w()) G' = (V,E') where E' =0 > initially there are no edges in the output produced while G’ is not connected do E-new =0 for each connected component C of G’ = (V, E’) do choose any edge e = (u,v) € E of minimum weight w(e) that connects a node u in C' to a node v that is not in C E-new = E-new U{e} E' = E'U E-new > edges in E-new are added to the output return G' = (V, E') 1. For the following graph, when the edge weights are all 1, describe edge choices in the for loop of the first iteration of the while loop, which ensure that the algorithm halts after that first iteration. D-CO-CO-OCEOOCE® 2. For the same graph above, describe alternative edge choices in the first iteration of the while loop, that result in more than one iteration of the while loop. 3. Consider the“line” graph with nodes 1,2, ...n and edges (1,2),(2,3),...,(n — 1,n). On this graph, how many iterations of the while loop will be executed in the worst case? 4. For the same line graph as in the previous part, how many iterations of the while loop will be executed in the best case? 5. Provide an example of a graph G and weight function w() on which the algorithm may not produce a tree.","libVersion":"0.2.1","langs":"eng"}