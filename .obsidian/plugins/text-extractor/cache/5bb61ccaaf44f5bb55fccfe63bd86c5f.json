{"path":".obsidian/plugins/text-extractor/cache/5bb61ccaaf44f5bb55fccfe63bd86c5f.json","text":"4. Runtime and Measures of Progress The following code is a small function written in Python: def rewrite( str ): while \"Alan\" in str: str = str.replace(\"Alan\",\"Patrice\",1) print str return; The loop condition checks whether the substring “Alan” occurs in the string str, and the assignment statement replaces the first occurence of the substring “Alan” with the substring “Patrice”. For example, if the function is called on: rewrite(\"I like Alan more than Alan.\") it will print the following output: I like Patrice more than Alan. I like Patrice more than Patrice. 5. [3 marks] Define a progress measure for the while loop and use it to prove that the loop always terminates. (Hint: This is very short.) 6. |3 marks| Let n be the original length of the string str that is passed to the function. Give a tight big-© bound on the worst-case number of times that the loop body executes, in terms of n. Briefly justify your answer. (Hint: This is also very short.)","libVersion":"0.2.1","langs":"eng"}