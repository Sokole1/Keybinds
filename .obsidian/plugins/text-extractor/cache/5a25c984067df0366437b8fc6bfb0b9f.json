{"path":".obsidian/plugins/text-extractor/cache/5a25c984067df0366437b8fc6bfb0b9f.json","text":"1) We want to calculate 1234 7865435 mod 11. Note that 1234 ≡ −1+2−3+4 (mod 11), that is, 1234 ≡ 2 (mod 11). Since gcd(2,11) = 1 we have 2 10 ≡ 1 (mod 11). Now 7865435 = (786543) · 10 + 5 so 2 7865435 ≡ 2 (786543)·10+5 (mod 11) ≡ \u00002 10 \u0000 786543 · 2 5 (mod 11) ≡ 1 786543 · 2 5 (mod 11) ≡ 2 5 (mod 11), and 2 5 = 32 ≡ 10 (mod 11). Hence, 1234 7865435 ≡ 10 (mod 11). It follows that 1234 7865435 mod 11 = 10. 2) We compute 3 15 mod 10: Let us ﬁrst use Fast Modular exponentiation (FME) . Write 15= 8+4+2+1 . 3 2 =3·3=9 ≡ 9 (mod10) 3 4 = 9·9 = 81 ≡1 (mod10) 3 8 ≡ 1·1 ≡ 1 ≡1 (mod10) and so 3 15 = 3 8 · 3 4 · 3 2 · 3 1 ≡ 1 · 1 · 9 · 3 = 27 ≡ 7 (mod 10). Hence 3 15 ≡ 7 (mod 10). To compute 2 644 mod 645 the long way by FME, write 644=512+128+4 = 2 9 +2 7 +2 2 . By successive squaring and reducing modulo 645 we get 2 2 =2·2=4≡4 (mod645) 2 4 ≡4·4=16≡16 (mod645) 2 8 ≡16·16=256≡256 (mod645) 2 16 ≡256·256=65,536≡391 (mod645) 2 32 ≡391·391=152,881≡16 (mod645) 2 64 ≡16·16=256≡256 (mod645) 2 128 ≡256·256=65,536≡391 (mod645) 2 256 ≡391·391=152,881≡16 (mod645) 2 512 ≡16·16=256≡256 (mod645). Now 2 644 = 2 512 ·2 128 ·2 4 , and hence 2 644 ≡ 256·391·16 (mod645). So 256·391 = 100099 ≡ 121 (mod 645) and 121·16 = 1936 ≡ 1 (mod 645). Hence 2 644 mod 645 = 1. 3) We ﬁrst ﬁnd 128 129 mod 17. Note that 17 is a prime and 17 does not divide 128. Thus 128 16 ≡ 1 mod 17. Now note 128=16x8. Also 128 ≡ 9 mod 17. Hence writing 129=128+1 = (6x128) +1, we get 128 129 ≡ 9 1 ≡ 9 mod 17. By Fermat’s Little Theorem, 29 10 ≡ 7 10 ≡ 1 mod 11. Thus, 29 25 ≡ 7 5 ≡ 7(−4) 4 ≡ 7 · 256 ≡ 7 · 3 ≡ 21 ≡ 10 mod 11. 4) By Fermat’s LittleTheorem, 2 6 ≡ 3 6 ≡ 4 6 ≡ 5 6 ≡ 6 6 ≡1 mod 7. Thus, 2 20 +3 30 +4 40 +5 50 + 6 60 ≡ 2 2 +3 0 +4 4 +5 2 +6 0 ≡ 4+1+2 8 +25+1≡ 4+1+4+4+1≡14≡ 0 mod 7.","libVersion":"0.2.1","langs":""}