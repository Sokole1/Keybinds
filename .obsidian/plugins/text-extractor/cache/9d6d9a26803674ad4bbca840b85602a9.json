{"path":".obsidian/plugins/text-extractor/cache/9d6d9a26803674ad4bbca840b85602a9.json","text":"CP S C 3 1 3 Y8 6 AL U O p e r a t i o n s • To p i c • Ar i t h m e t i c a n d l o g i c a l o p e r a t i o n s o f t h e y 8 6 • Lear ni ng O bj ect i ves • De f i n e A L U • De s c r i b e a l l t h e y 8 6 A L U o p e r a t i o n s • De s c r i b e h o w e a c h A L U o p e r a t i o n a f f e c t s e a c h c o n d i t i o n co d e • Re a d / Wr i t e s i m p l e y 8 6 p r o g r a m s u s i n g M O V a n d A L U oper at i ons . • Re a d i n g • 4. 1. 3 ( pl us bl ue box es ) 1 Ar i t h m e t i c a n d L o g i c a l I n s t r u c t i o n s CP S C 3 1 3 2 % rax % rsp %r8 %r12 % rcx % rbp %r9 %r13 % rdx % rsi %r10 %r14 % rbx % rdi %r11 2 - by t e i ns t r uc t i on 6 fu n rA rB OPQ % rA , % rB 6 0 8 9 R[% rB ] < - R[% rB ] <fun> R[% rA ] ADDQ %r8, %r9 SUBQ %r8, %r9 ANDQ %r8, %r9 XORQ %r8, %r9 6 1 8 9 6 2 8 9 6 3 8 9 In - Me mo r y Bo n u s AL U O p e r a t i o n s • Wh i l e t h e y 8 6 i n t h e t e x t s u p p o r t s o n l y A D D Q , S U B Q , AN D Q , a n d XO R Q , C PSC 3 1 3 h a s t h r e e b o n u s AL U oper at i ons: • MU L Q ( f u n = 4 ) : • MU L Q % r 8 , % r 9 # R[ % r 9 ] < - R[ % r 9 ] * R[ % r 8 ] • DI V Q ( f u n = 5 ) • DI VQ % r 8 , % r 9 # R[ % r 9 ] < - R[ % r 9 ] / R[ % r 8 ] • MO D Q ( f u n = 6 ) • MOD Q % r 8 , % r 9 # R[ % r 9 ] < - R[ % r 9 ] % R[ % r 8 ] CP S C 3 1 3 3 Co n d i t i o n Co d e s • Re c a l l : T h e r e a r e t h r e e c o n d i t i o n c o d e s • ZF: Ze r o – se t i f l a st o p e r a t i o n p r o d u ce d 0 • SF : Si g n – se t i f l a st o p e r a t i o n p r o d u ce d a n u m b e r < 0 • OF : Ov er f l ow – se t i f l a st a r i t h m e t i c o p e r a t i o n p r o d u ce d a 2 ’ s co m p l e m e n t o ve r f l o w ( t h e o p e r a n d s h a d t h e sa m e si g n , b u t th e r e s u l t h a s a d i ffe r e n t s i g n ) • Th e s e a r e s e t o n e v e r y AL U o p e r a t i o n ( a n d a r e t h e n used t o cont r ol condi t i on i nst r uct i ons) . CP S C 3 1 3 4 CC E x a m p l e s • Let ’ s f i gur e out how each of t hese oper at i ons w oul d set t he condi t i on codes. CP S C 3 1 3 5 irmovq 0x1, % rax irmovq 0x2, % rbx addq % rax , % rbx # rbx = 1 + 2 = 3 subq % rax , % rbx # rbx = 3 – 1 = 2 subq % rbx , % rax # rax = 1 – 2 = 0xFF…F xorq % rax , % rax # rax = 0 xorq % rax , % rax # Still 0 subq % rbx , % rax # rax = 0 – 2 = 0xFFFF...E andq % rax , % rax # rax = unchanged addq % rax , % rax # rax = - 2 + - 2 = 0xFFF...C addq % rax , % rbx # rbx = 2 + - 4 = 0xFFF…E addq % rbx , % rax # rax = - 2 + - 4 = 0xFFF..A irmovq 0x1, % rax # rax = 1 addq % rbx , % rax # rax = 0xFFFF…F irmovq 0x3, % rax # rax = 3 addq % rax , % rbx # rbx = 0 # Generate Overflow irmovq 0x7FFFFFFFFFFFFFFF, % rax $ addq % rax , % rax $","libVersion":"0.2.1","langs":""}