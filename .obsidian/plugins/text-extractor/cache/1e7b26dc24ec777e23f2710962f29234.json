{"path":".obsidian/plugins/text-extractor/cache/1e7b26dc24ec777e23f2710962f29234.json","text":"CPSC 320o 2014W2 Final Exam Practice Problems April 15, 2015 ‹ ∑x y=1 y = x(x+1) 2 , for x ≥ 0. ‹ ∑x y=1 y2 = x(x+1)(2x+1) 6 , for x ≥ 0. ‹ ∑x y=0 2y = 2x+1 − 1, for x ≥ 0. For a recurrence like T (n) = aT ( n b ) + f (n), where a ≥ 1 and b > 1, the Master Theorem states three cases: 1. If f (n) ∈ O(nc) where c < logb a then T (n) ∈ Θ(nlogb a). 2. If for some constant k ≥ 0, f (n) ∈ Θ(nc(log n)k) where c = logb a, then T (n) ∈ Θ(nc(log n)k+1). 3. If f (n) ∈ Ω(nc) where c > logb a and af ( n b ) ≤ kf (n) for some constant k < 1 and su˚ciently large n, then T (n) ∈ Θ(f (n)). ‹ f (n) ∈ O(g(n)) (big- O, that is) exactly when there is a positive real constant c and positive integer n0 such that for all integers n ≥ n0, f (n) ≤ c · g(n). ‹ f (n) ∈ o(g(n)) (little- o, that is) exactly when for all positive real constants c, there is a positive integer n0 such that for all integers n ≥ n0, f (n) ≤ c · g(n). ‹ f (n) ∈ Ω(g(n)) exactly when g(n) ∈ O(f (n)). ‹ f (n) ∈ ω(g(n)) exactly when g(n) ∈ o(f (n)). ‹ f (n) ∈ Θ(g(n)) exactly when f (n) ∈ O(g(n)) and f (n) ∈ Ω(g(n)). 1 1 Practice Intro These problems are meant to be generally representative of our ˝nal exam problems and\u0016in some cases\u0016 may be very similar in form or content to the real exam. However, this is not a real exam. Therefore, you should not expect that it will ˝t the predicted exam timeframe or that the questions will be of the appropriate level of speci˝city or di˚culty for an exam. (That is: the real exam may be shorter or longer and more or less vague!) Furthermore, there are many other practice resources you should attend to\u0016not least our own previous midterms and practice midterms. All of that said, you would bene˝t tremendously from working hard on this practice exam! 2 2 Clark Kent's Glasses Consider these well-known problems (mostly, but not all, NP-complete): A. Independent Set F. Graph Colouring K. Knapsack (p. 267) B. Set Packing G. Hamiltonian Cycle L. Stable Marriage C. Vertex Cover H. Hamiltonian Path M. Sorting D. Set Cover I. Traveling Salesman N. Minimum spanning tree E. 3-D Matching J. Subset Sum Each of the problems below is a \u0010disguised\u0011 version of one of the problems above. Some problems above may be used multiple times; others may not be used at all. For each problem below, write the letter of the problem above it best matches. The (extremely heatproof) Venus Rover has just landed. Researchers have input a set of sites they'd like the rover to visit. For each pair of sites, mission control has computed the probability of the rover making it between sites without breaking down. They'd like to ˝nd a path that visits all the sites while maximizing the chance the rover will remain functional (not break down). (Note: this one's a bit tricky. In particular, you want to maximize the product of the probabilities along each leg, but what's the log of that quantity?) In your secure cloud computing system, a user rates each other user as \u0010trusted\u0011 or \u0010untrusted\u0011. Each user is allocated a virtual machine on a single physical machine, but many virtual machines may run on the same physical machine. Given the number of physical machines available, can you allocate everyone to some physical machine without putting two users that distrust each other on the same physical machine? A safety program pairs people up across campus into \u0010safety buddies\u0011. Some people are in more than one pair, however (depending on their involvement in the program). The program organizers want to run a training session so that in every group, at least one buddy has been trained. In particular, they'd like to ensure this while keeping the session as small as possible. CS creates a new protocol where students seeking advising rate the advisors, while advisors \u0010bid\u0011 on the students they want to advise (e˙ectively also rating them). The system assigns an advisor to each student. The department chooses a load (number of advisees) for each advisor. You want to assign advisors to students to respect ratings and bids as well as you can. The government limits lifetime radioactive exposure for workers. Given the radiation limit and a set of k jobs, each of which has a value and a radiation exposure, ˝nd the set of jobs of maximum value that remains below the lifetime exposure limit. You're designing a system to match up groups in the Trimentoring Program, where each group has one mentor, one senior student, and one junior student. You've already pared down the lists so that there is the same number each of mentors, senior students, and junior students. A separate algorithm proposes a list of candidate groups (with potentially many groupings for a particular person). Your algorithm's job is to select a set of groupings among those candidates so that each person is in exactly one trimentoring group. You're working for an embedded computing system manufacturer. One of the key concerns they have is con˝guring how peripherals\u0016extra attached devices\u0016use the input and output ports on the computing devices they build. They've boiled the problem down to the following: A computing device has a labelled list of ports ( 1, 2, . . . , n), and they have a list of candidate peripherals, each with a list of ports it must use (e.g., 1, 3, 8, 9). A single port can only be used by one device at a time. Your job is to ˝nd the largest set of peripheral devices the computing device can support simultaneously. 3 3 O(1) Answer Problems Practice version only: I admit that some of these are not particularly short -answer questions. It's my chance to prepare you for other elements of the exam! :) 1. You have a randomized optimization algorithm with a 1 n lg n chance of yielding the optimal solution to a problem. (Each run of this algorithm has the same, indpendent chance of returning the optimal solution.) How many times should you run the algorithm to upper-bound the probability of its failure by 1 e ? 2. List three reasons you might use randomization in an algorithm. 3. Give ˝ve very di˙erent examples of recurrences to illustrate: the three cases of the Master Theorem and two of the reasons we might not be able to apply the Master Theorem to asymptotically bound a recurrence. Solve each one, showing your work, including values for a, b, c, and f (n). 4. Using any existing well-known algorithms or data structures, give an e˚cient algorithm to ˝nd the kth , 2kth , 3kth , . . . smallest elements of an array of n integers and analyse its runtime in terms of k and n. (Note: this is quite di˚cult for the short-answer section, but has a somewhat similar ˛avor to a style of real question we'd like to ask.) 5. Using any existing well-known algorithms or data structures, give an e˚cient algorithm to count the number of inversions that only the ˝rst k elements of an array of n elements are involved in. 6. Give an example of the conditions under which QuickSelect could run asymptotically slower than DeterministicSelect or indicate why it is not possible. 7. A friend claims that there is a much simpler algorithm to ˝nd the 4th smallest element in an array of n elements than DeterministicSelect in worst-case O(n) time. Give such an algorithm or brie˛y explain why no such algorithm exists. 8. The stable marriage algorithm produces a matching that avoids any instabilities, but instabilities may not be the only factor that makes a matching undesirable. Give two other realistic, important reasons the participants in a matching might ˝nd it undesirable. 9. Consider the statement \u0010A tree is a bipartite graph.\u0011 Is this true of every tree, some trees, or no trees? Brie˛y justify your answer. (Assume both tree and graph are undirected.) 10. Consider the following reduction from VC to SP : Given an instance (GVC = (VVC , EVC ), kVC ) of VC , produce an instance (GSP = (VSP , ESP ), SSP , kSP ) of SP (where SSP are the \u0010shaded\u0011 nodes and kSP is the maximum number of edges in the Steiner Tree) as follows: for each vertex vi ∈ VVC , make an unshaded vertex vvi ∈ VSP ; for each edge (vi, vj) ∈ EVP , make a shaded vertex v(vi,vj ) ∈ VSP and two edges (vvi, v(vi,vj )) and (vvj , v(vi,vj )) in ESP ; make one more shaded vertex vpin ∈ VSP and connect it with edges to every unshaded vertex; and ˝nally, let kSP = |EVC | + kVC . Brie˛y explain why any Steiner Tree that solves an SP instance produced by this reduction must connect to one vertex or the other generated from any pair of vertices connected by an edge in the original VC problem. 11. List two distinct reasons why, given two algorithms to solve the same problem, the one with the better worst-case asymptotic performance may not be the best one to use (although it usually is). 12. You have a single computer to run n jobs. Each job has a duration di. You get to order the jobs; they will then be run to completion, one after another, on the single computer. (So, the total time taken will be the same no matter what.) For each job i, the \u0010delay\u0011 is the amount of time from the start 4 of running the ˝rst job to ˝nishing running job i. (So, the ˝rst job's delay is just its duration; the second job's delay is the sum of its duration and the ˝rst job's duration; etc.) You want to minimize the average delay across all jobs. (a) Which of these is an optimal algorithm to solve the problem: run jobs in increasing order of duration, or run them in decreasing order of duration? (b) Justify the heart of correctness of your algorithm by proving that, if two neighboring jobs are not in the order chosen by your greedy algorithm, swapping them cannot increase the average delay of the solution. 13. Convert this recurrence into memoized pseudocode to solve the same problem. Assume that someone else has written the function f for you. D(i, n) = { 0 when i < 1 or n < i D(i − 1, n − 1) ∗ D(i − 2, n − i) + f (i, n) otherwise 14. For the recurrence from the previous problem, assuming that f(i, n) runs in O(i lg n) time, give (but do not solve) a recurrence T (m, n) for the time it takes to compute D(m, n) without memoization (including all appropriate cases!). 15. True or False: ‹ Even if P = NP , some algorithmic problems may not be solvable in polynomial time. TRUE FALSE ‹ When we say \u0010a problem of size n can be solved in polynomial time\u0011, we mean \u0010all algorithms for solving the problem take O(n c) time in the worst case, for some constant c > 0.\u0011 TRUE FALSE ‹ If P ̸= NP , then each instance of an NP-complete problem takes more than polynomial time to solve. TRUE FALSE ‹ Memoizing an algorithm only helps if the algorithm solves the same subproblem multiple times. TRUE FALSE ‹ The performance recurrences for binary search and mergesort both illustrate examples of the \u0010balanced\u0011 case of the Master Theorem. TRUE FALSE ‹ An adversary can provide input that forces worst-case performance from a version of QuickSort that chooses the median of the ˝rst element, the middle element, and the last element as its pivot. TRUE FALSE ‹ There is an e˚cient algorithm known to ˝nd the minimum spanning tree of an undirected graph with integer (and possibly negative) edge weights. TRUE FALSE ‹ There is an e˚cient algorithm known to ˝nd the longest path between two nodes in a directed graph with postive edge weights. TRUE FALSE 5 4 Some Probes Are More Equal than Others A set of n points (for integer n > 0) numbered 1, 2, 3, . . . , n are arranged in an array. You are given n and an operation probe to access the points. Given a point number p , probe(p) returns p 's associated value. However, probing a point p has a cost cost(p) . (Checking the cost of a point costs nothing, and probing a point more than once also costs nothing.) The points are sorted in increasing order by their associated values ; so, if i and j are point numbers with i < j, then probe(i) < probe(j) . You would like to ˝nd a target value t in such a way that you minimize the worst-case total cost of your probes. 1. Here is a modest-sized instance of the problem: index: 0 1 2 3 4 5 6 value: 2 7 8 13 15 25 90 cost: 20 20 24 10 9 40 10 The minimal worst-case cost of 60 is achievable using a standard binary search approach. Brie˛y explain what target generates the worst-case cost and why. 2. Give at least one trivial and one small instance and their minimal worst-case total probe costs. 3. Give an instance\u0016and its minimal worst-case total probe cost\u0016with 5 points that illustrates that binary search is not an optimal approach in general. 4. Complete this recurrence for the minimum worst-case total probe cost for the subarray A[i..j] , i.e., the subarray that includes indexes i, i + 1, . . . , j − 1, j: C(i, j) = { mini≤k≤j( ) when otherwise 5. Write pseudocode for a memoized version of this algorithm. Be sure to indicate clearly the size of table you will need and any initialization the table requires. 6. Write pseudocode for a dynamic programming version of this algorithm. Be sure to indicate clearly the size of table you will need and the order in which you will solve subproblems. 7. Asymptotically analyse the runtime and memory usage of the memoized solution in terms of n. 8. Assuming you only want to know the minimum worst-case cost of solving the problem (not the actual sequence of probes to make), asymptotically analyse the memory usage of an e˚cient dynamic programming solution. 6 5 Empirical Algorithms You're designing a space game in which a single player explores a set of star systems in the universe. Some pairs of star systems are connected by wormholes; others are not. A wormhole can only be traveled in a single direction. The player can complete a valuable quest at each star system. Because the player is a fugitive closely followed by the evil Empirical Forces, they can never revisit a star system once they leave it. You've written an algorithm to generate an attractive \u0010universe\u0011 (collection of star systems and wormhole connections), but you're stuck on how to ensure that the universe allows for a large enough score for the player. In particular, you want to solve the Space Quest problem SQ : Given a list of the star systems, a list of the wormhole connections, a starting star system for the player, an integer value for each star system's quest, and a \u0010minimum quest result\u0011 k, is there a path through the universe starting at the start system with total value of quests at each system of at least k? 1. Here is an instance of SQ . Circles are star systems; each system's integer quest value is inside its circle. Arrows are wormholes (which can be traveled in the direction of the arrow). The shaded system is the start system. Its solution is YES for k = 5. Circle or shade the wormhole arrows followed to yield a path that respects the problem's constraints. 2. Give a trivial instance of SQ and its solution. 3. Give a small instance of SQ and its solution. 4. Prove that SQ ∈ NP . 5. The Hamiltonian Path problem ( HAMPATH , on directed graphs) is known to be NP-complete. Prove using a reduction involving HAMPATH that SQ ∈ NP-hard . Be sure to clearly indicate which direction your reduction proceeds! 6. The Hamiltonian Cycle problem ( HAMCYCLE , on directed graphs) is known to be NP-complete. Prove using a reduction involving HAMCYCLE that SQ ∈ NP-hard . Be sure to clearly indicate which direction your reduction proceeds! Please do not use HAMPATH (or any other problem) as an intermediate step in your reduction (which would be a meaningless restriction on a real exam). 7. Prove that one of your reductions is correct and takes polynomial-time. 8. A friend proposes a reduction from SQ to HAMPATH that includes this step: \u0010for a vertex v in SQ labeled with quest value q, generate q vertices v1, . . . , vq in HAMPATH . . . \u0011. Explain why such a reduction does not qualify as the kind of \u0010polynomial-time reduction\u0011 we've been using in our NP-completeness proofs. 7 6 Empirical Algorithms Strike Back You're designing a sequel game in which a group of players each controls a Spaaaaace Empire: a set of star systems in the universe. Some pairs of star systems are connected by wormholes; others are not. (Wormholes can be traveled in either direction, but no travel between star systems is possible without a wormhole.) You've written an algorithm to generate an attractive \u0010universe\u0011 (collection of star systems and wormhole connections), but you're stuck on how to divide the universe up among the players when the game starts. In particular, you want to solve the Space Quest 2 ( SQ2 ) problem: Given a list of the star systems, a list of the wormhole connections, a count of players p, and an \u0010empire size\u0011 k, can you assign each star system to exactly one player while ensuring that no player controls any connected set of star systems larger than k? Note: Players may start with no star systems at all. The universe must be connected. On the left below is a modest-sized instance of SQ2 , where circles are star systems and lines are worm- holes. To its right are two alternate assignments of star systems to players (1, 2, and 3) for p = 3 and k = 2 that respect the problem's constraints: 1. Give a trivial instance of SQ2 and its solution. 2. Give a small instance of SQ2 and its solution. 3. Prove that SQ2 ∈ NP . 4. Give a reduction from graph colouring ( GC ) to this problem. Assume the GC graph is connected. Note: For this and all subsequent parts , \u0010reduction\u0011 means \u0010polynomial-time reduction\u0011, but you need not show your reduction takes polynomial time. 5. You decide to modify SQ2 to restrict the number of players so p ≤ 3. Is the problem still NP-complete? Brie˛y justify your answer. 6. Once more you go back and modify the original problem SQ2 to require that the universe\u0016viewed as a graph\u0016is bipartite. In that case, for what values of p and k can you guarantee that the solution to the problem is YES ? Brie˛y justify your answer. 8","libVersion":"0.2.1","langs":""}