{"path":".obsidian/plugins/text-extractor/cache/dae790e532464a016ba858b93e088396.json","text":"CPSC 302, Fall 2023, Assignment 2 Released Saturday, September 23, 2023 Due Wednesday, October 4, 2023, 11:59pm Instructions: Please show all your work. Submit your assignment PDF via Gradescope, and code (Matlab m-ﬁles) via Canvas. Ensure that you properly select the correct pages for each question. Accompanying code should be submitted to Canvas as a zipped ﬁle. Ensure that any code snip- pets/output ﬁgures from your Matlab scripts are included in your gradescope PDF. If you have any questions about the submission procedure that may be of general interest to all students of the course, feel free to write to Piazza. Late submissions: You may hand in your assignment up to 24 hours late, for a penalty of 10% in absolute terms. For example, if your graded assignment is 83% and you handed in one day late, your ﬁnal grade in the assignment is 73%. Assignments are not accepted later than Thursday, October 5, 11:59pm. Bonus question: This assignment includes a bonus question (Question 3), based on Question 2.19 in the textbook. The question is for students who are interested to dive deeper into the material and have the extra time. It will be given 5% of your assignment grade on top of your grade. That is, the overall grade for Questions 1 and 2 is 100%, and the grade for Question 3 is 5%. Questions start here (1 and 2 are mandatory, 3 is an optional bonus question): 1. This question is concerned with the function of the form f (x) = α cosh(x/4) − x, where α is a parameter. All parts of this question pertain to this function, and α is speciﬁed as necessary. For this question and other questions, to make sure you see what is going on, make sure to write format long at the start of your program; it will allow you to see enough digits of accuracy. (a) Conﬁrm graphically by generating two plots that the function has two zeros for α = 1 and none for α = 5 on the interval [−15, 15]. Include your Matlab code and the plots. (b) Compute the zero for α = 1, namely the zero of the function f (x) = cosh(x/4) − x, over the same interval speciﬁed in (a), using the secant method. Use x0 = 0.5 and x1 = 2.0 as your two initial guesses. Your program should use only one hyperbolic function evaluation per iteration; marks will be deducted for an ineﬃcient implementation that is wasteful in terms of function evaluations. Print out the iterates and the absolute function values until the absolute value of the function, i.e., |f (xk)|, goes below 10−10. (c) Comment brieﬂy on the convergence behaviour. There is no need here for a lengthy discussion - just state whether the speed of convergence matches your expectations based on the discussion in the lecture; recall that in the lecture we said that secant converges superlinearly, and that typically with initial guesses suﬃciently close to the solution we would expect to see convergence close enough to the rounding unit within 6-7 iterations. (d) Write a program using a ﬁxed-point iteration of the form xk+1 = cosh(xk/4). Use x0 = 0.5 as an initial guess, and then repeat your experiment with x0 = 2.0. As a convergence criterion, as you did in part (b), stop the iteration when | cosh(xk/4)−xk| < 10−10. (e) Determine using convergence theory whether the theoretical expectation for the scheme in (d) is to converge, and if so, what is the theoretical expected speed of convergence. Determine whether the results of your program support your theoretical expectations. Make sure to give a full answer here, based on the theory for ﬁxed-point iterations that we discussed in the lecture. (f) Going back to the equation presented at the beginning of the question, is there an α for which the function f (x) = α cosh(x/4) − x has precisely one zero? If yes, then ﬁnd it, correct to at least six decimal digits, and the corresponding zero; if not, then justify. Some pen-and-paper work is required here, before any computations are carried out. If you then use a numerical method to compute your answer, your method should use as few as possible function evaluations of hyperbolic functions (such as sinh or cosh). 2. (a) Write a program for computing the cube root of a number, x = 3√a, with only basic arithmetic operations using Newton’s method, by ﬁnding a root of the polynomial equa- tion f (x) = x3 − a = 0. Run your program for a = 2 and a = 10. For each of these cases, start with an initial guess of your choice, reasonably close to the solution. (A reasonably close initial guess may be, for example, x0 = 1 for a = 2 and x0 = 2 for a = 10.) As a stopping criterion, require the absolute function value to be smaller than 10−10. Print out the values of xk and |f (xk)| in each iteration. (b) We typically do not know the solution, but in this case we will compute it and check the iterates against it. To that end, add a few more commands to your program in part (a) as follows: use the command nthroot or just simply use a power of 1/3 to compute the exact cube roots (in Matlab ’s opinion, to machine rounding unit) of a = 2 and a = 10. In each case refer to the exact Matlab value you computed as x∗. Run Newton’s method again and this time print out all the absolute values of the error, namely |xk − x∗|, where xk are your Newton iterates for k = 0, 1, . . . until convergence. (c) Comment on the convergence speed and show that it matches the convergence theory presented in the lecture. Make sure to refer to Newton’s method convergence theorem (see the slide with this title in Chapter 2 slides) and conﬁrm that its conditions are satisﬁed. (d) Repeat your computations for a = 0, starting with x0 = 0.1. In this case the cube root is, trivially, equal to zero, but Newton’s method converges linearly. Explain why. Make sure to provide a full explanation, and determine the constant ρ (see slide entitled Speed of convergence). 2 3. (Bonus question, optional, extra up to 5% of assignment grade) This question provides a glimpse into the pros and cons of higher-order methods. (a) Derive a third order method for solving f (x) = 0 in a way similar to the derivation of Newton’s method, using evaluations of f (xk), f ′(xk) and f ′′(xk). To do this, use Taylor’s expansion with three terms plus a remainder term. Show that in the course of derivation a quadratic equation arises, and therefore two distinct schemes can be derived. Use cancellation error prevention considerations to determine the preferred choice of the two. (Here is where our discussion of the numerical solution of a quadratic equation may come handy.) (b) Show that, under the appropriate conditions, the order of convergence is cubic. (c) Estimate the number of iterations and the cost (in terms of function evaluations per iteration) needed to reduce an initial error of, say, 0.1, by a factor of 10−9. Compare this to the number of iterations it would take to reduce the error by the same factor for Newton’s method. It is okay here to just refer to the general theory of speed of convergence, discussed in the lecture. (d) Write a program for solving the problem of question 1 with α = 1, with two initial guesses: starting from x0 = 0.5 once, and then starting from x0 = 2. Stop the iteration when |f (xk)| < 10−10. (e) Can you speculate what makes this method less popular than Newton’s method, despite its cubic convergence? Give two reasons. 3","libVersion":"0.2.1","langs":""}