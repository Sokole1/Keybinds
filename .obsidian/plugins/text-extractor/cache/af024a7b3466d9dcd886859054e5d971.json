{"path":".obsidian/plugins/text-extractor/cache/af024a7b3466d9dcd886859054e5d971.json","text":"scan() This function helps you avoid crashing into walls. The function makes the robot use its laser rangefinder to determine which directions the robot can move (for one square) without hitting a wall. It returns a set of legal directions to move. For example, in the figure above, if the robot called sense() in the position marked R, the call would return the set {up,down}. extinguish() This function causes the robot to spray all of its fire extinguishing chemicals into the square where it currently is, and then the robot stops executing any further commands. a. [8 marks] Devise an algorithm to direct the robot to the fire and then extinguish it, using worst-case O(p) API calls, where p is the length of the shortest path from the robot’s initial position to the fire. (E.g., in the example above, p = 10. But remember that you are solving this problem in general, not just for the example above!) Write your algorithm in psendocode that uses the above API; your pseudocode must be detailed enough to use the API directly, e.g., making individual sense () and move () calls, and not having statements like “Call sense () in all adjacent squares” or “Move right until reaching a wall”. You may assume that there is always a path from any square to the square with the fire. Note that excessively complex solutions will be penalized. Write your pseudocode here: (Hint: This problems’s title is “Greedy Algorithms”, so you’ll want to make a greedy algorithm. But you have to be careful not to be too greedy. How can the robot figure out a good direction to travel without taking too much time?) b. [4 marks| Briefly justify why your algorithm correctly finds the fire and extinguishes it, and why it makes worst-case O(p) API calls. Your answer doesn’t have to be a fully formal proof, but it must be clear and logically correct.","libVersion":"0.2.1","langs":"eng"}