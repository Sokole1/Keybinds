{"path":".obsidian/plugins/text-extractor/cache/6eb2f71efc048a204972070c3b0fea99.json","text":"R3.12. Stride Exercises for Oversizing Arrays Imagine we have a cache with the following parameters: « Total size of 32 KB (2'° bytes) - 256 sets « 8-way set associativity + 2048 total lines « 16 byte line size « LRU eviction policy To study our cache, we traverse a 32 KB array of uinta_t called A exactly 100 times. We start each traverse atindex 0 and then walk through the array with a stride size of 4 bytes. Assume that A is 32 KB-aligned (i.e., perfectly aligned with respect to the cache) and that we make no memory accesses except to A. (Compute carefully on this problem. No partial credit is available within each part.) If A s exactly 32 KB in size, exactly how many misses wil occur in our 100 traversals? misses: ~ May use a formula with +, -, % and round brackets [-] If A s exactly 16 bytes (1 cache line) larger than 32 KB in size, what will be the set number (the index) of the last line in A (the new line)? (This question and the next are each worth half as much as each other question is worth, but they should help you with the subsequent question. Beware of \"off by one\" errors on these twol A picture may help!) integer (-] If A is exactly 179*16 bytes (179 cache lines) larger than 32 KB in size, what will be the set number (the index) of the last line in A7 integer (-} Now, let A be exactly 176 bytes (11 cache lines) larger than 32 KB and repeat the original experiment. How many misses will occur in our 100 traversals? (Don't forget that we are using LRU, what you learned on the previous two parts, and that some sets now have an extra ine in them.) misses: ~ May use a formula with +, -, % and round brackets [-] 1f we double the cache's associativity by halving the number of sets and then repeat the previous experiment, what impact would that have on the number of misses? O (a) Increases O (b) Stays the same O (c) Decreases O (d) There is not enough information to tell Save & Grade Single attempt ‘Additional attempts available with new variants @","libVersion":"0.2.1","langs":"eng"}