{"path":".obsidian/plugins/text-extractor/cache/2e108cc37be71d77a2e6351c16bfa9d9.json","text":"CPSC 317 Computer Networking Application Layer - Protocols Maryam R.Aliabadi mraiyata@cs.ubc.ca 1CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi Task Overview • Assignment 1 is going on • Due date: Jan 26th • Review tutorial before starting 2CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi READING • Reading: 2.1, 2.7 3CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi Learning goals - general • Explain design considerations for application protocols • Explain the advantages and disadvantages of open (defined by a standard) vs. closed (proprietary) protocols • Explain the difference between a peer-to-peer and a client-server application protocol • Explain the quality-of-service requirements for different applications • Explain what a socket and a transport layer address is • Effectively use Java APIs or C system calls to create/destroy sockets and send/receive data 4CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi Protocol Stack Application Transport Network Link Physical 5 HTTP (Web), Email, File Transfer, Multimedia, etc. TCP, UDP IP Ethernet 802.11b/g/n 1000BASE-T Operating System Hardware CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi Design Considerations For Application-layer Protocols Each application using the network will define its own protocol • Open vs Proprietary • Architecture: • client-server, peer-to-peer (P2P) • Choice of transport protocol • Desired quality of service • Types and formats of messages (request, response, etc.) • Message syntax and semantics • Message encoding format (text, binary, etc.) 6CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi Open Vs Proprietary Protocols • Open protocols: publicly known • Examples: DICT, HTTP, SMTP, SSH • Usually defined in RFC (Request for Comments) documents • Many different implementations • Proprietary protocols • Examples: Skype, iCloud, Zoom • Only one implementation 7CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi Client-Server Architecture • Well-defined roles for client and server • Server is always on, with permanent address or host name • Client establishes connection • Connection is always between one client and one server (although the server will serve multiple clients at once) 8CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi Peer-to-Peer Architecture • Connections typically between peers with the same hierarchical role • Some hierarchy may be used, but connection is not restricted to it • Peers request service from other peers, provide service in return • Self-scalability: new peers bring new demand and new capacity • Complex peer address management 9CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi Clicker Question Which of the following is NOT a characteristic of a peer-to-peer application? A. Hosts are intermittently connected B. Application is self-scalable C. All hosts are known a priori D. All of the above 10CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi Clicker Answer • Which of the following is NOT a characteristic of a peer-to-peer application? A. Hosts are intermittently connected B. Application is self-scalable C. All hosts are known a priori D. All of the above 11CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi What quality of service does an application need? 12 Data loss • some apps can tolerate some loss (e.g., audio) • other apps require 100% reliable data transfer (e.g., file transfer, web, email) Time sensitivity • some apps require low delay to be “effective” (e.g., interactive ones) Bandwidth • some apps (e.g., multimedia) require minimum amount of bandwidth to be “effective” • other apps (“elastic apps”) make use of whatever bandwidth they get CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi Two transport options 13 Reliable stream Unreliable packet Connection No connection Reliable ordered delivery Best effort Flow/Congestion control Nope Possible delays No (transport level) delay CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi Application Examples • File transfer, web, email • Loss averse, not time sensitive, elastic bandwidth • Text messaging • Loss averse, elastic bandwidth, somewhat time sensitive • On demand multimedia streaming • Some loss tolerance, somewhat time sensitive • Real time multimedia, VoIP, interactive games • Some loss tolerance, time sensitive, bandwidth requirements • Domain Name Service • Loss tolerant, not time sensitive, elastic bandwidth 14 → TCP → TCP or UDP → UDP → UDP → UDP CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi The DICT protocol • Defined in RFC 2229 • Google: DICT protocol RFC • Simple text-based, request-response protocol • Commands: help, define, match, show db, show strat, quit • Example: netcat dict.org 2628 • Wait, what is this 2628?? 15CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi A digression on network transport • We will talk about the transport layer protocols later (module 4), but … • You need to know how applications see the layer below them in the network protocol stack • Two things you need to be aware of: • A transport layer address – how network applications are identified • A socket – a network end point 16CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi Transport layer addresses • A pair of a 32-bit IP host address and a 16-bit port number • or a 128-bit IPv6 host address and a 16-bit port number • Usually, the IP address is derived from a DNS name • www.cs.ubc.ca, google.ca, amazon.ca, … 17 netcat dict.org 2628 Port numberHost address Transport Layer address CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi Sockets – network endpoints • Created via socket() system call • Parameters to the socket() call identify the transport protocol and optionally the other participating process • Destroyed via close() • like all other file descriptors • Data sent and received using send() and recv() • or read() and write() if the socket is “connected” 18CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi Sockets In C (TCP Client-Server) 19 ServerIP:ServerPort (e.g., 192.168.1.20:80) C1. socket() S1. socket() send “Get me amazon.ca” send “amazon.ca” client server C3. send()/write() S5. recv()/read() S2. bind(ServerIP, ServerPort) C2. connect(ServerIP, ServerPort) C4. recv()/read() S6. send()/write() C5. close() S7. close() S3. listen() S4. accept() listening socket connection socket TCP handshake protocol CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi Sockets in Java • class Socket for the client side • new Socket(host, port) • host is a String • port is an int • Creates a socket, connects it to the indicated server, and returns the socket • Throws various exceptions when things go wrong • class ServerSocket() for the server side 20CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi Sockets In Java (TCP Client-Server) 21 ServerIP:ServerPort (e.g., 192.168.1.20:80) C1. Socket(ServerIP, ServerPort) S1. ServerSocket(ServerPort) send “Get me amazon.ca” send “amazon.ca” client server C2. getOutputStream() write to stream S3. getInputStream() read from stream C3. getInputStream() read from stream S4. getOutputStream() write to stream C4. close() S5. close() S2. accept() CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi The Simplest Java Socket Client private void body() { try (Socket s = new Socket(\"dict.org\", 2628)) { BufferedReader input = new BufferedReader(new InputStreamReader(s.getInputStream())); String greeting = input.readLine(); System.out.println(greeting); } catch (IOException e) { e.printStackTrace(); } } 22CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi In-class activity • Form yourselves into groups (1 – 9 students per group) • You should be able to chat conveniently in your group • Go to PrairieLearn • Click on Assessments • Start the ICA31 assessment (Application Architecture and Transport Protocols ) • Talk in your group about the answers • Hearing other students' ideas • Explaining your ideas to others 23CPSC 317 – Computer Networking : Application Layer - Protocols Maryam R. Aliabadi Next Topic: Application Layer – The Web 24","libVersion":"0.2.1","langs":""}